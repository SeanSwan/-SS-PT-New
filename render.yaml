# SwanStudios Render Deployment Configuration
# ==========================================
# Complete configuration for deploying SwanStudios to Render with PostgreSQL

# Main web service (Node.js backend + frontend)
services:
  - type: web
    name: swanstudios-main
    runtime: node
    repo: https://github.com/YOUR-USERNAME/SS-PT # Update with your repo
    branch: main
    rootDir: ./
    buildCommand: |
      # Install backend dependencies
      cd backend && npm install
      # Install frontend dependencies and build
      cd ../frontend && npm install && npm run build
      # Install MCP server dependencies
      cd ../backend/mcp_server && pip install -r requirements.txt
    startCommand: |
      # Start the main backend server
      cd backend && npm start
    plan: starter # or standard/pro based on needs
    env:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 10000
      - key: FRONTEND_URL
        fromService:
          type: web
          name: swanstudios-main
          property: host
      - key: DATABASE_URL
        fromDatabase:
          name: swanstudios-db
          property: connectionString
      - key: JWT_SECRET
        generateValue: true
        length: 32
      - key: STRIPE_SECRET_KEY
        sync: false  # Set manually in Render dashboard
      - key: STRIPE_PUBLISHABLE_KEY  
        sync: false  # Set manually in Render dashboard

  # Frontend static site (PRODUCTION CONFIGURATION)
  - type: static
    name: swanstudios-frontend
    runtime: node
    repo: https://github.com/SeanSwan/-SS-PT-New
    branch: main
    rootDir: ./frontend
    buildCommand: npm install && npm run build
    staticPublishPath: ./dist
    env:
      - key: VITE_API_URL
        value: https://ss-pt-new.onrender.com
      - key: VITE_API_BASE_URL
        value: https://ss-pt-new.onrender.com
      - key: VITE_BACKEND_URL
        value: https://ss-pt-new.onrender.com
      - key: NODE_ENV
        value: production

  # MCP Servers (background workers)
  - type: worker
    name: swanstudios-mcp-yolo
    runtime: python
    repo: https://github.com/YOUR-USERNAME/SS-PT
    branch: main
    rootDir: ./backend/mcp_server
    buildCommand: pip install -r yolo_mcp_server/requirements-minimal.txt
    startCommand: cd yolo_mcp_server && python start_yolo_server.py
    env:
      - key: DATABASE_URL
        fromDatabase:
          name: swanstudios-db
          property: connectionString
      - key: PORT
        value: 8002

  - type: worker
    name: swanstudios-mcp-workout
    runtime: python
    repo: https://github.com/YOUR-USERNAME/SS-PT
    branch: main
    rootDir: ./backend/mcp_server
    buildCommand: pip install -r workout_requirements.txt
    startCommand: python workout_launcher.py
    env:
      - key: DATABASE_URL
        fromDatabase:
          name: swanstudios-db
          property: connectionString
      - key: PORT
        value: 8001

  - type: worker
    name: swanstudios-mcp-gamification
    runtime: python
    repo: https://github.com/YOUR-USERNAME/SS-PT
    branch: main
    rootDir: ./backend/mcp_server
    buildCommand: pip install -r gamification_mcp_server/requirements.txt
    startCommand: python start_gamification_server.py
    env:
      - key: DATABASE_URL
        fromDatabase:
          name: swanstudios-db
          property: connectionString
      - key: PORT
        value: 8003

# PostgreSQL database
databases:
  - name: swanstudios-db
    databaseName: swanstudios
    user: swanstudios_user
    plan: starter # or standard/pro based on needs

# Environment variables to set manually in Render dashboard:
# - STRIPE_SECRET_KEY: Your Stripe secret key
# - STRIPE_PUBLISHABLE_KEY: Your Stripe publishable key
# - EMAIL_SERVICE_API_KEY: If using email service
# - Any other third-party API keys

# Custom domains (optional)
# domains:
#   - name: app.swanstudios.com
#     type: apex
#   - name: api.swanstudios.com
#     type: subdomain
