#!/usr/bin/env node\n/**\n * SwanStudios Database Persistence Test Runner\n * MASTER PROMPT V42 COMPLIANCE: Simple Production Verification\n * \n * This script provides a simple way to verify that:\n * 1. PostgreSQL is working correctly\n * 2. New signups will be saved and appear in admin dashboard\n * 3. Database connectivity is stable\n * \n * Usage: npm run test-database\n */\n\nimport { execSync } from 'child_process';\nimport { fileURLToPath } from 'url';\nimport { dirname, join } from 'path';\nimport fs from 'fs';\nimport chalk from 'chalk';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst log = {\n  info: (msg) => console.log(chalk.blue('ℹ️  ' + msg)),\n  success: (msg) => console.log(chalk.green('✅ ' + msg)),\n  error: (msg) => console.log(chalk.red('❌ ' + msg)),\n  warning: (msg) => console.log(chalk.yellow('⚠️  ' + msg)),\n  header: (msg) => console.log(chalk.cyan.bold('\\n🚀 ' + msg)),\n};\n\nconst runDatabaseTests = async () => {\n  console.clear();\n  log.header('SwanStudios Database Persistence Verification');\n  console.log(chalk.gray('Ensuring your PostgreSQL database is saving user signups correctly...\\n'));\n  \n  try {\n    // Check if we're in the right directory\n    const backendPath = join(__dirname, '../backend');\n    if (!fs.existsSync(backendPath)) {\n      log.error('Backend directory not found. Please run this from the project root.');\n      process.exit(1);\n    }\n    \n    // Check if environment file exists\n    const envPath = join(backendPath, '.env');\n    if (!fs.existsSync(envPath)) {\n      log.error('Environment file not found at backend/.env');\n      log.warning('Please ensure your database connection is configured');\n      process.exit(1);\n    }\n    \n    log.info('Running quick production database check...');\n    \n    // Run the quick production check\n    const quickCheckPath = join(__dirname, 'backend/tests/persistence/quick-production-check.mjs');\n    \n    try {\n      const result = execSync(`node \"${quickCheckPath}\"`, {\n        cwd: join(__dirname, '../'),\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n      \n      console.log(result);\n      log.success('🎉 Database persistence test PASSED!');\n      log.success('✅ Your PostgreSQL database is working correctly');\n      log.success('✅ New signups will appear immediately in your admin dashboard');\n      \n    } catch (error) {\n      console.log(error.stdout);\n      log.error('🚨 Database persistence test FAILED!');\n      log.error('❌ There may be issues with your database connection');\n      log.warning('⚠️  Please check your DATABASE_URL and network connectivity');\n      \n      // Offer to run comprehensive tests\n      log.info('\\nWould you like to run comprehensive diagnostic tests?');\n      log.info('Run: npm run test-database-comprehensive');\n      \n      process.exit(1);\n    }\n    \n  } catch (error) {\n    log.error(`Test runner failed: ${error.message}`);\n    process.exit(1);\n  }\n};\n\nconst runComprehensiveTests = async () => {\n  console.clear();\n  log.header('SwanStudios Comprehensive Database Diagnostics');\n  console.log(chalk.gray('Running detailed database persistence tests...\\n'));\n  \n  try {\n    const comprehensiveTestPath = join(__dirname, 'backend/tests/persistence/comprehensive-persistence-test.mjs');\n    \n    log.info('Running comprehensive database tests (this may take 30-60 seconds)...');\n    \n    const result = execSync(`node \"${comprehensiveTestPath}\"`, {\n      cwd: join(__dirname, '../'),\n      encoding: 'utf8',\n      stdio: 'pipe'\n    });\n    \n    console.log(result);\n    \n  } catch (error) {\n    console.log(error.stdout);\n    log.error('Comprehensive tests completed with some failures');\n    log.warning('Please review the detailed results above');\n    process.exit(1);\n  }\n};\n\n// Handle command line arguments\nconst args = process.argv.slice(2);\nconst command = args[0];\n\nswitch (command) {\n  case 'comprehensive':\n  case '--comprehensive':\n  case '-c':\n    runComprehensiveTests();\n    break;\n  case 'quick':\n  case '--quick':\n  case '-q':\n  default:\n    runDatabaseTests();\n    break;\n}\n\n// Handle errors\nprocess.on('unhandledRejection', (reason, promise) => {\n  log.error(`Unhandled Rejection: ${reason}`);\n  process.exit(1);\n});\n\nprocess.on('SIGINT', () => {\n  console.log('\\n' + chalk.yellow('Test interrupted by user'));\n  process.exit(0);\n});\n