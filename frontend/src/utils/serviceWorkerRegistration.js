/**\n * Service Worker Registration for PWA\n * ===================================\n * \n * Handles registration and lifecycle management of the service worker\n * for offline functionality and PWA features\n */\n\n// Register service worker with enhanced lifecycle management\nexport const registerServiceWorker = async () => {\n  // Only register in production or when explicitly enabled\n  const isProduction = import.meta.env.MODE === 'production';\n  const enableSW = import.meta.env.VITE_ENABLE_SERVICE_WORKER === 'true';\n  \n  if (!('serviceWorker' in navigator) || (!isProduction && !enableSW)) {\n    console.log('SW: Service Worker not supported or disabled');\n    return null;\n  }\n\n  try {\n    console.log('SW: Registering service worker...');\n    \n    // Register the service worker\n    const registration = await navigator.serviceWorker.register('/spa-sw.js', {\n      scope: '/'\n    });\n    \n    console.log('SW: Service worker registered successfully:', registration.scope);\n    \n    // Handle service worker updates\n    registration.addEventListener('updatefound', () => {\n      const newWorker = registration.installing;\n      \n      if (newWorker) {\n        console.log('SW: New service worker found, installing...');\n        \n        newWorker.addEventListener('statechange', () => {\n          if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n            console.log('SW: New service worker installed, update available');\n            \n            // Show update notification to user\n            showUpdateNotification(newWorker);\n          }\n        });\n      }\n    });\n    \n    // Listen for service worker messages\n    navigator.serviceWorker.addEventListener('message', (event) => {\n      handleServiceWorkerMessage(event.data);\n    });\n    \n    // Handle service worker errors\n    registration.addEventListener('error', (error) => {\n      console.error('SW: Service worker error:', error);\n    });\n    \n    return registration;\n  } catch (error) {\n    console.error('SW: Service worker registration failed:', error);\n    return null;\n  }\n};\n\n// Show update notification to user\nconst showUpdateNotification = (newWorker) => {\n  // Create a simple update notification\n  const notification = document.createElement('div');\n  notification.style.cssText = `\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: linear-gradient(135deg, #3b82f6, #1d4ed8);\n    color: white;\n    padding: 16px 20px;\n    border-radius: 12px;\n    box-shadow: 0 8px 32px rgba(59, 130, 246, 0.3);\n    z-index: 10000;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    font-size: 14px;\n    max-width: 320px;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    backdrop-filter: blur(10px);\n  `;\n  \n  notification.innerHTML = `\n    <div style=\"margin-bottom: 12px; font-weight: 600;\">\n      App Update Available\n    </div>\n    <div style=\"margin-bottom: 16px; opacity: 0.9; line-height: 1.4;\">\n      A new version of Swan Studios is available with improved features and performance.\n    </div>\n    <div style=\"display: flex; gap: 8px;\">\n      <button id=\"update-now\" style=\"\n        background: rgba(255, 255, 255, 0.2);\n        color: white;\n        border: 1px solid rgba(255, 255, 255, 0.3);\n        border-radius: 6px;\n        padding: 8px 16px;\n        font-size: 14px;\n        cursor: pointer;\n        transition: all 0.2s ease;\n      \">Update Now</button>\n      <button id=\"update-later\" style=\"\n        background: rgba(255, 255, 255, 0.1);\n        color: white;\n        border: 1px solid rgba(255, 255, 255, 0.2);\n        border-radius: 6px;\n        padding: 8px 16px;\n        font-size: 14px;\n        cursor: pointer;\n        transition: all 0.2s ease;\n      \">Later</button>\n    </div>\n  `;\n  \n  document.body.appendChild(notification);\n  \n  // Handle update buttons\n  const updateNow = notification.querySelector('#update-now');\n  const updateLater = notification.querySelector('#update-later');\n  \n  updateNow.addEventListener('click', () => {\n    console.log('SW: User chose to update now');\n    newWorker.postMessage({ type: 'SKIP_WAITING' });\n    window.location.reload();\n  });\n  \n  updateLater.addEventListener('click', () => {\n    console.log('SW: User chose to update later');\n    document.body.removeChild(notification);\n  });\n  \n  // Auto-remove after 30 seconds\n  setTimeout(() => {\n    if (document.body.contains(notification)) {\n      document.body.removeChild(notification);\n    }\n  }, 30000);\n};\n\n// Handle messages from service worker\nconst handleServiceWorkerMessage = (data) => {\n  const { type, message, data: messageData } = data;\n  \n  switch (type) {\n    case 'SW_ACTIVATED':\n      console.log('SW: Service worker activated:', message);\n      break;\n      \n    case 'WORKOUT_SYNCED':\n      console.log('SW: Workout synced successfully:', messageData);\n      // Dispatch custom event for app to handle\n      window.dispatchEvent(new CustomEvent('workoutSynced', {\n        detail: messageData\n      }));\n      break;\n      \n    case 'CACHE_UPDATED':\n      console.log('SW: Cache updated:', messageData);\n      break;\n      \n    default:\n      console.log('SW: Unknown message from service worker:', data);\n  }\n};\n\n// Get offline workout data\nexport const getOfflineWorkouts = async () => {\n  if (!('serviceWorker' in navigator) || !navigator.serviceWorker.controller) {\n    return [];\n  }\n  \n  return new Promise((resolve) => {\n    const messageChannel = new MessageChannel();\n    \n    messageChannel.port1.onmessage = (event) => {\n      resolve(event.data.workouts || []);\n    };\n    \n    navigator.serviceWorker.controller.postMessage(\n      { type: 'GET_OFFLINE_WORKOUTS' },\n      [messageChannel.port2]\n    );\n  });\n};\n\n// Force sync of offline data\nexport const forceSyncOfflineData = () => {\n  if (navigator.serviceWorker.controller) {\n    navigator.serviceWorker.controller.postMessage({\n      type: 'FORCE_SYNC'\n    });\n  }\n};\n\n// Check if app is running as PWA\nexport const isPWA = () => {\n  return window.matchMedia('(display-mode: standalone)').matches ||\n         (window.navigator as any).standalone === true;\n};\n\n// Check if device is online\nexport const isOnline = () => {\n  return navigator.onLine;\n};\n\n// Add network status listeners\nexport const addNetworkListeners = (onOnline, onOffline) => {\n  window.addEventListener('online', onOnline);\n  window.addEventListener('offline', onOffline);\n  \n  // Return cleanup function\n  return () => {\n    window.removeEventListener('online', onOnline);\n    window.removeEventListener('offline', onOffline);\n  };\n};\n\n// Request persistent storage for offline data\nexport const requestPersistentStorage = async () => {\n  if ('storage' in navigator && 'persist' in navigator.storage) {\n    try {\n      const persistent = await navigator.storage.persist();\n      console.log('SW: Persistent storage granted:', persistent);\n      return persistent;\n    } catch (error) {\n      console.warn('SW: Could not request persistent storage:', error);\n      return false;\n    }\n  }\n  return false;\n};\n\n// Get storage usage\nexport const getStorageUsage = async () => {\n  if ('storage' in navigator && 'estimate' in navigator.storage) {\n    try {\n      const estimate = await navigator.storage.estimate();\n      return {\n        used: estimate.usage || 0,\n        available: estimate.quota || 0,\n        percentage: estimate.usage && estimate.quota \n          ? Math.round((estimate.usage / estimate.quota) * 100)\n          : 0\n      };\n    } catch (error) {\n      console.warn('SW: Could not get storage estimate:', error);\n      return { used: 0, available: 0, percentage: 0 };\n    }\n  }\n  return { used: 0, available: 0, percentage: 0 };\n};\n\n// Initialize PWA features\nexport const initializePWA = async () => {\n  console.log('SW: Initializing PWA features...');\n  \n  // Register service worker\n  const registration = await registerServiceWorker();\n  \n  // Request persistent storage\n  await requestPersistentStorage();\n  \n  // Log storage usage\n  const storage = await getStorageUsage();\n  console.log('SW: Storage usage:', storage);\n  \n  // Add to window for debugging\n  if (process.env.NODE_ENV === 'development') {\n    window.__PWA_DEBUG__ = {\n      getOfflineWorkouts,\n      forceSyncOfflineData,\n      isPWA,\n      isOnline,\n      getStorageUsage,\n      registration\n    };\n  }\n  \n  return {\n    registration,\n    isPWA: isPWA(),\n    isOnline: isOnline(),\n    storage\n  };\n};\n\nexport default {\n  registerServiceWorker,\n  getOfflineWorkouts,\n  forceSyncOfflineData,\n  isPWA,\n  isOnline,\n  addNetworkListeners,\n  requestPersistentStorage,\n  getStorageUsage,\n  initializePWA\n};