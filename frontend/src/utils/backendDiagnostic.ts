/**\n * Backend Connectivity Diagnostic\n * Emergency script to test and fix backend connection issues\n */\n\n// Test multiple backend URLs\nconst BACKEND_URLS = [\n  'https://swan-studios-api.onrender.com',\n  'https://ss-pt-new.onrender.com',\n  'https://sswanstudios.com',  // Same-origin fallback\n];\n\nconst ENDPOINTS_TO_TEST = [\n  '/health',\n  '/api/health',\n  '/',\n  '/test'\n];\n\n/**\n * Test backend connectivity and find working endpoint\n */\nasync function diagnoseBackendConnectivity() {\n  console.log('🔍 SwanStudios Backend Connectivity Diagnostic');\n  console.log('='.repeat(50));\n  \n  const results = [];\n  \n  for (const baseUrl of BACKEND_URLS) {\n    console.log(`\\n🌐 Testing: ${baseUrl}`);\n    \n    for (const endpoint of ENDPOINTS_TO_TEST) {\n      const fullUrl = `${baseUrl}${endpoint}`;\n      \n      try {\n        console.log(`  📍 ${endpoint} ...`);\n        \n        const response = await fetch(fullUrl, {\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include'\n        });\n        \n        const status = response.status;\n        let data = null;\n        \n        try {\n          data = await response.json();\n        } catch (e) {\n          data = await response.text();\n        }\n        \n        const result = {\n          url: fullUrl,\n          status,\n          success: status >= 200 && status < 300,\n          data: typeof data === 'string' ? data.substring(0, 100) : data\n        };\n        \n        results.push(result);\n        \n        if (result.success) {\n          console.log(`    ✅ ${status} - SUCCESS`);\n          if (typeof data === 'object') {\n            console.log(`    📄 Response:`, JSON.stringify(data, null, 2).substring(0, 200));\n          }\n        } else {\n          console.log(`    ❌ ${status} - FAILED`);\n        }\n        \n      } catch (error) {\n        console.log(`    🚫 ERROR: ${error.message}`);\n        results.push({\n          url: fullUrl,\n          status: 0,\n          success: false,\n          error: error.message\n        });\n      }\n    }\n  }\n  \n  // Summary\n  console.log('\\n📊 DIAGNOSTIC SUMMARY');\n  console.log('='.repeat(30));\n  \n  const workingEndpoints = results.filter(r => r.success);\n  const failedEndpoints = results.filter(r => !r.success);\n  \n  if (workingEndpoints.length > 0) {\n    console.log(`\\n✅ WORKING ENDPOINTS (${workingEndpoints.length}):`);\n    workingEndpoints.forEach(r => {\n      console.log(`  🟢 ${r.url} (${r.status})`);\n    });\n    \n    console.log('\\n🎯 RECOMMENDED ACTION:');\n    console.log(`Use this working URL: ${workingEndpoints[0].url.split('/')[0]}//${workingEndpoints[0].url.split('/')[2]}`);\n  } else {\n    console.log('\\n❌ NO WORKING ENDPOINTS FOUND');\n    console.log('\\n🚨 CRITICAL: Backend is completely down!');\n    console.log('\\n🔧 IMMEDIATE ACTIONS NEEDED:');\n    console.log('1. Check Render dashboard: https://dashboard.render.com');\n    console.log('2. Verify backend deployment status');\n    console.log('3. Check backend logs for errors');\n    console.log('4. Redeploy if necessary');\n  }\n  \n  if (failedEndpoints.length > 0) {\n    console.log(`\\n⚠️  FAILED ENDPOINTS (${failedEndpoints.length}):`);\n    failedEndpoints.forEach(r => {\n      console.log(`  🔴 ${r.url} - ${r.error || r.status}`);\n    });\n  }\n  \n  return { workingEndpoints, failedEndpoints, results };\n}\n\n/**\n * Quick backend status check\n */\nfunction quickBackendCheck() {\n  console.log('⚡ Quick Backend Status Check');\n  \n  // Test primary backend\n  fetch('https://swan-studios-api.onrender.com/health')\n    .then(response => {\n      if (response.ok) {\n        console.log('✅ Primary backend is ONLINE');\n        return response.json();\n      } else {\n        console.log(`❌ Primary backend returned ${response.status}`);\n        throw new Error(`HTTP ${response.status}`);\n      }\n    })\n    .then(data => {\n      console.log('📄 Backend response:', data);\n    })\n    .catch(error => {\n      console.log('🚫 Primary backend is DOWN:', error.message);\n      console.log('🔄 Switching to full diagnostic...');\n      diagnoseBackendConnectivity();\n    });\n}\n\n// Export for use in browser console\nif (typeof window !== 'undefined') {\n  window.swanStudiosDiagnostic = {\n    diagnoseBackendConnectivity,\n    quickBackendCheck\n  };\n  \n  console.log('🛠️  SwanStudios Diagnostic Tools Loaded!');\n  console.log('Run: swanStudiosDiagnostic.quickBackendCheck()');\n  console.log('Or:  swanStudiosDiagnostic.diagnoseBackendConnectivity()');\n}\n\nexport { diagnoseBackendConnectivity, quickBackendCheck };\n