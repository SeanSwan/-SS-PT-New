// services/exercise-service.ts
import { AxiosInstance } from 'axios';
import { getMockRecommendedExercises } from './mock-exercise-service';

// Define Exercise interface
export interface Exercise {
  id: string;
  name: string;
  description: string;
  exerciseType: string;
  difficulty: number;
  recommendedSets?: number;
  recommendedReps?: number;
  recommendedDuration?: number; // in seconds
  primaryMuscles: string[];
  secondaryMuscles: string[];
  equipment: string[];
  videoUrl?: string | null;
  imageUrl?: string | null;
  instructions: string[];
  isFeatured: boolean;
  nasmCategory?: string;
}

// Response interfaces
export interface RecommendedExercisesResponse {
  success: boolean;
  message?: string;
  recommendedExercises: Exercise[];
  focusCategories: string[];
}

export interface SingleExerciseResponse {
  success: boolean;
  message?: string;
  exercise: Exercise;
}

export interface ExercisesListResponse {
  success: boolean;
  message?: string;
  exercises: Exercise[];
}

// Service interface
export interface ExerciseServiceInterface {
  getRecommendedExercises: () => Promise<RecommendedExercisesResponse>;
  getExerciseById: (id: string) => Promise<SingleExerciseResponse>;
  getExercisesByType: (type: string) => Promise<ExercisesListResponse>;
  getExercisesByMuscleGroup: (muscleGroup: string) => Promise<ExercisesListResponse>;
  searchExercises: (query: string) => Promise<ExercisesListResponse>;
}

// Create service
export const createExerciseService = (axios: AxiosInstance): ExerciseServiceInterface => {
  return {
    getRecommendedExercises: async () => {
      try {
        console.log('Fetching recommended exercises from API...');
        const response = await axios.get<RecommendedExercisesResponse>('/api/exercises/recommended');
        
        if (response.data && response.data.success) {
          console.log(`Received ${response.data.recommendedExercises.length} recommended exercises`);
          return response.data;
        } else {
          throw new Error('Invalid API response format');
        }
      } catch (error) {
        console.error('Error fetching recommended exercises:', error);
        console.log('Falling back to mock exercise data');
        // Return mock data if the API fails
        return getMockRecommendedExercises();
      }
    },
    
    getExerciseById: async (id: string) => {
      try {
        const response = await axios.get<SingleExerciseResponse>(`/api/exercises/${id}`);
        return response.data;
      } catch (error) {
        console.error(`Error fetching exercise with ID ${id}:`, error);
        // Since we can't easily generate a specific exercise without knowing the ID details,
        // re-throw the error or provide a basic fallback
        throw error;
      }
    },
    
    getExercisesByType: async (type: string) => {
      try {
        const response = await axios.get<ExercisesListResponse>(`/api/exercises/type/${type}`);
        return response.data;
      } catch (error) {
        console.error(`Error fetching exercises by type ${type}:`, error);
        
        // Fallback: Filter mock data by type
        const mockData = getMockRecommendedExercises();
        const filteredExercises = mockData.recommendedExercises.filter(
          ex => ex.exerciseType === type || ex.nasmCategory === type
        );
        
        return {
          success: true,
          exercises: filteredExercises
        };
      }
    },
    
    getExercisesByMuscleGroup: async (muscleGroup: string) => {
      try {
        const response = await axios.get<ExercisesListResponse>(`/api/exercises/muscle/${muscleGroup}`);
        return response.data;
      } catch (error) {
        console.error(`Error fetching exercises by muscle group ${muscleGroup}:`, error);
        
        // Fallback: Filter mock data by muscle group
        const mockData = getMockRecommendedExercises();
        const filteredExercises = mockData.recommendedExercises.filter(
          ex => ex.primaryMuscles.includes(muscleGroup) || ex.secondaryMuscles.includes(muscleGroup)
        );
        
        return {
          success: true,
          exercises: filteredExercises
        };
      }
    },
    
    searchExercises: async (query: string) => {
      try {
        const response = await axios.get<ExercisesListResponse>(`/api/exercises/search?q=${encodeURIComponent(query)}`);
        return response.data;
      } catch (error) {
        console.error(`Error searching exercises with query "${query}":`, error);
        
        // Fallback: Search mock data
        const mockData = getMockRecommendedExercises();
        const lowercaseQuery = query.toLowerCase();
        
        const filteredExercises = mockData.recommendedExercises.filter(ex => 
          ex.name.toLowerCase().includes(lowercaseQuery) || 
          ex.description.toLowerCase().includes(lowercaseQuery) || 
          ex.exerciseType.toLowerCase().includes(lowercaseQuery) ||
          ex.primaryMuscles.some(muscle => muscle.toLowerCase().includes(lowercaseQuery)) ||
          ex.secondaryMuscles.some(muscle => muscle.toLowerCase().includes(lowercaseQuery))
        );
        
        return {
          success: true,
          exercises: filteredExercises
        };
      }
    }
  };
};
