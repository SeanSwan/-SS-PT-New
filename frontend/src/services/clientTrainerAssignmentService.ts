/**\n * Client-Trainer Assignment Service\n * ================================\n * Service for managing client-trainer assignments in the Universal Master Schedule\n * \n * This service handles the complete client-trainer assignment lifecycle,\n * including creation, management, and permissions control as outlined in\n * The Grand Unifying Blueprint v43.2.\n * \n * FEATURES:\n * - Create and manage client-trainer assignments\n * - Handle trainer permissions and access control\n * - Support for bulk assignment operations\n * - Real-time assignment updates\n * - Integration with session management\n * - Audit trail and assignment history\n */\n\nimport { ApiService } from './api.service';\nimport {\n  ClientTrainerAssignment,\n  AssignmentRequest,\n  ApiResponse,\n  PaginatedResponse,\n  Client,\n  Trainer,\n  BulkOperationRequest\n} from '../components/UniversalMasterSchedule/types';\n\n/**\n * Client-Trainer Assignment Service Class\n */\nclass ClientTrainerAssignmentService {\n  private apiService: ApiService;\n  \n  constructor() {\n    this.apiService = new ApiService();\n  }\n  \n  // ==================== ASSIGNMENT CRUD OPERATIONS ====================\n  \n  /**\n   * Get all client-trainer assignments\n   * @param filters - Optional filters for assignments\n   * @returns Promise<ClientTrainerAssignment[]>\n   */\n  async getAssignments(filters?: {\n    clientId?: string;\n    trainerId?: string;\n    isActive?: boolean;\n    assignedBy?: string;\n  }): Promise<ClientTrainerAssignment[]> {\n    try {\n      const params = new URLSearchParams();\n      \n      if (filters?.clientId) params.append('clientId', filters.clientId);\n      if (filters?.trainerId) params.append('trainerId', filters.trainerId);\n      if (filters?.isActive !== undefined) params.append('isActive', filters.isActive.toString());\n      if (filters?.assignedBy) params.append('assignedBy', filters.assignedBy);\n      \n      const queryString = params.toString();\n      const url = `/api/client-trainer-assignments${queryString ? `?${queryString}` : ''}`;\n      \n      const response = await this.apiService.get<ClientTrainerAssignment[]>(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching assignments:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Get assignments for a specific client\n   * @param clientId - Client ID\n   * @returns Promise<ClientTrainerAssignment[]>\n   */\n  async getClientAssignments(clientId: string): Promise<ClientTrainerAssignment[]> {\n    try {\n      const response = await this.apiService.get<ClientTrainerAssignment[]>(\n        `/api/client-trainer-assignments/client/${clientId}`\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching client assignments:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Get assignments for a specific trainer\n   * @param trainerId - Trainer ID\n   * @returns Promise<ClientTrainerAssignment[]>\n   */\n  async getTrainerAssignments(trainerId: string): Promise<ClientTrainerAssignment[]> {\n    try {\n      const response = await this.apiService.get<ClientTrainerAssignment[]>(\n        `/api/client-trainer-assignments/trainer/${trainerId}`\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching trainer assignments:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Create a new client-trainer assignment\n   * @param assignmentData - Assignment data\n   * @returns Promise<ClientTrainerAssignment>\n   */\n  async createAssignment(assignmentData: AssignmentRequest): Promise<ClientTrainerAssignment> {\n    try {\n      const response = await this.apiService.post<ClientTrainerAssignment>(\n        '/api/client-trainer-assignments',\n        assignmentData\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error creating assignment:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Update an existing assignment\n   * @param assignmentId - Assignment ID\n   * @param updateData - Update data\n   * @returns Promise<ClientTrainerAssignment>\n   */\n  async updateAssignment(\n    assignmentId: string, \n    updateData: Partial<AssignmentRequest>\n  ): Promise<ClientTrainerAssignment> {\n    try {\n      const response = await this.apiService.put<ClientTrainerAssignment>(\n        `/api/client-trainer-assignments/${assignmentId}`,\n        updateData\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error updating assignment:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Deactivate an assignment\n   * @param assignmentId - Assignment ID\n   * @returns Promise<void>\n   */\n  async deactivateAssignment(assignmentId: string): Promise<void> {\n    try {\n      await this.apiService.put(`/api/client-trainer-assignments/${assignmentId}/deactivate`);\n    } catch (error) {\n      console.error('Error deactivating assignment:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Delete an assignment\n   * @param assignmentId - Assignment ID\n   * @returns Promise<void>\n   */\n  async deleteAssignment(assignmentId: string): Promise<void> {\n    try {\n      await this.apiService.delete(`/api/client-trainer-assignments/${assignmentId}`);\n    } catch (error) {\n      console.error('Error deleting assignment:', error);\n      throw error;\n    }\n  }\n  \n  // ==================== ASSIGNMENT OPERATIONS ====================\n  \n  /**\n   * Assign a client to a trainer\n   * @param clientId - Client ID\n   * @param trainerId - Trainer ID\n   * @param notes - Optional notes\n   * @returns Promise<ClientTrainerAssignment>\n   */\n  async assignClientToTrainer(\n    clientId: string,\n    trainerId: string,\n    notes?: string\n  ): Promise<ClientTrainerAssignment> {\n    return this.createAssignment({ clientId, trainerId, notes });\n  }\n  \n  /**\n   * Reassign a client to a different trainer\n   * @param clientId - Client ID\n   * @param newTrainerId - New trainer ID\n   * @param notes - Optional notes\n   * @returns Promise<ClientTrainerAssignment>\n   */\n  async reassignClient(\n    clientId: string,\n    newTrainerId: string,\n    notes?: string\n  ): Promise<ClientTrainerAssignment> {\n    try {\n      // First, deactivate existing assignments for this client\n      const existingAssignments = await this.getClientAssignments(clientId);\n      const activeAssignments = existingAssignments.filter(a => a.isActive);\n      \n      // Deactivate all active assignments\n      await Promise.all(\n        activeAssignments.map(assignment => \n          this.deactivateAssignment(assignment.id)\n        )\n      );\n      \n      // Create new assignment\n      return this.createAssignment({\n        clientId,\n        trainerId: newTrainerId,\n        notes: notes || 'Client reassigned'\n      });\n    } catch (error) {\n      console.error('Error reassigning client:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Unassign a client from all trainers\n   * @param clientId - Client ID\n   * @returns Promise<void>\n   */\n  async unassignClient(clientId: string): Promise<void> {\n    try {\n      const assignments = await this.getClientAssignments(clientId);\n      const activeAssignments = assignments.filter(a => a.isActive);\n      \n      await Promise.all(\n        activeAssignments.map(assignment => \n          this.deactivateAssignment(assignment.id)\n        )\n      );\n    } catch (error) {\n      console.error('Error unassigning client:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Get unassigned clients\n   * @returns Promise<Client[]>\n   */\n  async getUnassignedClients(): Promise<Client[]> {\n    try {\n      const response = await this.apiService.get<Client[]>(\n        '/api/client-trainer-assignments/unassigned-clients'\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching unassigned clients:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Get clients assigned to a specific trainer\n   * @param trainerId - Trainer ID\n   * @returns Promise<Client[]>\n   */\n  async getTrainerClients(trainerId: string): Promise<Client[]> {\n    try {\n      const response = await this.apiService.get<Client[]>(\n        `/api/client-trainer-assignments/trainer/${trainerId}/clients`\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching trainer clients:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Get the trainer assigned to a specific client\n   * @param clientId - Client ID\n   * @returns Promise<Trainer | null>\n   */\n  async getClientTrainer(clientId: string): Promise<Trainer | null> {\n    try {\n      const response = await this.apiService.get<Trainer>(\n        `/api/client-trainer-assignments/client/${clientId}/trainer`\n      );\n      return response.data;\n    } catch (error) {\n      if (error.response?.status === 404) {\n        return null; // No trainer assigned\n      }\n      console.error('Error fetching client trainer:', error);\n      throw error;\n    }\n  }\n  \n  // ==================== BULK OPERATIONS ====================\n  \n  /**\n   * Bulk assign multiple clients to a trainer\n   * @param clientIds - Array of client IDs\n   * @param trainerId - Trainer ID\n   * @param notes - Optional notes\n   * @returns Promise<ClientTrainerAssignment[]>\n   */\n  async bulkAssignClients(\n    clientIds: string[],\n    trainerId: string,\n    notes?: string\n  ): Promise<ClientTrainerAssignment[]> {\n    try {\n      const response = await this.apiService.post<ClientTrainerAssignment[]>(\n        '/api/client-trainer-assignments/bulk-assign',\n        {\n          clientIds,\n          trainerId,\n          notes\n        }\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error bulk assigning clients:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Bulk reassign multiple clients to a new trainer\n   * @param clientIds - Array of client IDs\n   * @param newTrainerId - New trainer ID\n   * @param notes - Optional notes\n   * @returns Promise<ClientTrainerAssignment[]>\n   */\n  async bulkReassignClients(\n    clientIds: string[],\n    newTrainerId: string,\n    notes?: string\n  ): Promise<ClientTrainerAssignment[]> {\n    try {\n      const response = await this.apiService.post<ClientTrainerAssignment[]>(\n        '/api/client-trainer-assignments/bulk-reassign',\n        {\n          clientIds,\n          newTrainerId,\n          notes\n        }\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error bulk reassigning clients:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Bulk unassign multiple clients\n   * @param clientIds - Array of client IDs\n   * @returns Promise<void>\n   */\n  async bulkUnassignClients(clientIds: string[]): Promise<void> {\n    try {\n      await this.apiService.post('/api/client-trainer-assignments/bulk-unassign', {\n        clientIds\n      });\n    } catch (error) {\n      console.error('Error bulk unassigning clients:', error);\n      throw error;\n    }\n  }\n  \n  // ==================== ASSIGNMENT STATISTICS ====================\n  \n  /**\n   * Get assignment statistics\n   * @returns Promise<AssignmentStats>\n   */\n  async getAssignmentStatistics(): Promise<{\n    totalAssignments: number;\n    activeAssignments: number;\n    unassignedClients: number;\n    trainersWithClients: number;\n    averageClientsPerTrainer: number;\n    recentAssignments: ClientTrainerAssignment[];\n  }> {\n    try {\n      const response = await this.apiService.get<any>(\n        '/api/client-trainer-assignments/statistics'\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching assignment statistics:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Get assignment history for a client\n   * @param clientId - Client ID\n   * @returns Promise<ClientTrainerAssignment[]>\n   */\n  async getClientAssignmentHistory(clientId: string): Promise<ClientTrainerAssignment[]> {\n    try {\n      const response = await this.apiService.get<ClientTrainerAssignment[]>(\n        `/api/client-trainer-assignments/client/${clientId}/history`\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching client assignment history:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Get assignment history for a trainer\n   * @param trainerId - Trainer ID\n   * @returns Promise<ClientTrainerAssignment[]>\n   */\n  async getTrainerAssignmentHistory(trainerId: string): Promise<ClientTrainerAssignment[]> {\n    try {\n      const response = await this.apiService.get<ClientTrainerAssignment[]>(\n        `/api/client-trainer-assignments/trainer/${trainerId}/history`\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching trainer assignment history:', error);\n      throw error;\n    }\n  }\n  \n  // ==================== VALIDATION AND UTILITIES ====================\n  \n  /**\n   * Validate assignment data\n   * @param assignmentData - Assignment data to validate\n   * @returns ValidationResult\n   */\n  validateAssignmentData(assignmentData: AssignmentRequest): {\n    isValid: boolean;\n    errors: string[];\n  } {\n    const errors: string[] = [];\n    \n    if (!assignmentData.clientId) {\n      errors.push('Client ID is required');\n    }\n    \n    if (!assignmentData.trainerId) {\n      errors.push('Trainer ID is required');\n    }\n    \n    if (assignmentData.clientId === assignmentData.trainerId) {\n      errors.push('Client and trainer cannot be the same person');\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n  \n  /**\n   * Check if a client is assigned to a trainer\n   * @param clientId - Client ID\n   * @param trainerId - Trainer ID\n   * @returns Promise<boolean>\n   */\n  async isClientAssignedToTrainer(clientId: string, trainerId: string): Promise<boolean> {\n    try {\n      const assignments = await this.getClientAssignments(clientId);\n      return assignments.some(a => a.trainerId === trainerId && a.isActive);\n    } catch (error) {\n      console.error('Error checking client assignment:', error);\n      return false;\n    }\n  }\n  \n  /**\n   * Get assignment conflicts (multiple active assignments)\n   * @returns Promise<ClientTrainerAssignment[]>\n   */\n  async getAssignmentConflicts(): Promise<ClientTrainerAssignment[]> {\n    try {\n      const response = await this.apiService.get<ClientTrainerAssignment[]>(\n        '/api/client-trainer-assignments/conflicts'\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching assignment conflicts:', error);\n      throw error;\n    }\n  }\n  \n  // ==================== REAL-TIME UPDATES ====================\n  \n  /**\n   * Subscribe to assignment updates\n   * @param callback - Callback function for updates\n   * @returns Unsubscribe function\n   */\n  subscribeToAssignmentUpdates(callback: (assignment: ClientTrainerAssignment) => void): () => void {\n    // TODO: Implement WebSocket subscription\n    console.log('WebSocket subscription for assignments not yet implemented');\n    return () => {};\n  }\n  \n  /**\n   * Notify assignment update\n   * @param assignmentId - Assignment ID\n   * @param updateType - Type of update\n   */\n  private notifyAssignmentUpdate(\n    assignmentId: string, \n    updateType: 'created' | 'updated' | 'deleted'\n  ): void {\n    // TODO: Implement WebSocket notification\n    console.log(`Assignment ${updateType}: ${assignmentId}`);\n  }\n}\n\n// Export singleton instance\nexport const clientTrainerAssignmentService = new ClientTrainerAssignmentService();\nexport default clientTrainerAssignmentService;\n"