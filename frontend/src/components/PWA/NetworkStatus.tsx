import React, { useState, useEffect } from 'react';\nimport styled, { keyframes } from 'styled-components';\n\n// Animations\nconst slideDown = keyframes`\n  from {\n    transform: translateY(-100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n`;\n\nconst slideUp = keyframes`\n  from {\n    transform: translateY(0);\n    opacity: 1;\n  }\n  to {\n    transform: translateY(-100%);\n    opacity: 0;\n  }\n`;\n\nconst pulse = keyframes`\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.6;\n  }\n`;\n\n// Styled Components\nconst NetworkStatusContainer = styled.div<{ \n  show: boolean; \n  isOnline: boolean;\n  position: 'top' | 'bottom';\n}>`\n  position: fixed;\n  ${props => props.position === 'top' ? 'top: 0' : 'bottom: 0'};\n  left: 0;\n  right: 0;\n  z-index: 9999;\n  background: ${props => \n    props.isOnline \n      ? 'linear-gradient(90deg, #10b981, #059669)' \n      : 'linear-gradient(90deg, #ef4444, #dc2626)'\n  };\n  color: white;\n  padding: 8px 16px;\n  text-align: center;\n  font-size: 14px;\n  font-weight: 500;\n  box-shadow: ${props => \n    props.position === 'top' \n      ? '0 2px 8px rgba(0, 0, 0, 0.15)' \n      : '0 -2px 8px rgba(0, 0, 0, 0.15)'\n  };\n  animation: ${props => props.show ? slideDown : slideUp} 0.3s ease-out;\n  display: ${props => props.show ? 'block' : 'none'};\n  \n  @media (max-width: 768px) {\n    font-size: 13px;\n    padding: 10px 16px;\n  }\n`;\n\nconst StatusContent = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst StatusIcon = styled.span<{ isOnline: boolean; isConnecting?: boolean }>`\n  display: inline-block;\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  background: ${props => props.isOnline ? '#ffffff' : '#ffffff'};\n  animation: ${props => props.isConnecting ? pulse : 'none'} 1.5s infinite;\n  flex-shrink: 0;\n`;\n\nconst StatusText = styled.span`\n  line-height: 1.2;\n`;\n\nconst RetryButton = styled.button`\n  background: rgba(255, 255, 255, 0.2);\n  color: white;\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  border-radius: 4px;\n  padding: 4px 8px;\n  font-size: 12px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  margin-left: 8px;\n  \n  &:hover {\n    background: rgba(255, 255, 255, 0.3);\n  }\n  \n  &:active {\n    transform: scale(0.95);\n  }\n  \n  @media (max-width: 768px) {\n    padding: 6px 10px;\n    touch-action: manipulation;\n  }\n`;\n\nconst CloseButton = styled.button`\n  background: none;\n  border: none;\n  color: white;\n  font-size: 16px;\n  cursor: pointer;\n  padding: 0;\n  margin-left: auto;\n  opacity: 0.8;\n  transition: opacity 0.2s ease;\n  \n  &:hover {\n    opacity: 1;\n  }\n  \n  @media (max-width: 768px) {\n    font-size: 14px;\n    padding: 4px;\n    touch-action: manipulation;\n  }\n`;\n\ninterface NetworkStatusProps {\n  position?: 'top' | 'bottom';\n  autoHide?: boolean;\n  autoHideDelay?: number;\n}\n\nconst NetworkStatus: React.FC<NetworkStatusProps> = ({ \n  position = 'top',\n  autoHide = true,\n  autoHideDelay = 3000\n}) => {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [showStatus, setShowStatus] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [connectionQuality, setConnectionQuality] = useState<'fast' | 'slow' | 'unknown'>('unknown');\n  const [lastOfflineTime, setLastOfflineTime] = useState<Date | null>(null);\n\n  useEffect(() => {\n    let hideTimeout: NodeJS.Timeout;\n    let connectionCheckTimeout: NodeJS.Timeout;\n\n    const handleOnline = () => {\n      console.log('Network: Connection restored');\n      setIsConnecting(true);\n      \n      // Test connection quality\n      testConnectionQuality();\n      \n      // Show reconnected status\n      setIsOnline(true);\n      setShowStatus(true);\n      \n      // Hide connecting indicator after a moment\n      setTimeout(() => {\n        setIsConnecting(false);\n      }, 1000);\n      \n      // Auto-hide after success message\n      if (autoHide) {\n        hideTimeout = setTimeout(() => {\n          setShowStatus(false);\n        }, autoHideDelay);\n      }\n    };\n\n    const handleOffline = () => {\n      console.log('Network: Connection lost');\n      setIsOnline(false);\n      setShowStatus(true);\n      setIsConnecting(false);\n      setConnectionQuality('unknown');\n      setLastOfflineTime(new Date());\n      \n      // Clear any hide timeout when going offline\n      if (hideTimeout) {\n        clearTimeout(hideTimeout);\n      }\n    };\n\n    const testConnectionQuality = async () => {\n      try {\n        const startTime = performance.now();\n        \n        // Try to fetch a small resource from your backend\n        const response = await fetch('/api/health', {\n          method: 'GET',\n          cache: 'no-cache'\n        });\n        \n        const endTime = performance.now();\n        const responseTime = endTime - startTime;\n        \n        if (response.ok) {\n          setConnectionQuality(responseTime < 1000 ? 'fast' : 'slow');\n        } else {\n          setConnectionQuality('slow');\n        }\n      } catch (error) {\n        console.log('Network: Connection quality test failed:', error);\n        setConnectionQuality('slow');\n      }\n    };\n\n    // Initial connection quality test if online\n    if (navigator.onLine) {\n      testConnectionQuality();\n    }\n\n    // Add event listeners\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // Periodic connection check\n    const startPeriodicCheck = () => {\n      connectionCheckTimeout = setTimeout(async () => {\n        if (navigator.onLine) {\n          try {\n            await fetch('/api/health', {\n              method: 'HEAD',\n              cache: 'no-cache',\n              signal: AbortSignal.timeout(5000)\n            });\n          } catch (error) {\n            // If fetch fails but navigator.onLine is true, show degraded connection\n            if (isOnline) {\n              setConnectionQuality('slow');\n            }\n          }\n        }\n        startPeriodicCheck();\n      }, 30000); // Check every 30 seconds\n    };\n\n    startPeriodicCheck();\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n      if (hideTimeout) clearTimeout(hideTimeout);\n      if (connectionCheckTimeout) clearTimeout(connectionCheckTimeout);\n    };\n  }, [autoHide, autoHideDelay, isOnline]);\n\n  const handleRetry = async () => {\n    setIsConnecting(true);\n    \n    try {\n      // Force a page refresh to reconnect\n      const response = await fetch('/api/health', {\n        cache: 'no-cache'\n      });\n      \n      if (response.ok) {\n        setIsOnline(true);\n        setConnectionQuality('fast');\n        if (autoHide) {\n          setTimeout(() => setShowStatus(false), 2000);\n        }\n      } else {\n        throw new Error('Health check failed');\n      }\n    } catch (error) {\n      console.log('Network: Retry failed:', error);\n      setConnectionQuality('slow');\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  const handleClose = () => {\n    setShowStatus(false);\n  };\n\n  const getStatusMessage = () => {\n    if (!isOnline) {\n      return 'You\\'re offline. Some features may not work.';\n    }\n    \n    if (isConnecting) {\n      return 'Reconnecting...';\n    }\n    \n    if (connectionQuality === 'slow') {\n      return 'Connection restored, but seems slow.';\n    }\n    \n    if (lastOfflineTime) {\n      return 'You\\'re back online!';\n    }\n    \n    return 'Connection restored';\n  };\n\n  // Don't show if online and never been offline\n  if (isOnline && !lastOfflineTime && !showStatus) {\n    return null;\n  }\n\n  return (\n    <NetworkStatusContainer \n      show={showStatus || !isOnline}\n      isOnline={isOnline}\n      position={position}\n    >\n      <StatusContent>\n        <StatusIcon \n          isOnline={isOnline} \n          isConnecting={isConnecting}\n        />\n        <StatusText>{getStatusMessage()}</StatusText>\n        \n        {!isOnline && (\n          <RetryButton onClick={handleRetry} disabled={isConnecting}>\n            {isConnecting ? 'Trying...' : 'Retry'}\n          </RetryButton>\n        )}\n        \n        {(isOnline || position === 'bottom') && (\n          <CloseButton onClick={handleClose} aria-label=\"Close network status\">\n            Ã—\n          </CloseButton>\n        )}\n      </StatusContent>\n    </NetworkStatusContainer>\n  );\n};\n\nexport default NetworkStatus;