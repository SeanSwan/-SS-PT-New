import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\n// Types\ninterface BeforeInstallPromptEvent extends Event {\n  readonly platforms: string[];\n  readonly userChoice: Promise<{\n    outcome: 'accepted' | 'dismissed';\n    platform: string;\n  }>;\n  prompt(): Promise<void>;\n}\n\n// Styled Components\nconst InstallPromptContainer = styled.div<{ show: boolean }>`\n  position: fixed;\n  bottom: ${props => props.show ? '20px' : '-100px'};\n  left: 50%;\n  transform: translateX(-50%);\n  z-index: 1000;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  padding: 16px 20px;\n  border-radius: 12px;\n  box-shadow: 0 8px 32px rgba(102, 126, 234, 0.3);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  max-width: 90vw;\n  width: 350px;\n  \n  @media (max-width: 768px) {\n    width: calc(100vw - 40px);\n    padding: 14px 16px;\n    border-radius: 8px;\n  }\n`;\n\nconst InstallHeader = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin-bottom: 8px;\n`;\n\nconst AppIcon = styled.div`\n  width: 40px;\n  height: 40px;\n  background: url('/Logo.png') center/cover;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\n  \n  @media (max-width: 768px) {\n    width: 36px;\n    height: 36px;\n  }\n`;\n\nconst AppInfo = styled.div`\n  flex: 1;\n`;\n\nconst AppName = styled.h3`\n  margin: 0;\n  font-size: 16px;\n  font-weight: 600;\n  line-height: 1.2;\n  \n  @media (max-width: 768px) {\n    font-size: 15px;\n  }\n`;\n\nconst AppDescription = styled.p`\n  margin: 0;\n  font-size: 13px;\n  opacity: 0.9;\n  line-height: 1.3;\n  \n  @media (max-width: 768px) {\n    font-size: 12px;\n  }\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  gap: 8px;\n  margin-top: 12px;\n  \n  @media (max-width: 768px) {\n    margin-top: 10px;\n  }\n`;\n\nconst InstallButton = styled.button`\n  background: rgba(255, 255, 255, 0.2);\n  color: white;\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  border-radius: 6px;\n  padding: 8px 16px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  backdrop-filter: blur(10px);\n  flex: 1;\n  \n  &:hover {\n    background: rgba(255, 255, 255, 0.3);\n    transform: translateY(-1px);\n  }\n  \n  &:active {\n    transform: translateY(0);\n  }\n  \n  @media (max-width: 768px) {\n    padding: 10px 12px;\n    font-size: 13px;\n    touch-action: manipulation;\n  }\n`;\n\nconst DismissButton = styled(InstallButton)`\n  background: rgba(255, 255, 255, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  flex: 0.5;\n  \n  &:hover {\n    background: rgba(255, 255, 255, 0.15);\n  }\n`;\n\nconst CloseButton = styled.button`\n  background: none;\n  border: none;\n  color: white;\n  font-size: 18px;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  transition: background 0.2s ease;\n  \n  &:hover {\n    background: rgba(255, 255, 255, 0.2);\n  }\n  \n  @media (max-width: 768px) {\n    font-size: 16px;\n    padding: 6px;\n    touch-action: manipulation;\n  }\n`;\n\nconst PWAInstallPrompt: React.FC = () => {\n  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);\n  const [showPrompt, setShowPrompt] = useState(false);\n  const [isInstalled, setIsInstalled] = useState(false);\n  const [isStandalone, setIsStandalone] = useState(false);\n\n  useEffect(() => {\n    // Check if app is already installed\n    const checkInstallStatus = () => {\n      const isStandaloneMode = window.matchMedia('(display-mode: standalone)').matches;\n      const isIOSStandalone = (window.navigator as any).standalone === true;\n      const isInstalled = isStandaloneMode || isIOSStandalone;\n      \n      setIsStandalone(isInstalled);\n      setIsInstalled(isInstalled);\n    };\n\n    checkInstallStatus();\n\n    // Listen for beforeinstallprompt event\n    const handleBeforeInstallPrompt = (e: Event) => {\n      console.log('PWA: beforeinstallprompt event triggered');\n      e.preventDefault();\n      setDeferredPrompt(e as BeforeInstallPromptEvent);\n      \n      // Show prompt after a delay to not interrupt user flow\n      setTimeout(() => {\n        if (!isInstalled && !localStorage.getItem('pwa-install-dismissed')) {\n          setShowPrompt(true);\n        }\n      }, 3000); // 3 second delay\n    };\n\n    // Listen for app install\n    const handleAppInstalled = () => {\n      console.log('PWA: App was installed');\n      setShowPrompt(false);\n      setIsInstalled(true);\n      setDeferredPrompt(null);\n      localStorage.setItem('pwa-installed', 'true');\n    };\n\n    // Add event listeners\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    window.addEventListener('appinstalled', handleAppInstalled);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      window.removeEventListener('appinstalled', handleAppInstalled);\n    };\n  }, [isInstalled]);\n\n  const handleInstallClick = async () => {\n    if (!deferredPrompt) {\n      // Fallback for iOS or manual install\n      showManualInstallInstructions();\n      return;\n    }\n\n    try {\n      // Show the install prompt\n      await deferredPrompt.prompt();\n      \n      // Wait for the user to respond to the prompt\n      const { outcome } = await deferredPrompt.userChoice;\n      \n      console.log(`PWA: User response to install prompt: ${outcome}`);\n      \n      if (outcome === 'accepted') {\n        console.log('PWA: User accepted the install prompt');\n      } else {\n        console.log('PWA: User dismissed the install prompt');\n      }\n      \n      // Reset the deferred prompt\n      setDeferredPrompt(null);\n      setShowPrompt(false);\n    } catch (error) {\n      console.error('PWA: Error during installation:', error);\n      showManualInstallInstructions();\n    }\n  };\n\n  const showManualInstallInstructions = () => {\n    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);\n    const isAndroid = /Android/.test(navigator.userAgent);\n    \n    let instructions = '';\n    \n    if (isIOS) {\n      instructions = 'To install Swan Studios:\\n\\n1. Tap the Share button (square with arrow)\\n2. Scroll down and tap \"Add to Home Screen\"\\n3. Tap \"Add\" to confirm';\n    } else if (isAndroid) {\n      instructions = 'To install Swan Studios:\\n\\n1. Tap the three dots menu (⋮)\\n2. Select \"Add to Home screen\" or \"Install app\"\\n3. Tap \"Add\" or \"Install\" to confirm';\n    } else {\n      instructions = 'To install Swan Studios:\\n\\n1. Look for the install icon in your browser\\'s address bar\\n2. Click it to install the app\\n3. Or use the browser menu to \"Install Swan Studios\"';\n    }\n    \n    alert(instructions);\n    setShowPrompt(false);\n  };\n\n  const handleDismiss = () => {\n    setShowPrompt(false);\n    localStorage.setItem('pwa-install-dismissed', 'true');\n    \n    // Allow showing again after 7 days\n    setTimeout(() => {\n      localStorage.removeItem('pwa-install-dismissed');\n    }, 7 * 24 * 60 * 60 * 1000);\n  };\n\n  const handleClose = () => {\n    setShowPrompt(false);\n  };\n\n  // Don't show if already installed or in standalone mode\n  if (isInstalled || isStandalone) {\n    return null;\n  }\n\n  return (\n    <InstallPromptContainer show={showPrompt}>\n      <InstallHeader>\n        <AppIcon />\n        <AppInfo>\n          <AppName>Swan Studios</AppName>\n          <AppDescription>Install for faster access & offline features</AppDescription>\n        </AppInfo>\n        <CloseButton onClick={handleClose} aria-label=\"Close install prompt\">\n          ×\n        </CloseButton>\n      </InstallHeader>\n      \n      <ButtonContainer>\n        <InstallButton onClick={handleInstallClick}>\n          Install App\n        </InstallButton>\n        <DismissButton onClick={handleDismiss}>\n          Not Now\n        </DismissButton>\n      </ButtonContainer>\n    </InstallPromptContainer>\n  );\n};\n\nexport default PWAInstallPrompt;