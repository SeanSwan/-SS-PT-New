/**
 * Client Assessment Modal\n * Comprehensive fitness and health assessment tool\n */\n\nimport React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Typography,\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  TextField,\n  Button,\n  IconButton,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent,\n  Rating,\n  Slider,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormControlLabel,\n  Checkbox,\n  FormGroup,\n  LinearProgress,\n  Alert,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  Switch\n} from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport {\n  Close,\n  NavigateNext,\n  NavigateBefore,\n  FitnessCenter,\n  DirectionsRun,\n  SelfImprovement,\n  Balance,\n  Psychology,\n  MonitorWeight,\n  Height,\n  Favorite,\n  Accessibility,\n  SportsTennis,\n  Pool,\n  DirectionsBike,\n  SportsGymnastics,\n  ExpandMore,\n  Save,\n  Assessment,\n  Timer,\n  Speed,\n  Straighten\n} from '@mui/icons-material';\n\nimport { EnhancedAdminClient } from '../EnhancedAdminClientManagementView';\n\ninterface ClientAssessmentModalProps {\n  open: boolean;\n  onClose: () => void;\n  client: EnhancedAdminClient;\n  onSubmit: (assessment: AssessmentData) => void;\n}\n\ninterface AssessmentData {\n  // Physical measurements\n  height: number;\n  weight: number;\n  bodyFat?: number;\n  muscleMass?: number;\n  bmi: number;\n  \n  // Fitness assessments\n  strengthAssessment: {\n    benchPress?: number;\n    squat?: number;\n    deadlift?: number;\n    pullups?: number;\n    pushups?: number;\n    plankHold?: number; // seconds\n  };\n  \n  enduranceAssessment: {\n    vo2Max?: number;\n    heartRateResting?: number;\n    heartRateMax?: number;\n    mileTime?: number; // minutes\n    stepTest?: number;\n  };\n  \n  flexibilityAssessment: {\n    sitAndReach?: number; // cm\n    shoulderFlexibility?: number;\n    hipFlexibility?: number;\n    spinalRotation?: number;\n  };\n  \n  balanceAssessment: {\n    singleLegStand?: number; // seconds\n    eyesClosedBalance?: number; // seconds\n    dynamicBalance?: number; // score 1-10\n  };\n  \n  // Health screenings\n  healthMetrics: {\n    bloodPressure?: string;\n    heartRate?: number;\n    bloodSugar?: number;\n    cholesterol?: number;\n  };\n  \n  // Subjective assessments\n  wellnessQuestions: {\n    energyLevel: number; // 1-10\n    stressLevel: number; // 1-10\n    sleepQuality: number; // 1-10\n    painLevel: number; // 1-10\n    motivationLevel: number; // 1-10\n  };\n  \n  // Goal setting\n  goals: {\n    primaryGoal: string;\n    secondaryGoals: string[];\n    timeline: string;\n    obstacles: string[];\n  };\n  \n  // Injury history and limitations\n  limitations: {\n    currentInjuries: string[];\n    pastInjuries: string[];\n    medicalConditions: string[];\n    medications: string[];\n    physicalLimitations: string[];\n  };\n  \n  // Overall scores\n  overallScore: number;\n  strengthScore: number;\n  enduranceScore: number;\n  flexibilityScore: number;\n  balanceScore: number;\n  \n  // Assessment metadata\n  assessorName: string;\n  assessmentDate: string;\n  notes: string;\n  recommendedProgram: string;\n  followUpDate: string;\n}\n\nconst StyledDialog = styled(Dialog)(({ theme }) => ({\n  '& .MuiDialog-paper': {\n    backgroundColor: '#1d1f2b',\n    color: '#e0e0e0',\n    borderRadius: 12,\n    maxWidth: '90vw',\n    width: 900,\n    height: '90vh',\n  },\n}));\n\nconst AssessmentCard = styled(Card)(({ theme }) => ({\n  backgroundColor: 'rgba(255, 255, 255, 0.02)',\n  backdropFilter: 'blur(10px)',\n  borderRadius: 12,\n  border: '1px solid rgba(255, 255, 255, 0.1)',\n  marginBottom: theme.spacing(2),\n}));\n\nconst StyledTextField = styled(TextField)(({ theme }) => ({\n  '& .MuiInputBase-root': {\n    backgroundColor: 'rgba(255, 255, 255, 0.05)',\n    color: '#e0e0e0',\n    borderRadius: 8,\n  },\n  '& .MuiInputLabel-root': {\n    color: '#a0a0a0',\n  },\n  '& .MuiOutlinedInput-notchedOutline': {\n    borderColor: 'rgba(255, 255, 255, 0.2)',\n  },\n  '& .MuiInputBase-root:hover .MuiOutlinedInput-notchedOutline': {\n    borderColor: 'rgba(0, 255, 255, 0.5)',\n  },\n  '& .MuiInputBase-root.Mui-focused .MuiOutlinedInput-notchedOutline': {\n    borderColor: '#00ffff',\n  },\n}));\n\nconst CustomButton = styled(Button)(({ theme }) => ({\n  borderRadius: 8,\n  textTransform: 'none',\n  fontWeight: 600,\n  '&.primary': {\n    background: 'linear-gradient(135deg, #00ffff, #00c8ff)',\n    color: '#0a0a1a',\n    '&:hover': {\n      background: 'linear-gradient(135deg, #00e6ff, #00b3ff)',\n    },\n  },\n  '&.secondary': {\n    backgroundColor: 'rgba(255, 255, 255, 0.05)',\n    color: '#e0e0e0',\n    border: '1px solid rgba(255, 255, 255, 0.2)',\n    '&:hover': {\n      backgroundColor: 'rgba(255, 255, 255, 0.1)',\n    },\n  },\n}));\n\nconst assessmentSteps = [\n  { label: 'Physical Measurements', icon: <MonitorWeight /> },\n  { label: 'Strength Assessment', icon: <FitnessCenter /> },\n  { label: 'Endurance Testing', icon: <DirectionsRun /> },\n  { label: 'Flexibility & Mobility', icon: <SelfImprovement /> },\n  { label: 'Balance & Stability', icon: <Balance /> },\n  { label: 'Health Metrics', icon: <Favorite /> },\n  { label: 'Wellness Survey', icon: <Psychology /> },\n  { label: 'Goals & Limitations', icon: <Assessment /> },\n  { label: 'Summary & Recommendations', icon: <Save /> }\n];\n\nconst ClientAssessmentModal: React.FC<ClientAssessmentModalProps> = ({ open, onClose, client, onSubmit }) => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [assessmentData, setAssessmentData] = useState<Partial<AssessmentData>>({\n    strengthAssessment: {},\n    enduranceAssessment: {},\n    flexibilityAssessment: {},\n    balanceAssessment: {},\n    healthMetrics: {},\n    wellnessQuestions: {\n      energyLevel: 5,\n      stressLevel: 5,\n      sleepQuality: 5,\n      painLevel: 0,\n      motivationLevel: 5\n    },\n    goals: {\n      primaryGoal: '',\n      secondaryGoals: [],\n      timeline: '',\n      obstacles: []\n    },\n    limitations: {\n      currentInjuries: [],\n      pastInjuries: [],\n      medicalConditions: [],\n      medications: [],\n      physicalLimitations: []\n    },\n    assessorName: '',\n    assessmentDate: new Date().toISOString().split('T')[0],\n    notes: '',\n    recommendedProgram: '',\n    followUpDate: ''\n  });\n\n  const handleNext = () => {\n    setCurrentStep((prevStep) => prevStep + 1);\n  };\n\n  const handleBack = () => {\n    setCurrentStep((prevStep) => prevStep - 1);\n  };\n\n  const handleInputChange = (field: keyof AssessmentData, value: any) => {\n    setAssessmentData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleNestedInputChange = (parent: keyof AssessmentData, field: string, value: any) => {\n    setAssessmentData(prev => ({\n      ...prev,\n      [parent]: {\n        ...prev[parent] as any,\n        [field]: value\n      }\n    }));\n  };\n\n  const calculateBMI = (height: number, weight: number) => {\n    if (height > 0 && weight > 0) {\n      const heightInM = height / 100;\n      return weight / (heightInM * heightInM);\n    }\n    return 0;\n  };\n\n  const calculateOverallScore = () => {\n    // Simple scoring algorithm - can be enhanced with proper fitness scoring\n    const scores = [\n      assessmentData.strengthScore || 0,\n      assessmentData.enduranceScore || 0,\n      assessmentData.flexibilityScore || 0,\n      assessmentData.balanceScore || 0\n    ];\n    return scores.reduce((sum, score) => sum + score, 0) / scores.filter(s => s > 0).length || 0;\n  };\n\n  const renderPhysicalMeasurements = () => (\n    <AssessmentCard>\n      <CardContent>\n        <Typography variant=\"h6\" sx={{ color: '#00ffff', mb: 2 }}>\n          Physical Measurements\n        </Typography>\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Height (cm)\"\n              type=\"number\"\n              value={assessmentData.height || ''}\n              onChange={(e) => {\n                const height = parseFloat(e.target.value);\n                handleInputChange('height', height);\n                if (assessmentData.weight) {\n                  handleInputChange('bmi', calculateBMI(height, assessmentData.weight));\n                }\n              }}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Weight (kg)\"\n              type=\"number\"\n              value={assessmentData.weight || ''}\n              onChange={(e) => {\n                const weight = parseFloat(e.target.value);\n                handleInputChange('weight', weight);\n                if (assessmentData.height) {\n                  handleInputChange('bmi', calculateBMI(assessmentData.height, weight));\n                }\n              }}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Body Fat % (optional)\"\n              type=\"number\"\n              value={assessmentData.bodyFat || ''}\n              onChange={(e) => handleInputChange('bodyFat', parseFloat(e.target.value))}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Muscle Mass % (optional)\"\n              type=\"number\"\n              value={assessmentData.muscleMass || ''}\n              onChange={(e) => handleInputChange('muscleMass', parseFloat(e.target.value))}\n            />\n          </Grid>\n          {assessmentData.height && assessmentData.weight && (\n            <Grid item xs={12}>\n              <Alert severity=\"info\" sx={{ mt: 2 }}>\n                <strong>BMI: {assessmentData.bmi?.toFixed(1) || 0}</strong>\n                <Typography variant=\"body2\">\n                  {assessmentData.bmi && assessmentData.bmi < 18.5 ? 'Underweight' :\n                   assessmentData.bmi && assessmentData.bmi < 25 ? 'Normal weight' :\n                   assessmentData.bmi && assessmentData.bmi < 30 ? 'Overweight' : 'Obese'}\n                </Typography>\n              </Alert>\n            </Grid>\n          )}\n        </Grid>\n      </CardContent>\n    </AssessmentCard>\n  );\n\n  const renderStrengthAssessment = () => (\n    <AssessmentCard>\n      <CardContent>\n        <Typography variant=\"h6\" sx={{ color: '#00ffff', mb: 2 }}>\n          Strength Assessment\n        </Typography>\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Bench Press 1RM (kg)\"\n              type=\"number\"\n              value={assessmentData.strengthAssessment?.benchPress || ''}\n              onChange={(e) => handleNestedInputChange('strengthAssessment', 'benchPress', parseFloat(e.target.value))}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Squat 1RM (kg)\"\n              type=\"number\"\n              value={assessmentData.strengthAssessment?.squat || ''}\n              onChange={(e) => handleNestedInputChange('strengthAssessment', 'squat', parseFloat(e.target.value))}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Deadlift 1RM (kg)\"\n              type=\"number\"\n              value={assessmentData.strengthAssessment?.deadlift || ''}\n              onChange={(e) => handleNestedInputChange('strengthAssessment', 'deadlift', parseFloat(e.target.value))}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Pull-ups (max reps)\"\n              type=\"number\"\n              value={assessmentData.strengthAssessment?.pullups || ''}\n              onChange={(e) => handleNestedInputChange('strengthAssessment', 'pullups', parseInt(e.target.value))}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Push-ups (2 min)\"\n              type=\"number\"\n              value={assessmentData.strengthAssessment?.pushups || ''}\n              onChange={(e) => handleNestedInputChange('strengthAssessment', 'pushups', parseInt(e.target.value))}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Plank Hold (seconds)\"\n              type=\"number\"\n              value={assessmentData.strengthAssessment?.plankHold || ''}\n              onChange={(e) => handleNestedInputChange('strengthAssessment', 'plankHold', parseInt(e.target.value))}\n            />\n          </Grid>\n        </Grid>\n      </CardContent>\n    </AssessmentCard>\n  );\n\n  const renderEnduranceAssessment = () => (\n    <AssessmentCard>\n      <CardContent>\n        <Typography variant=\"h6\" sx={{ color: '#00ffff', mb: 2 }}>\n          Endurance Assessment\n        </Typography>\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6}>\n            <StyledTextField\n              fullWidth\n              label=\"VO2 Max (ml/kg/min)\"\n              type=\"number\"\n              value={assessmentData.enduranceAssessment?.vo2Max || ''}\n              onChange={(e) => handleNestedInputChange('enduranceAssessment', 'vo2Max', parseFloat(e.target.value))}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Resting Heart Rate (bpm)\"\n              type=\"number\"\n              value={assessmentData.enduranceAssessment?.heartRateResting || ''}\n              onChange={(e) => handleNestedInputChange('enduranceAssessment', 'heartRateResting', parseInt(e.target.value))}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Max Heart Rate (bpm)\"\n              type=\"number\"\n              value={assessmentData.enduranceAssessment?.heartRateMax || ''}\n              onChange={(e) => handleNestedInputChange('enduranceAssessment', 'heartRateMax', parseInt(e.target.value))}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <StyledTextField\n              fullWidth\n              label=\"1-Mile Time (minutes)\"\n              type=\"number\"\n              step=\"0.5\"\n              value={assessmentData.enduranceAssessment?.mileTime || ''}\n              onChange={(e) => handleNestedInputChange('enduranceAssessment', 'mileTime', parseFloat(e.target.value))}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <StyledTextField\n              fullWidth\n              label=\"3-Minute Step Test (bpm)\"\n              type=\"number\"\n              value={assessmentData.enduranceAssessment?.stepTest || ''}\n              onChange={(e) => handleNestedInputChange('enduranceAssessment', 'stepTest', parseInt(e.target.value))}\n            />\n          </Grid>\n        </Grid>\n      </CardContent>\n    </AssessmentCard>\n  );\n\n  const renderFlexibilityAssessment = () => (\n    <AssessmentCard>\n      <CardContent>\n        <Typography variant=\"h6\" sx={{ color: '#00ffff', mb: 2 }}>\n          Flexibility & Mobility Assessment\n        </Typography>\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Sit and Reach (cm)\"\n              type=\"number\"\n              value={assessmentData.flexibilityAssessment?.sitAndReach || ''}\n              onChange={(e) => handleNestedInputChange('flexibilityAssessment', 'sitAndReach', parseFloat(e.target.value))}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Typography gutterBottom>Shoulder Flexibility</Typography>\n            <Rating\n              value={assessmentData.flexibilityAssessment?.shoulderFlexibility || 0}\n              onChange={(e, newValue) => handleNestedInputChange('flexibilityAssessment', 'shoulderFlexibility', newValue)}\n              max={10}\n              size=\"large\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Typography gutterBottom>Hip Flexibility</Typography>\n            <Rating\n              value={assessmentData.flexibilityAssessment?.hipFlexibility || 0}\n              onChange={(e, newValue) => handleNestedInputChange('flexibilityAssessment', 'hipFlexibility', newValue)}\n              max={10}\n              size=\"large\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Typography gutterBottom>Spinal Rotation</Typography>\n            <Rating\n              value={assessmentData.flexibilityAssessment?.spinalRotation || 0}\n              onChange={(e, newValue) => handleNestedInputChange('flexibilityAssessment', 'spinalRotation', newValue)}\n              max={10}\n              size=\"large\"\n            />\n          </Grid>\n        </Grid>\n      </CardContent>\n    </AssessmentCard>\n  );\n\n  const renderBalanceAssessment = () => (\n    <AssessmentCard>\n      <CardContent>\n        <Typography variant=\"h6\" sx={{ color: '#00ffff', mb: 2 }}>\n          Balance & Stability Assessment\n        </Typography>\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Single Leg Stand (seconds)\"\n              type=\"number\"\n              value={assessmentData.balanceAssessment?.singleLegStand || ''}\n              onChange={(e) => handleNestedInputChange('balanceAssessment', 'singleLegStand', parseInt(e.target.value))}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Eyes Closed Balance (seconds)\"\n              type=\"number\"\n              value={assessmentData.balanceAssessment?.eyesClosedBalance || ''}\n              onChange={(e) => handleNestedInputChange('balanceAssessment', 'eyesClosedBalance', parseInt(e.target.value))}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography gutterBottom>Dynamic Balance Score</Typography>\n            <Slider\n              value={assessmentData.balanceAssessment?.dynamicBalance || 0}\n              onChange={(e, newValue) => handleNestedInputChange('balanceAssessment', 'dynamicBalance', newValue)}\n              valueLabelDisplay=\"auto\"\n              step={1}\n              marks\n              min={0}\n              max={10}\n              sx={{\n                color: '#00ffff',\n                '& .MuiSlider-thumb': {\n                  backgroundColor: '#00ffff',\n                },\n                '& .MuiSlider-track': {\n                  backgroundColor: '#00ffff',\n                },\n                '& .MuiSlider-rail': {\n                  backgroundColor: 'rgba(255, 255, 255, 0.2)',\n                },\n              }}\n            />\n          </Grid>\n        </Grid>\n      </CardContent>\n    </AssessmentCard>\n  );\n\n  const renderHealthMetrics = () => (\n    <AssessmentCard>\n      <CardContent>\n        <Typography variant=\"h6\" sx={{ color: '#00ffff', mb: 2 }}>\n          Health Metrics\n        </Typography>\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Blood Pressure (e.g., 120/80)\"\n              value={assessmentData.healthMetrics?.bloodPressure || ''}\n              onChange={(e) => handleNestedInputChange('healthMetrics', 'bloodPressure', e.target.value)}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Resting Heart Rate (bpm)\"\n              type=\"number\"\n              value={assessmentData.healthMetrics?.heartRate || ''}\n              onChange={(e) => handleNestedInputChange('healthMetrics', 'heartRate', parseInt(e.target.value))}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Blood Sugar (mg/dL)\"\n              type=\"number\"\n              value={assessmentData.healthMetrics?.bloodSugar || ''}\n              onChange={(e) => handleNestedInputChange('healthMetrics', 'bloodSugar', parseInt(e.target.value))}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <StyledTextField\n              fullWidth\n              label=\"Cholesterol (mg/dL)\"\n              type=\"number\"\n              value={assessmentData.healthMetrics?.cholesterol || ''}\n              onChange={(e) => handleNestedInputChange('healthMetrics', 'cholesterol', parseInt(e.target.value))}\n            />\n          </Grid>\n        </Grid>\n      </CardContent>\n    </AssessmentCard>\n  );\n\n  const renderWellnessSurvey = () => (\n    <AssessmentCard>\n      <CardContent>\n        <Typography variant=\"h6\" sx={{ color: '#00ffff', mb: 2 }}>\n          Wellness Survey\n        </Typography>\n        <Grid container spacing={3}>\n          {Object.entries(assessmentData.wellnessQuestions || {}).map(([key, value]) => (\n            <Grid item xs={12} key={key}>\n              <Typography gutterBottom>\n                {key === 'energyLevel' ? 'Energy Level' :\n                 key === 'stressLevel' ? 'Stress Level' :\n                 key === 'sleepQuality' ? 'Sleep Quality' :\n                 key === 'painLevel' ? 'Pain Level' :\n                 'Motivation Level'} (1-10)\n              </Typography>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                <Typography>Low</Typography>\n                <Slider\n                  value={value}\n                  onChange={(e, newValue) => handleNestedInputChange('wellnessQuestions', key, newValue)}\n                  valueLabelDisplay=\"auto\"\n                  step={1}\n                  marks\n                  min={1}\n                  max={10}\n                  sx={{\n                    flexGrow: 1,\n                    color: '#00ffff',\n                    '& .MuiSlider-thumb': {\n                      backgroundColor: '#00ffff',\n                    },\n                    '& .MuiSlider-track': {\n                      backgroundColor: '#00ffff',\n                    },\n                    '& .MuiSlider-rail': {\n                      backgroundColor: 'rgba(255, 255, 255, 0.2)',\n                    },\n                  }}\n                />\n                <Typography>High</Typography>\n              </Box>\n            </Grid>\n          ))}\n        </Grid>\n      </CardContent>\n    </AssessmentCard>\n  );\n\n  const renderGoalsAndLimitations = () => (\n    <>\n      <AssessmentCard>\n        <CardContent>\n          <Typography variant=\"h6\" sx={{ color: '#00ffff', mb: 2 }}>\n            Goals & Objectives\n          </Typography>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <StyledTextField\n                fullWidth\n                label=\"Primary Fitness Goal\"\n                multiline\n                rows={2}\n                value={assessmentData.goals?.primaryGoal || ''}\n                onChange={(e) => handleNestedInputChange('goals', 'primaryGoal', e.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <StyledTextField\n                fullWidth\n                label=\"Timeline for Goals\"\n                value={assessmentData.goals?.timeline || ''}\n                onChange={(e) => handleNestedInputChange('goals', 'timeline', e.target.value)}\n              />\n            </Grid>\n          </Grid>\n        </CardContent>\n      </AssessmentCard>\n      \n      <AssessmentCard>\n        <CardContent>\n          <Typography variant=\"h6\" sx={{ color: '#00ffff', mb: 2 }}>\n            Limitations & Medical History\n          </Typography>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <StyledTextField\n                fullWidth\n                label=\"Current Injuries or Pain\"\n                multiline\n                rows={2}\n                placeholder=\"Describe any current injuries or areas of pain\"\n                value={assessmentData.limitations?.currentInjuries?.join(', ') || ''}\n                onChange={(e) => {\n                  const injuries = e.target.value.split(',').map(s => s.trim()).filter(s => s);\n                  handleNestedInputChange('limitations', 'currentInjuries', injuries);\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <StyledTextField\n                fullWidth\n                label=\"Past Injuries\"\n                multiline\n                rows={2}\n                placeholder=\"List any past injuries\"\n                value={assessmentData.limitations?.pastInjuries?.join(', ') || ''}\n                onChange={(e) => {\n                  const injuries = e.target.value.split(',').map(s => s.trim()).filter(s => s);\n                  handleNestedInputChange('limitations', 'pastInjuries', injuries);\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <StyledTextField\n                fullWidth\n                label=\"Medical Conditions\"\n                multiline\n                rows={2}\n                placeholder=\"List any medical conditions\"\n                value={assessmentData.limitations?.medicalConditions?.join(', ') || ''}\n                onChange={(e) => {\n                  const conditions = e.target.value.split(',').map(s => s.trim()).filter(s => s);\n                  handleNestedInputChange('limitations', 'medicalConditions', conditions);\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <StyledTextField\n                fullWidth\n                label=\"Current Medications\"\n                multiline\n                rows={2}\n                placeholder=\"List any medications\"\n                value={assessmentData.limitations?.medications?.join(', ') || ''}\n                onChange={(e) => {\n                  const medications = e.target.value.split(',').map(s => s.trim()).filter(s => s);\n                  handleNestedInputChange('limitations', 'medications', medications);\n                }}\n              />\n            </Grid>\n          </Grid>\n        </CardContent>\n      </AssessmentCard>\n    </>\n  );\n\n  const renderSummary = () => {\n    const overallScore = calculateOverallScore();\n    \n    return (\n      <AssessmentCard>\n        <CardContent>\n          <Typography variant=\"h6\" sx={{ color: '#00ffff', mb: 2 }}>\n            Assessment Summary\n          </Typography>\n          \n          <Grid container spacing={2}>\n            <Grid item xs={12} md={6}>\n              <Typography variant=\"h5\" gutterBottom>\n                Overall Fitness Score: {overallScore.toFixed(1)}/10\n              </Typography>\n              \n              <Box sx={{ mt: 2 }}>\n                <Typography variant=\"body2\" gutterBottom>Assessment Score Breakdown:</Typography>\n                <List dense>\n                  <ListItem>\n                    <ListItemText \n                      primary=\"Strength\" \n                      secondary={`${assessmentData.strengthScore || 0}/10`}\n                    />\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText \n                      primary=\"Endurance\" \n                      secondary={`${assessmentData.enduranceScore || 0}/10`}\n                    />\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText \n                      primary=\"Flexibility\" \n                      secondary={`${assessmentData.flexibilityScore || 0}/10`}\n                    />\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText \n                      primary=\"Balance\" \n                      secondary={`${assessmentData.balanceScore || 0}/10`}\n                    />\n                  </ListItem>\n                </List>\n              </Box>\n            </Grid>\n            \n            <Grid item xs={12} md={6}>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <StyledTextField\n                    fullWidth\n                    label=\"Recommended Program\"\n                    value={assessmentData.recommendedProgram || ''}\n                    onChange={(e) => handleInputChange('recommendedProgram', e.target.value)}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <StyledTextField\n                    fullWidth\n                    label=\"Follow-up Date\"\n                    type=\"date\"\n                    value={assessmentData.followUpDate || ''}\n                    onChange={(e) => handleInputChange('followUpDate', e.target.value)}\n                    InputLabelProps={{ shrink: true }}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <StyledTextField\n                    fullWidth\n                    label=\"Assessor Name\"\n                    value={assessmentData.assessorName || ''}\n                    onChange={(e) => handleInputChange('assessorName', e.target.value)}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n            \n            <Grid item xs={12}>\n              <StyledTextField\n                fullWidth\n                label=\"Additional Notes\"\n                multiline\n                rows={4}\n                value={assessmentData.notes || ''}\n                onChange={(e) => handleInputChange('notes', e.target.value)}\n              />\n            </Grid>\n          </Grid>\n        </CardContent>\n      </AssessmentCard>\n    );\n  };\n\n  const handleSubmit = () => {\n    // Calculate final scores (simplified scoring system)\n    const finalAssessment: AssessmentData = {\n      ...assessmentData,\n      overallScore: calculateOverallScore(),\n      strengthScore: 7, // Placeholder - would calculate based on actual tests\n      enduranceScore: 6, // Placeholder\n      flexibilityScore: 5, // Placeholder\n      balanceScore: 8, // Placeholder\n    } as AssessmentData;\n    \n    onSubmit(finalAssessment);\n  };\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 0: return renderPhysicalMeasurements();\n      case 1: return renderStrengthAssessment();\n      case 2: return renderEnduranceAssessment();\n      case 3: return renderFlexibilityAssessment();\n      case 4: return renderBalanceAssessment();\n      case 5: return renderHealthMetrics();\n      case 6: return renderWellnessSurvey();\n      case 7: return renderGoalsAndLimitations();\n      case 8: return renderSummary();\n      default: return null;\n    }\n  };\n\n  return (\n    <StyledDialog open={open} onClose={onClose} maxWidth={false}>\n      <DialogTitle sx={{ \n        display: 'flex', \n        justifyContent: 'space-between', \n        alignItems: 'center',\n        bgcolor: '#252742',\n        borderBottom: '1px solid rgba(0, 255, 255, 0.2)'\n      }}>\n        <Typography variant=\"h6\" sx={{ color: '#e0e0e0', fontWeight: 600 }}>\n          Fitness Assessment - {client.firstName} {client.lastName}\n        </Typography>\n        <IconButton onClick={onClose} sx={{ color: '#e0e0e0' }}>\n          <Close />\n        </IconButton>\n      </DialogTitle>\n\n      <Box sx={{ display: 'flex', height: 'calc(90vh - 120px)' }}>\n        {/* Stepper Sidebar */}\n        <Box sx={{ width: 300, bgcolor: '#1a1d29', borderRight: '1px solid rgba(255, 255, 255, 0.1)' }}>\n          <Stepper activeStep={currentStep} orientation=\"vertical\" sx={{ p: 2 }}>\n            {assessmentSteps.map((step, index) => (\n              <Step key={step.label}>\n                <StepLabel \n                  icon={step.icon}\n                  sx={{\n                    '& .MuiStepLabel-label': {\n                      color: index === currentStep ? '#00ffff' : '#999',\n                      fontSize: '0.9rem',\n                      fontWeight: index === currentStep ? 600 : 400\n                    },\n                    '& .MuiStepIcon-root': {\n                      color: index === currentStep ? '#00ffff' : '#666',\n                    }\n                  }}\n                >\n                  {step.label}\n                </StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n        </Box>\n\n        {/* Content Area */}\n        <Box sx={{ flex: 1, overflow: 'auto' }}>\n          <Box sx={{ p: 3 }}>\n            {renderStepContent()}\n          </Box>\n        </Box>\n      </Box>\n\n      <DialogActions sx={{ p: 3, bgcolor: '#1a1d29', borderTop: '1px solid rgba(255, 255, 255, 0.1)' }}>\n        <CustomButton\n          className=\"secondary\"\n          onClick={handleBack}\n          disabled={currentStep === 0}\n          startIcon={<NavigateBefore />}\n        >\n          Back\n        </CustomButton>\n        \n        <Box sx={{ flex: 1 }} />\n        \n        <LinearProgress \n          variant=\"determinate\" \n          value={(currentStep / (assessmentSteps.length - 1)) * 100}\n          sx={{ \n            flex: 1, \n            mx: 2,\n            height: 8,\n            borderRadius: 4,\n            bgcolor: 'rgba(255, 255, 255, 0.1)',\n            '& .MuiLinearProgress-bar': {\n              bgcolor: '#00ffff',\n              borderRadius: 4\n            }\n          }}\n        />\n        \n        <Box sx={{ flex: 1 }} />\n        \n        {currentStep === assessmentSteps.length - 1 ? (\n          <CustomButton\n            className=\"primary\"\n            onClick={handleSubmit}\n            startIcon={<Save />}\n          >\n            Save Assessment\n          </CustomButton>\n        ) : (\n          <CustomButton\n            className=\"primary\"\n            onClick={handleNext}\n            endIcon={<NavigateNext />}\n          >\n            Next\n          </CustomButton>\n        )}\n      </DialogActions>\n    </StyledDialog>\n  );\n};\n\nexport default ClientAssessmentModal;