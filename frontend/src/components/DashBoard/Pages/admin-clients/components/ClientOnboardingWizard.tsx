/**
 * Client Onboarding Wizard - Comprehensive Data Collection
 * ======================================================
 * 
 * Multi-step client onboarding process for comprehensive data collection
 * Designed to gather all necessary information for new client registration
 * 
 * STEPS:
 * 1. Personal Information - Basic contact and demographic data
 * 2. Health & Fitness Assessment - Goals, experience, limitations
 * 3. Emergency Contacts - Safety and liability information
 * 4. Session Package Selection - Payment and package choice
 * 5. Trainer Assignment - Match client with appropriate trainer
 * 6. Final Review - Confirm all information before creation
 * 
 * FEATURES:
 * - Mobile-responsive wizard interface
 * - Form validation at each step
 * - Progress indicator
 * - Data persistence between steps
 * - Integration with payment system
 * - Automatic trainer matching suggestions
 */\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Box,\n  Typography,\n  Button,\n  Step,\n  Stepper,\n  StepLabel,\n  StepContent,\n  Paper,\n  TextField,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  RadioGroup,\n  Radio,\n  Checkbox,\n  Select,\n  MenuItem,\n  InputLabel,\n  Grid,\n  Card,\n  CardContent,\n  Avatar,\n  Chip,\n  Alert,\n  AlertTitle,\n  LinearProgress,\n  Divider,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions\n} from '@mui/material';\n\n// Icons\nimport {\n  Person,\n  FitnessCenter,\n  ContactEmergency,\n  Payment,\n  Assignment,\n  Check,\n  ArrowBack,\n  ArrowForward,\n  Close,\n  PhotoCamera,\n  Phone,\n  Email,\n  Calendar,\n  Warning,\n  Info\n} from '@mui/icons-material';\n\n// Services\nimport { adminClientService } from '../../../../services/adminClientService';\nimport { trainerService } from '../../../../services/trainerService';\nimport { packageService } from '../../../../services/packageService';\n\n// Types\ninterface PersonalInfo {\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  dateOfBirth: string;\n  gender: string;\n  photo?: File | null;\n  address: {\n    street: string;\n    city: string;\n    state: string;\n    zipCode: string;\n  };\n}\n\ninterface HealthFitnessInfo {\n  height: number;\n  weight: number;\n  fitnessGoal: string;\n  trainingExperience: string;\n  currentActivityLevel: string;\n  healthConcerns: string;\n  medications: string;\n  injuries: string;\n  preferences: {\n    workoutTypes: string[];\n    timePreferences: string[];\n    intensityLevel: string;\n  };\n}\n\ninterface EmergencyContact {\n  name: string;\n  relationship: string;\n  phone: string;\n  email: string;\n}\n\ninterface PackageSelection {\n  packageId: number;\n  packageName: string;\n  sessionCount: number;\n  price: number;\n  paymentMethod: 'card' | 'cash' | 'check';\n}\n\ninterface TrainerAssignment {\n  trainerId: number;\n  trainerName: string;\n  specialties: string[];\n  matchScore: number;\n}\n\ninterface ClientFormData {\n  personal: PersonalInfo;\n  health: HealthFitnessInfo;\n  emergency: EmergencyContact;\n  package: PackageSelection | null;\n  trainer: TrainerAssignment | null;\n}\n\ninterface ClientOnboardingWizardProps {\n  onComplete: (client: any) => void;\n  onCancel: () => void;\n}\n\n/**\n * Client Onboarding Wizard Component\n */\nconst ClientOnboardingWizard: React.FC<ClientOnboardingWizardProps> = ({\n  onComplete,\n  onCancel\n}) => {\n  // State Management\n  const [activeStep, setActiveStep] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [availableTrainers, setAvailableTrainers] = useState([]);\n  const [availablePackages, setAvailablePackages] = useState([]);\n  \n  // Form Data\n  const [formData, setFormData] = useState<ClientFormData>({\n    personal: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: '',\n      dateOfBirth: '',\n      gender: '',\n      photo: null,\n      address: {\n        street: '',\n        city: '',\n        state: '',\n        zipCode: ''\n      }\n    },\n    health: {\n      height: 0,\n      weight: 0,\n      fitnessGoal: '',\n      trainingExperience: '',\n      currentActivityLevel: '',\n      healthConcerns: '',\n      medications: '',\n      injuries: '',\n      preferences: {\n        workoutTypes: [],\n        timePreferences: [],\n        intensityLevel: ''\n      }\n    },\n    emergency: {\n      name: '',\n      relationship: '',\n      phone: '',\n      email: ''\n    },\n    package: null,\n    trainer: null\n  });\n  \n  // Validation State\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\n  \n  // Steps Configuration\n  const steps = [\n    {\n      label: 'Personal Information',\n      icon: <Person />,\n      description: 'Basic contact and demographic information'\n    },\n    {\n      label: 'Health & Fitness',\n      icon: <FitnessCenter />,\n      description: 'Goals, experience, and health screening'\n    },\n    {\n      label: 'Emergency Contact',\n      icon: <ContactEmergency />,\n      description: 'Emergency contact information'\n    },\n    {\n      label: 'Session Package',\n      icon: <Payment />,\n      description: 'Choose training package and payment'\n    },\n    {\n      label: 'Trainer Assignment',\n      icon: <Assignment />,\n      description: 'Match with appropriate trainer'\n    },\n    {\n      label: 'Review & Complete',\n      icon: <Check />,\n      description: 'Review information and create client'\n    }\n  ];\n  \n  // ==================== VALIDATION ====================\n  \n  const validateStep = useCallback((step: number): boolean => {\n    const errors: Record<string, string> = {};\n    \n    switch (step) {\n      case 0: // Personal Information\n        if (!formData.personal.firstName.trim()) {\n          errors.firstName = 'First name is required';\n        }\n        if (!formData.personal.lastName.trim()) {\n          errors.lastName = 'Last name is required';\n        }\n        if (!formData.personal.email.trim()) {\n          errors.email = 'Email is required';\n        } else if (!/\\S+@\\S+\\.\\S+/.test(formData.personal.email)) {\n          errors.email = 'Please enter a valid email address';\n        }\n        if (!formData.personal.phone.trim()) {\n          errors.phone = 'Phone number is required';\n        }\n        if (!formData.personal.dateOfBirth) {\n          errors.dateOfBirth = 'Date of birth is required';\n        }\n        break;\n        \n      case 1: // Health & Fitness\n        if (!formData.health.height || formData.health.height <= 0) {\n          errors.height = 'Height is required';\n        }\n        if (!formData.health.weight || formData.health.weight <= 0) {\n          errors.weight = 'Weight is required';\n        }\n        if (!formData.health.fitnessGoal.trim()) {\n          errors.fitnessGoal = 'Fitness goal is required';\n        }\n        if (!formData.health.trainingExperience.trim()) {\n          errors.trainingExperience = 'Training experience is required';\n        }\n        break;\n        \n      case 2: // Emergency Contact\n        if (!formData.emergency.name.trim()) {\n          errors.emergencyName = 'Emergency contact name is required';\n        }\n        if (!formData.emergency.phone.trim()) {\n          errors.emergencyPhone = 'Emergency contact phone is required';\n        }\n        if (!formData.emergency.relationship.trim()) {\n          errors.emergencyRelationship = 'Relationship is required';\n        }\n        break;\n        \n      case 3: // Package Selection\n        if (!formData.package) {\n          errors.package = 'Please select a session package';\n        }\n        break;\n        \n      case 4: // Trainer Assignment\n        // Trainer assignment is optional - can be done later\n        break;\n    }\n    \n    setValidationErrors(errors);\n    return Object.keys(errors).length === 0;\n  }, [formData]);\n  \n  // ==================== EVENT HANDLERS ====================\n  \n  const handleNext = () => {\n    if (validateStep(activeStep)) {\n      setActiveStep(prev => prev + 1);\n    }\n  };\n  \n  const handleBack = () => {\n    setActiveStep(prev => prev - 1);\n  };\n  \n  const handlePersonalInfoChange = (field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      personal: {\n        ...prev.personal,\n        [field]: value\n      }\n    }));\n  };\n  \n  const handleHealthInfoChange = (field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      health: {\n        ...prev.health,\n        [field]: value\n      }\n    }));\n  };\n  \n  const handleEmergencyContactChange = (field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      emergency: {\n        ...prev.emergency,\n        [field]: value\n      }\n    }));\n  };\n  \n  const handlePackageSelect = (packageInfo: PackageSelection) => {\n    setFormData(prev => ({ ...prev, package: packageInfo }));\n  };\n  \n  const handleTrainerSelect = (trainerInfo: TrainerAssignment) => {\n    setFormData(prev => ({ ...prev, trainer: trainerInfo }));\n  };\n  \n  const handleComplete = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Create client with all collected data\n      const clientData = {\n        // Personal information\n        firstName: formData.personal.firstName,\n        lastName: formData.personal.lastName,\n        email: formData.personal.email,\n        phone: formData.personal.phone,\n        dateOfBirth: formData.personal.dateOfBirth,\n        gender: formData.personal.gender,\n        \n        // Physical attributes\n        height: formData.health.height,\n        weight: formData.health.weight,\n        \n        // Fitness information\n        fitnessGoal: formData.health.fitnessGoal,\n        trainingExperience: formData.health.trainingExperience,\n        healthConcerns: formData.health.healthConcerns,\n        \n        // Emergency contact\n        emergencyContact: `${formData.emergency.name} (${formData.emergency.relationship}) - ${formData.emergency.phone}`,\n        \n        // Session package\n        availableSessions: formData.package?.sessionCount || 0,\n        \n        // Role\n        role: 'client',\n        isActive: true\n      };\n      \n      const newClient = await adminClientService.createClient(clientData);\n      \n      // Assign trainer if selected\n      if (formData.trainer) {\n        await adminClientService.assignTrainer(newClient.id, formData.trainer.trainerId);\n      }\n      \n      // Process payment if package selected\n      if (formData.package && formData.package.paymentMethod === 'card') {\n        // Handle payment processing\n        // This would integrate with Stripe or payment system\n      }\n      \n      onComplete(newClient);\n      \n    } catch (err: any) {\n      console.error('Error creating client:', err);\n      setError(err.message || 'Failed to create client');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // ==================== DATA FETCHING ====================\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [trainers, packages] = await Promise.all([\n          trainerService.getAvailableTrainers(),\n          packageService.getAvailablePackages()\n        ]);\n        \n        setAvailableTrainers(trainers);\n        setAvailablePackages(packages);\n      } catch (err) {\n        console.error('Error fetching data:', err);\n      }\n    };\n    \n    fetchData();\n  }, []);\n  \n  // ==================== RENDER STEP CONTENT ====================\n  \n  const renderStepContent = (step: number) => {\n    switch (step) {\n      case 0:\n        return (\n          <Box sx={{ p: 3 }}>\n            <Typography variant=\"h6\" gutterBottom sx={{ color: 'white' }}>\n              Personal Information\n            </Typography>\n            <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)', mb: 3 }}>\n              Please provide basic contact and demographic information.\n            </Typography>\n            \n            <Grid container spacing={3}>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"First Name\"\n                  value={formData.personal.firstName}\n                  onChange={(e) => handlePersonalInfoChange('firstName', e.target.value)}\n                  error={!!validationErrors.firstName}\n                  helperText={validationErrors.firstName}\n                  required\n                  sx={{\n                    '& .MuiInputLabel-root': { color: 'rgba(255,255,255,0.7)' },\n                    '& .MuiOutlinedInput-root': {\n                      color: 'white',\n                      '& fieldset': { borderColor: 'rgba(255,255,255,0.3)' },\n                      '&:hover fieldset': { borderColor: 'rgba(255,255,255,0.5)' },\n                      '&.Mui-focused fieldset': { borderColor: '#3b82f6' }\n                    }\n                  }}\n                />\n              </Grid>\n              \n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Last Name\"\n                  value={formData.personal.lastName}\n                  onChange={(e) => handlePersonalInfoChange('lastName', e.target.value)}\n                  error={!!validationErrors.lastName}\n                  helperText={validationErrors.lastName}\n                  required\n                  sx={{\n                    '& .MuiInputLabel-root': { color: 'rgba(255,255,255,0.7)' },\n                    '& .MuiOutlinedInput-root': {\n                      color: 'white',\n                      '& fieldset': { borderColor: 'rgba(255,255,255,0.3)' },\n                      '&:hover fieldset': { borderColor: 'rgba(255,255,255,0.5)' },\n                      '&.Mui-focused fieldset': { borderColor: '#3b82f6' }\n                    }\n                  }}\n                />\n              </Grid>\n              \n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Email\"\n                  type=\"email\"\n                  value={formData.personal.email}\n                  onChange={(e) => handlePersonalInfoChange('email', e.target.value)}\n                  error={!!validationErrors.email}\n                  helperText={validationErrors.email}\n                  required\n                  sx={{\n                    '& .MuiInputLabel-root': { color: 'rgba(255,255,255,0.7)' },\n                    '& .MuiOutlinedInput-root': {\n                      color: 'white',\n                      '& fieldset': { borderColor: 'rgba(255,255,255,0.3)' },\n                      '&:hover fieldset': { borderColor: 'rgba(255,255,255,0.5)' },\n                      '&.Mui-focused fieldset': { borderColor: '#3b82f6' }\n                    }\n                  }}\n                />\n              </Grid>\n              \n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Phone\"\n                  type=\"tel\"\n                  value={formData.personal.phone}\n                  onChange={(e) => handlePersonalInfoChange('phone', e.target.value)}\n                  error={!!validationErrors.phone}\n                  helperText={validationErrors.phone}\n                  required\n                  sx={{\n                    '& .MuiInputLabel-root': { color: 'rgba(255,255,255,0.7)' },\n                    '& .MuiOutlinedInput-root': {\n                      color: 'white',\n                      '& fieldset': { borderColor: 'rgba(255,255,255,0.3)' },\n                      '&:hover fieldset': { borderColor: 'rgba(255,255,255,0.5)' },\n                      '&.Mui-focused fieldset': { borderColor: '#3b82f6' }\n                    }\n                  }}\n                />\n              </Grid>\n              \n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Date of Birth\"\n                  type=\"date\"\n                  value={formData.personal.dateOfBirth}\n                  onChange={(e) => handlePersonalInfoChange('dateOfBirth', e.target.value)}\n                  error={!!validationErrors.dateOfBirth}\n                  helperText={validationErrors.dateOfBirth}\n                  required\n                  InputLabelProps={{ shrink: true }}\n                  sx={{\n                    '& .MuiInputLabel-root': { color: 'rgba(255,255,255,0.7)' },\n                    '& .MuiOutlinedInput-root': {\n                      color: 'white',\n                      '& fieldset': { borderColor: 'rgba(255,255,255,0.3)' },\n                      '&:hover fieldset': { borderColor: 'rgba(255,255,255,0.5)' },\n                      '&.Mui-focused fieldset': { borderColor: '#3b82f6' }\n                    }\n                  }}\n                />\n              </Grid>\n              \n              <Grid item xs={12} sm={6}>\n                <FormControl fullWidth>\n                  <InputLabel sx={{ color: 'rgba(255,255,255,0.7)' }}>Gender</InputLabel>\n                  <Select\n                    value={formData.personal.gender}\n                    onChange={(e) => handlePersonalInfoChange('gender', e.target.value)}\n                    label=\"Gender\"\n                    sx={{\n                      color: 'white',\n                      '& .MuiOutlinedInput-notchedOutline': {\n                        borderColor: 'rgba(255,255,255,0.3)'\n                      },\n                      '&:hover .MuiOutlinedInput-notchedOutline': {\n                        borderColor: 'rgba(255,255,255,0.5)'\n                      },\n                      '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\n                        borderColor: '#3b82f6'\n                      }\n                    }}\n                  >\n                    <MenuItem value=\"male\">Male</MenuItem>\n                    <MenuItem value=\"female\">Female</MenuItem>\n                    <MenuItem value=\"other\">Other</MenuItem>\n                    <MenuItem value=\"prefer-not-to-say\">Prefer not to say</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n            </Grid>\n          </Box>\n        );\n        \n      case 1:\n        return (\n          <Box sx={{ p: 3 }}>\n            <Typography variant=\"h6\" gutterBottom sx={{ color: 'white' }}>\n              Health & Fitness Assessment\n            </Typography>\n            <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)', mb: 3 }}>\n              Help us understand your fitness goals and current health status.\n            </Typography>\n            \n            <Grid container spacing={3}>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Height (inches)\"\n                  type=\"number\"\n                  value={formData.health.height || ''}\n                  onChange={(e) => handleHealthInfoChange('height', parseFloat(e.target.value))}\n                  error={!!validationErrors.height}\n                  helperText={validationErrors.height}\n                  required\n                  sx={{\n                    '& .MuiInputLabel-root': { color: 'rgba(255,255,255,0.7)' },\n                    '& .MuiOutlinedInput-root': {\n                      color: 'white',\n                      '& fieldset': { borderColor: 'rgba(255,255,255,0.3)' },\n                      '&:hover fieldset': { borderColor: 'rgba(255,255,255,0.5)' },\n                      '&.Mui-focused fieldset': { borderColor: '#3b82f6' }\n                    }\n                  }}\n                />\n              </Grid>\n              \n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Weight (lbs)\"\n                  type=\"number\"\n                  value={formData.health.weight || ''}\n                  onChange={(e) => handleHealthInfoChange('weight', parseFloat(e.target.value))}\n                  error={!!validationErrors.weight}\n                  helperText={validationErrors.weight}\n                  required\n                  sx={{\n                    '& .MuiInputLabel-root': { color: 'rgba(255,255,255,0.7)' },\n                    '& .MuiOutlinedInput-root': {\n                      color: 'white',\n                      '& fieldset': { borderColor: 'rgba(255,255,255,0.3)' },\n                      '&:hover fieldset': { borderColor: 'rgba(255,255,255,0.5)' },\n                      '&.Mui-focused fieldset': { borderColor: '#3b82f6' }\n                    }\n                  }}\n                />\n              </Grid>\n              \n              <Grid item xs={12}>\n                <FormControl fullWidth required>\n                  <InputLabel sx={{ color: 'rgba(255,255,255,0.7)' }}>Primary Fitness Goal</InputLabel>\n                  <Select\n                    value={formData.health.fitnessGoal}\n                    onChange={(e) => handleHealthInfoChange('fitnessGoal', e.target.value)}\n                    label=\"Primary Fitness Goal\"\n                    error={!!validationErrors.fitnessGoal}\n                    sx={{\n                      color: 'white',\n                      '& .MuiOutlinedInput-notchedOutline': {\n                        borderColor: 'rgba(255,255,255,0.3)'\n                      }\n                    }}\n                  >\n                    <MenuItem value=\"weight-loss\">Weight Loss</MenuItem>\n                    <MenuItem value=\"muscle-gain\">Muscle Gain</MenuItem>\n                    <MenuItem value=\"strength\">Strength Training</MenuItem>\n                    <MenuItem value=\"endurance\">Endurance/Cardio</MenuItem>\n                    <MenuItem value=\"flexibility\">Flexibility/Mobility</MenuItem>\n                    <MenuItem value=\"general-fitness\">General Fitness</MenuItem>\n                    <MenuItem value=\"sport-specific\">Sport-Specific Training</MenuItem>\n                    <MenuItem value=\"rehabilitation\">Rehabilitation</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              \n              <Grid item xs={12}>\n                <FormControl fullWidth required>\n                  <InputLabel sx={{ color: 'rgba(255,255,255,0.7)' }}>Training Experience</InputLabel>\n                  <Select\n                    value={formData.health.trainingExperience}\n                    onChange={(e) => handleHealthInfoChange('trainingExperience', e.target.value)}\n                    label=\"Training Experience\"\n                    error={!!validationErrors.trainingExperience}\n                    sx={{\n                      color: 'white',\n                      '& .MuiOutlinedInput-notchedOutline': {\n                        borderColor: 'rgba(255,255,255,0.3)'\n                      }\n                    }}\n                  >\n                    <MenuItem value=\"beginner\">Beginner (0-6 months)</MenuItem>\n                    <MenuItem value=\"novice\">Novice (6 months - 2 years)</MenuItem>\n                    <MenuItem value=\"intermediate\">Intermediate (2-5 years)</MenuItem>\n                    <MenuItem value=\"advanced\">Advanced (5+ years)</MenuItem>\n                    <MenuItem value=\"expert\">Expert/Competitive</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              \n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Health Concerns or Limitations\"\n                  multiline\n                  rows={3}\n                  value={formData.health.healthConcerns}\n                  onChange={(e) => handleHealthInfoChange('healthConcerns', e.target.value)}\n                  placeholder=\"Any injuries, medical conditions, or physical limitations we should know about...\"\n                  sx={{\n                    '& .MuiInputLabel-root': { color: 'rgba(255,255,255,0.7)' },\n                    '& .MuiOutlinedInput-root': {\n                      color: 'white',\n                      '& fieldset': { borderColor: 'rgba(255,255,255,0.3)' },\n                      '&:hover fieldset': { borderColor: 'rgba(255,255,255,0.5)' },\n                      '&.Mui-focused fieldset': { borderColor: '#3b82f6' }\n                    }\n                  }}\n                />\n              </Grid>\n            </Grid>\n          </Box>\n        );\n        \n      case 2:\n        return (\n          <Box sx={{ p: 3 }}>\n            <Typography variant=\"h6\" gutterBottom sx={{ color: 'white' }}>\n              Emergency Contact Information\n            </Typography>\n            <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)', mb: 3 }}>\n              Please provide an emergency contact for safety purposes.\n            </Typography>\n            \n            <Grid container spacing={3}>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Contact Name\"\n                  value={formData.emergency.name}\n                  onChange={(e) => handleEmergencyContactChange('name', e.target.value)}\n                  error={!!validationErrors.emergencyName}\n                  helperText={validationErrors.emergencyName}\n                  required\n                  sx={{\n                    '& .MuiInputLabel-root': { color: 'rgba(255,255,255,0.7)' },\n                    '& .MuiOutlinedInput-root': {\n                      color: 'white',\n                      '& fieldset': { borderColor: 'rgba(255,255,255,0.3)' },\n                      '&:hover fieldset': { borderColor: 'rgba(255,255,255,0.5)' },\n                      '&.Mui-focused fieldset': { borderColor: '#3b82f6' }\n                    }\n                  }}\n                />\n              </Grid>\n              \n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Relationship\"\n                  value={formData.emergency.relationship}\n                  onChange={(e) => handleEmergencyContactChange('relationship', e.target.value)}\n                  error={!!validationErrors.emergencyRelationship}\n                  helperText={validationErrors.emergencyRelationship}\n                  placeholder=\"e.g., Spouse, Parent, Sibling, Friend\"\n                  required\n                  sx={{\n                    '& .MuiInputLabel-root': { color: 'rgba(255,255,255,0.7)' },\n                    '& .MuiOutlinedInput-root': {\n                      color: 'white',\n                      '& fieldset': { borderColor: 'rgba(255,255,255,0.3)' },\n                      '&:hover fieldset': { borderColor: 'rgba(255,255,255,0.5)' },\n                      '&.Mui-focused fieldset': { borderColor: '#3b82f6' }\n                    }\n                  }}\n                />\n              </Grid>\n              \n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Phone Number\"\n                  type=\"tel\"\n                  value={formData.emergency.phone}\n                  onChange={(e) => handleEmergencyContactChange('phone', e.target.value)}\n                  error={!!validationErrors.emergencyPhone}\n                  helperText={validationErrors.emergencyPhone}\n                  required\n                  sx={{\n                    '& .MuiInputLabel-root': { color: 'rgba(255,255,255,0.7)' },\n                    '& .MuiOutlinedInput-root': {\n                      color: 'white',\n                      '& fieldset': { borderColor: 'rgba(255,255,255,0.3)' },\n                      '&:hover fieldset': { borderColor: 'rgba(255,255,255,0.5)' },\n                      '&.Mui-focused fieldset': { borderColor: '#3b82f6' }\n                    }\n                  }}\n                />\n              </Grid>\n              \n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Email (Optional)\"\n                  type=\"email\"\n                  value={formData.emergency.email}\n                  onChange={(e) => handleEmergencyContactChange('email', e.target.value)}\n                  sx={{\n                    '& .MuiInputLabel-root': { color: 'rgba(255,255,255,0.7)' },\n                    '& .MuiOutlinedInput-root': {\n                      color: 'white',\n                      '& fieldset': { borderColor: 'rgba(255,255,255,0.3)' },\n                      '&:hover fieldset': { borderColor: 'rgba(255,255,255,0.5)' },\n                      '&.Mui-focused fieldset': { borderColor: '#3b82f6' }\n                    }\n                  }}\n                />\n              </Grid>\n            </Grid>\n          </Box>\n        );\n        \n      case 3:\n        return (\n          <Box sx={{ p: 3 }}>\n            <Typography variant=\"h6\" gutterBottom sx={{ color: 'white' }}>\n              Session Package Selection\n            </Typography>\n            <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)', mb: 3 }}>\n              Choose a training package to get started.\n            </Typography>\n            \n            <Grid container spacing={3}>\n              {availablePackages.map((pkg: any) => (\n                <Grid item xs={12} sm={6} md={4} key={pkg.id}>\n                  <Card \n                    sx={{ \n                      background: formData.package?.packageId === pkg.id \n                        ? 'linear-gradient(135deg, rgba(59, 130, 246, 0.3), rgba(29, 78, 216, 0.1))'\n                        : 'rgba(71, 85, 105, 0.5)',\n                      border: formData.package?.packageId === pkg.id\n                        ? '2px solid #3b82f6'\n                        : '1px solid rgba(71, 85, 105, 0.5)',\n                      cursor: 'pointer',\n                      transition: 'all 0.2s ease'\n                    }}\n                    onClick={() => handlePackageSelect({\n                      packageId: pkg.id,\n                      packageName: pkg.name,\n                      sessionCount: pkg.sessionCount,\n                      price: pkg.price,\n                      paymentMethod: 'card'\n                    })}\n                  >\n                    <CardContent>\n                      <Typography variant=\"h6\" sx={{ color: 'white', mb: 1 }}>\n                        {pkg.name}\n                      </Typography>\n                      <Typography variant=\"h4\" sx={{ color: '#3b82f6', mb: 1 }}>\n                        ${pkg.price}\n                      </Typography>\n                      <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)', mb: 2 }}>\n                        {pkg.sessionCount} Sessions\n                      </Typography>\n                      <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                        {pkg.description}\n                      </Typography>\n                      {formData.package?.packageId === pkg.id && (\n                        <Chip \n                          label=\"Selected\" \n                          color=\"primary\" \n                          size=\"small\" \n                          sx={{ mt: 2 }}\n                        />\n                      )}\n                    </CardContent>\n                  </Card>\n                </Grid>\n              ))}\n            </Grid>\n            \n            {validationErrors.package && (\n              <Alert severity=\"error\" sx={{ mt: 2 }}>\n                {validationErrors.package}\n              </Alert>\n            )}\n          </Box>\n        );\n        \n      case 4:\n        return (\n          <Box sx={{ p: 3 }}>\n            <Typography variant=\"h6\" gutterBottom sx={{ color: 'white' }}>\n              Trainer Assignment\n            </Typography>\n            <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)', mb: 3 }}>\n              Choose a trainer or skip this step to assign later.\n            </Typography>\n            \n            <Grid container spacing={3}>\n              {availableTrainers.map((trainer: any) => (\n                <Grid item xs={12} sm={6} key={trainer.id}>\n                  <Card \n                    sx={{ \n                      background: formData.trainer?.trainerId === trainer.id \n                        ? 'linear-gradient(135deg, rgba(59, 130, 246, 0.3), rgba(29, 78, 216, 0.1))'\n                        : 'rgba(71, 85, 105, 0.5)',\n                      border: formData.trainer?.trainerId === trainer.id\n                        ? '2px solid #3b82f6'\n                        : '1px solid rgba(71, 85, 105, 0.5)',\n                      cursor: 'pointer',\n                      transition: 'all 0.2s ease'\n                    }}\n                    onClick={() => handleTrainerSelect({\n                      trainerId: trainer.id,\n                      trainerName: `${trainer.firstName} ${trainer.lastName}`,\n                      specialties: trainer.specialties?.split(',') || [],\n                      matchScore: 85 // Calculate based on client preferences\n                    })}\n                  >\n                    <CardContent>\n                      <Box display=\"flex\" alignItems=\"center\" gap={2} mb={2}>\n                        <Avatar src={trainer.photo} sx={{ width: 60, height: 60 }}>\n                          {trainer.firstName[0]}\n                        </Avatar>\n                        <Box>\n                          <Typography variant=\"h6\" sx={{ color: 'white' }}>\n                            {trainer.firstName} {trainer.lastName}\n                          </Typography>\n                          <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                            {trainer.certifications || 'Certified Trainer'}\n                          </Typography>\n                        </Box>\n                      </Box>\n                      \n                      {trainer.specialties && (\n                        <Box mb={2}>\n                          <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)', mb: 1 }}>\n                            Specialties:\n                          </Typography>\n                          <Box display=\"flex\" gap={1} flexWrap=\"wrap\">\n                            {trainer.specialties.split(',').map((specialty: string, index: number) => (\n                              <Chip \n                                key={index}\n                                label={specialty.trim()}\n                                size=\"small\"\n                                sx={{ background: 'rgba(59, 130, 246, 0.2)', color: 'white' }}\n                              />\n                            ))}\n                          </Box>\n                        </Box>\n                      )}\n                      \n                      {formData.trainer?.trainerId === trainer.id && (\n                        <Chip \n                          label=\"Selected\" \n                          color=\"primary\" \n                          size=\"small\" \n                        />\n                      )}\n                    </CardContent>\n                  </Card>\n                </Grid>\n              ))}\n            </Grid>\n            \n            <Box mt={3}>\n              <Button\n                variant=\"outlined\"\n                onClick={() => setFormData(prev => ({ ...prev, trainer: null }))}\n                sx={{ color: 'rgba(255,255,255,0.7)', borderColor: 'rgba(255,255,255,0.3)' }}\n              >\n                Skip - Assign Later\n              </Button>\n            </Box>\n          </Box>\n        );\n        \n      case 5:\n        return (\n          <Box sx={{ p: 3 }}>\n            <Typography variant=\"h6\" gutterBottom sx={{ color: 'white' }}>\n              Review & Complete\n            </Typography>\n            <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)', mb: 3 }}>\n              Please review all information before creating the client profile.\n            </Typography>\n            \n            {/* Review Summary */}\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <Paper sx={{ p: 2, background: 'rgba(71, 85, 105, 0.5)' }}>\n                  <Typography variant=\"subtitle1\" sx={{ color: 'white', mb: 2 }}>\n                    Personal Information\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                    {formData.personal.firstName} {formData.personal.lastName}<br/>\n                    {formData.personal.email}<br/>\n                    {formData.personal.phone}<br/>\n                    Born: {formData.personal.dateOfBirth}<br/>\n                    Gender: {formData.personal.gender}\n                  </Typography>\n                </Paper>\n              </Grid>\n              \n              <Grid item xs={12} md={6}>\n                <Paper sx={{ p: 2, background: 'rgba(71, 85, 105, 0.5)' }}>\n                  <Typography variant=\"subtitle1\" sx={{ color: 'white', mb: 2 }}>\n                    Health & Fitness\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                    Height: {formData.health.height}\"<br/>\n                    Weight: {formData.health.weight} lbs<br/>\n                    Goal: {formData.health.fitnessGoal}<br/>\n                    Experience: {formData.health.trainingExperience}\n                  </Typography>\n                </Paper>\n              </Grid>\n              \n              <Grid item xs={12} md={6}>\n                <Paper sx={{ p: 2, background: 'rgba(71, 85, 105, 0.5)' }}>\n                  <Typography variant=\"subtitle1\" sx={{ color: 'white', mb: 2 }}>\n                    Emergency Contact\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                    {formData.emergency.name}<br/>\n                    {formData.emergency.relationship}<br/>\n                    {formData.emergency.phone}\n                  </Typography>\n                </Paper>\n              </Grid>\n              \n              <Grid item xs={12} md={6}>\n                <Paper sx={{ p: 2, background: 'rgba(71, 85, 105, 0.5)' }}>\n                  <Typography variant=\"subtitle1\" sx={{ color: 'white', mb: 2 }}>\n                    Package & Trainer\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                    Package: {formData.package?.packageName || 'None selected'}<br/>\n                    Sessions: {formData.package?.sessionCount || 0}<br/>\n                    Trainer: {formData.trainer?.trainerName || 'To be assigned'}\n                  </Typography>\n                </Paper>\n              </Grid>\n            </Grid>\n            \n            {error && (\n              <Alert severity=\"error\" sx={{ mt: 3 }}>\n                <AlertTitle>Error Creating Client</AlertTitle>\n                {error}\n              </Alert>\n            )}\n          </Box>\n        );\n        \n      default:\n        return null;\n    }\n  };\n  \n  // ==================== RENDER ====================\n  \n  return (\n    <Box>\n      {/* Dialog Header */}\n      <DialogTitle sx={{ \n        display: 'flex', \n        justifyContent: 'space-between', \n        alignItems: 'center',\n        color: 'white',\n        background: 'rgba(0,0,0,0.3)'\n      }}>\n        <Typography variant=\"h5\">\n          New Client Onboarding\n        </Typography>\n        <IconButton onClick={onCancel} sx={{ color: 'white' }}>\n          <Close />\n        </IconButton>\n      </DialogTitle>\n      \n      {/* Progress Indicator */}\n      <Box sx={{ p: 3, background: 'rgba(0,0,0,0.2)' }}>\n        <LinearProgress \n          variant=\"determinate\" \n          value={(activeStep / (steps.length - 1)) * 100}\n          sx={{ \n            height: 8, \n            borderRadius: 4,\n            backgroundColor: 'rgba(255,255,255,0.1)',\n            '& .MuiLinearProgress-bar': {\n              backgroundColor: '#3b82f6'\n            }\n          }}\n        />\n        <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)', mt: 1, textAlign: 'center' }}>\n          Step {activeStep + 1} of {steps.length}: {steps[activeStep].label}\n        </Typography>\n      </Box>\n      \n      {/* Step Content */}\n      <DialogContent sx={{ background: 'rgba(0,0,0,0.5)', minHeight: 400 }}>\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={activeStep}\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: -20 }}\n            transition={{ duration: 0.3 }}\n          >\n            {renderStepContent(activeStep)}\n          </motion.div>\n        </AnimatePresence>\n      </DialogContent>\n      \n      {/* Navigation Buttons */}\n      <DialogActions sx={{ \n        p: 3, \n        background: 'rgba(0,0,0,0.3)',\n        justifyContent: 'space-between'\n      }}>\n        <Button\n          onClick={activeStep === 0 ? onCancel : handleBack}\n          startIcon={activeStep === 0 ? <Close /> : <ArrowBack />}\n          sx={{ color: 'rgba(255,255,255,0.7)' }}\n        >\n          {activeStep === 0 ? 'Cancel' : 'Back'}\n        </Button>\n        \n        <Box display=\"flex\" gap={2}>\n          {activeStep < steps.length - 1 ? (\n            <Button\n              variant=\"contained\"\n              onClick={handleNext}\n              endIcon={<ArrowForward />}\n              sx={{ \n                background: 'linear-gradient(135deg, #3b82f6, #1d4ed8)',\n                '&:hover': {\n                  background: 'linear-gradient(135deg, #2563eb, #1e40af)'\n                }\n              }}\n            >\n              Next\n            </Button>\n          ) : (\n            <Button\n              variant=\"contained\"\n              onClick={handleComplete}\n              disabled={loading}\n              startIcon={loading ? <LinearProgress size={20} /> : <Check />}\n              sx={{ \n                background: 'linear-gradient(135deg, #10b981, #059669)',\n                '&:hover': {\n                  background: 'linear-gradient(135deg, #059669, #047857)'\n                }\n              }}\n            >\n              {loading ? 'Creating Client...' : 'Complete Onboarding'}\n            </Button>\n          )}\n        </Box>\n      </DialogActions>\n    </Box>\n  );\n};\n\nexport default ClientOnboardingWizard;