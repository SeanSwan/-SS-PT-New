/**
 * Unified Data Collection Onboarding Wizard
 * ==========================================
 * 
 * BUSINESS-CRITICAL: Complete onboarding system for ALL user types
 * Adaptive wizard that collects appropriate data based on user type
 * 
 * SUPPORTED USER TYPES:
 * - General Users (basic platform registration)
 * - Potential Clients (fitness goals, health screening, packages)
 * - Potential Trainers (certifications, experience, specialties)
 * - Role Conversions (existing user to client/trainer)
 * 
 * FEATURES:
 * - Multi-step progressive disclosure
 * - Role-specific data collection forms
 * - Mobile-optimized interface
 * - Real-time validation and progress tracking
 * - Integration with payment system (for clients)
 * - Certificate upload and verification (for trainers)
 * - Health screening and assessment (for clients)
 * - Emergency contact and waiver collection
 */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport styled from 'styled-components';\nimport { useAuth } from '../../../../context/AuthContext';\nimport { useToast } from '../../../../hooks/use-toast';\n\n// Material-UI Components\nimport {\n  Box,\n  Typography,\n  Grid,\n  Paper,\n  Card,\n  CardContent,\n  TextField,\n  Button,\n  IconButton,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormControlLabel,\n  Checkbox,\n  RadioGroup,\n  Radio,\n  Chip,\n  Avatar,\n  Divider,\n  Alert,\n  AlertTitle,\n  LinearProgress,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions\n} from '@mui/material';\n\n// Icons\nimport {\n  ArrowBack,\n  ArrowForward,\n  Person,\n  FitnessCenter,\n  School,\n  Phone,\n  Email,\n  LocationOn,\n  CalendarToday,\n  HealthAndSafety,\n  Security,\n  Payment,\n  CloudUpload,\n  CheckCircle,\n  Warning,\n  Info,\n  Close,\n  ExpandMore,\n  Save,\n  Send,\n  Assignment,\n  ContactEmergency,\n  Description\n} from '@mui/icons-material';\n\n// === STYLED COMPONENTS ===\nconst OnboardingContainer = styled.div`\n  padding: 1.5rem;\n  min-height: 100vh;\n  background: transparent;\n  \n  @media (max-width: 768px) {\n    padding: 1rem;\n  }\n`;\n\nconst HeaderSection = styled(motion.div)`\n  margin-bottom: 2rem;\n  text-align: center;\n  \n  h1 {\n    color: #ffffff;\n    font-size: 2.5rem;\n    font-weight: 700;\n    margin-bottom: 0.5rem;\n    background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 50%, #00ffff 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    \n    @media (max-width: 768px) {\n      font-size: 2rem;\n    }\n  }\n  \n  p {\n    color: rgba(255, 255, 255, 0.8);\n    font-size: 1.1rem;\n    max-width: 600px;\n    margin: 0 auto;\n    line-height: 1.6;\n  }\n`;\n\nconst WizardContainer = styled(motion.div)`\n  max-width: 900px;\n  margin: 0 auto;\n  background: rgba(59, 130, 246, 0.1);\n  border: 1px solid rgba(59, 130, 246, 0.3);\n  border-radius: 20px;\n  padding: 2rem;\n  backdrop-filter: blur(10px);\n  \n  @media (max-width: 768px) {\n    padding: 1.5rem;\n  }\n`;\n\nconst ProgressSection = styled.div`\n  margin-bottom: 2rem;\n  \n  .progress-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 1rem;\n    \n    h2 {\n      color: #ffffff;\n      font-size: 1.5rem;\n      font-weight: 600;\n      margin: 0;\n    }\n    \n    .progress-info {\n      color: rgba(255, 255, 255, 0.8);\n      font-size: 0.9rem;\n    }\n  }\n`;\n\nconst UserTypeSelector = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n  gap: 1.5rem;\n  margin-bottom: 2rem;\n`;\n\nconst UserTypeCard = styled(motion.div)<{ selected: boolean }>`\n  background: ${props => props.selected \n    ? 'rgba(0, 255, 255, 0.2)' \n    : 'rgba(139, 92, 246, 0.1)'};\n  border: 2px solid ${props => props.selected \n    ? '#00ffff' \n    : 'rgba(139, 92, 246, 0.3)'};\n  border-radius: 16px;\n  padding: 2rem;\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  \n  &:hover {\n    border-color: #00ffff;\n    transform: translateY(-4px);\n    box-shadow: 0 8px 32px rgba(0, 255, 255, 0.2);\n  }\n  \n  .icon {\n    font-size: 3rem;\n    color: #00ffff;\n    margin-bottom: 1rem;\n  }\n  \n  .title {\n    color: #ffffff;\n    font-size: 1.25rem;\n    font-weight: 600;\n    margin-bottom: 0.5rem;\n  }\n  \n  .description {\n    color: rgba(255, 255, 255, 0.8);\n    font-size: 0.9rem;\n    line-height: 1.5;\n  }\n`;\n\nconst FormSection = styled(motion.div)`\n  background: rgba(30, 58, 138, 0.2);\n  border: 1px solid rgba(59, 130, 246, 0.3);\n  border-radius: 16px;\n  padding: 2rem;\n  margin-bottom: 1.5rem;\n  \n  h3 {\n    color: #ffffff;\n    font-size: 1.25rem;\n    font-weight: 600;\n    margin-bottom: 1.5rem;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n  }\n`;\n\nconst NavigationButtons = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 1rem;\n  margin-top: 2rem;\n  \n  @media (max-width: 768px) {\n    flex-direction: column;\n    align-items: stretch;\n  }\n`;\n\nconst ActionButton = styled(motion.button)<{ variant?: 'primary' | 'secondary' }>`\n  background: ${props => props.variant === 'primary' \n    ? 'linear-gradient(135deg, #3b82f6 0%, #00ffff 100%)'\n    : 'rgba(139, 92, 246, 0.2)'};\n  border: 1px solid ${props => props.variant === 'primary' \n    ? 'transparent'\n    : 'rgba(139, 92, 246, 0.3)'};\n  border-radius: 12px;\n  color: #ffffff;\n  padding: 0.75rem 1.5rem;\n  font-weight: 600;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  transition: all 0.3s ease;\n  \n  &:hover {\n    box-shadow: 0 8px 25px rgba(0, 255, 255, 0.4);\n    transform: translateY(-2px);\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    transform: none;\n  }\n`;\n\n// === INTERFACES ===\ninterface UserData {\n  // Basic Information\n  firstName: string;\n  lastName: string;\n  email: string;\n  username: string;\n  phone: string;\n  dateOfBirth?: string;\n  gender?: string;\n  \n  // Contact & Emergency\n  address?: {\n    street: string;\n    city: string;\n    state: string;\n    zipCode: string;\n  };\n  emergencyContact?: {\n    name: string;\n    phone: string;\n    relationship: string;\n  };\n  \n  // Role-specific data\n  userType: 'user' | 'client' | 'trainer';\n  \n  // Client-specific\n  fitnessGoals?: string[];\n  healthConcerns?: string;\n  trainingExperience?: string;\n  preferredSchedule?: string[];\n  packageInterest?: string;\n  \n  // Trainer-specific\n  certifications?: {\n    name: string;\n    organization: string;\n    obtainedDate: string;\n    expirationDate: string;\n    certificateFile?: File;\n  }[];\n  specialties?: string[];\n  experience?: number;\n  bio?: string;\n  hourlyRate?: number;\n  availability?: {\n    days: string[];\n    hours: { start: string; end: string; };\n  };\n}\n\ninterface WizardStep {\n  id: string;\n  title: string;\n  description: string;\n  component: React.ComponentType<any>;\n  required: boolean;\n  userTypes: ('user' | 'client' | 'trainer')[];\n}\n\n// === STEP COMPONENTS ===\nconst UserTypeSelection: React.FC<{\n  userData: UserData;\n  setUserData: (data: Partial<UserData>) => void;\n}> = ({ userData, setUserData }) => {\n  const userTypes = [\n    {\n      type: 'user' as const,\n      icon: <Person className=\"icon\" />,\n      title: 'General User',\n      description: 'Basic platform access with community features and content viewing'\n    },\n    {\n      type: 'client' as const,\n      icon: <FitnessCenter className=\"icon\" />,\n      title: 'Fitness Client',\n      description: 'Personal training sessions, custom workout plans, and progress tracking'\n    },\n    {\n      type: 'trainer' as const,\n      icon: <School className=\"icon\" />,\n      title: 'Personal Trainer',\n      description: 'Professional trainer account with client management and scheduling tools'\n    }\n  ];\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" sx={{ color: '#ffffff', mb: 2 }}>\n        What type of account would you like to create?\n      </Typography>\n      <UserTypeSelector>\n        {userTypes.map((type) => (\n          <UserTypeCard\n            key={type.type}\n            selected={userData.userType === type.type}\n            onClick={() => setUserData({ userType: type.type })}\n            whileHover={{ scale: 1.02 }}\n            whileTap={{ scale: 0.98 }}\n          >\n            {type.icon}\n            <div className=\"title\">{type.title}</div>\n            <div className=\"description\">{type.description}</div>\n          </UserTypeCard>\n        ))}\n      </UserTypeSelector>\n    </Box>\n  );\n};\n\nconst BasicInformation: React.FC<{\n  userData: UserData;\n  setUserData: (data: Partial<UserData>) => void;\n}> = ({ userData, setUserData }) => {\n  return (\n    <Box>\n      <Grid container spacing={3}>\n        <Grid item xs={12} md={6}>\n          <TextField\n            fullWidth\n            label=\"First Name\"\n            value={userData.firstName}\n            onChange={(e) => setUserData({ firstName: e.target.value })}\n            required\n            sx={{\n              '& .MuiOutlinedInput-root': {\n                color: '#ffffff',\n                backgroundColor: 'rgba(59, 130, 246, 0.1)',\n                '& fieldset': { borderColor: 'rgba(59, 130, 246, 0.3)' },\n                '&:hover fieldset': { borderColor: '#00ffff' },\n                '&.Mui-focused fieldset': { borderColor: '#00ffff' }\n              },\n              '& .MuiInputLabel-root': { color: 'rgba(255,255,255,0.8)' }\n            }}\n          />\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <TextField\n            fullWidth\n            label=\"Last Name\"\n            value={userData.lastName}\n            onChange={(e) => setUserData({ lastName: e.target.value })}\n            required\n            sx={{\n              '& .MuiOutlinedInput-root': {\n                color: '#ffffff',\n                backgroundColor: 'rgba(59, 130, 246, 0.1)',\n                '& fieldset': { borderColor: 'rgba(59, 130, 246, 0.3)' },\n                '&:hover fieldset': { borderColor: '#00ffff' },\n                '&.Mui-focused fieldset': { borderColor: '#00ffff' }\n              },\n              '& .MuiInputLabel-root': { color: 'rgba(255,255,255,0.8)' }\n            }}\n          />\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <TextField\n            fullWidth\n            label=\"Email Address\"\n            type=\"email\"\n            value={userData.email}\n            onChange={(e) => setUserData({ email: e.target.value })}\n            required\n            sx={{\n              '& .MuiOutlinedInput-root': {\n                color: '#ffffff',\n                backgroundColor: 'rgba(59, 130, 246, 0.1)',\n                '& fieldset': { borderColor: 'rgba(59, 130, 246, 0.3)' },\n                '&:hover fieldset': { borderColor: '#00ffff' },\n                '&.Mui-focused fieldset': { borderColor: '#00ffff' }\n              },\n              '& .MuiInputLabel-root': { color: 'rgba(255,255,255,0.8)' }\n            }}\n          />\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <TextField\n            fullWidth\n            label=\"Username\"\n            value={userData.username}\n            onChange={(e) => setUserData({ username: e.target.value })}\n            required\n            sx={{\n              '& .MuiOutlinedInput-root': {\n                color: '#ffffff',\n                backgroundColor: 'rgba(59, 130, 246, 0.1)',\n                '& fieldset': { borderColor: 'rgba(59, 130, 246, 0.3)' },\n                '&:hover fieldset': { borderColor: '#00ffff' },\n                '&.Mui-focused fieldset': { borderColor: '#00ffff' }\n              },\n              '& .MuiInputLabel-root': { color: 'rgba(255,255,255,0.8)' }\n            }}\n          />\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <TextField\n            fullWidth\n            label=\"Phone Number\"\n            type=\"tel\"\n            value={userData.phone}\n            onChange={(e) => setUserData({ phone: e.target.value })}\n            required\n            sx={{\n              '& .MuiOutlinedInput-root': {\n                color: '#ffffff',\n                backgroundColor: 'rgba(59, 130, 246, 0.1)',\n                '& fieldset': { borderColor: 'rgba(59, 130, 246, 0.3)' },\n                '&:hover fieldset': { borderColor: '#00ffff' },\n                '&.Mui-focused fieldset': { borderColor: '#00ffff' }\n              },\n              '& .MuiInputLabel-root': { color: 'rgba(255,255,255,0.8)' }\n            }}\n          />\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <TextField\n            fullWidth\n            label=\"Date of Birth\"\n            type=\"date\"\n            value={userData.dateOfBirth || ''}\n            onChange={(e) => setUserData({ dateOfBirth: e.target.value })}\n            InputLabelProps={{ shrink: true }}\n            sx={{\n              '& .MuiOutlinedInput-root': {\n                color: '#ffffff',\n                backgroundColor: 'rgba(59, 130, 246, 0.1)',\n                '& fieldset': { borderColor: 'rgba(59, 130, 246, 0.3)' },\n                '&:hover fieldset': { borderColor: '#00ffff' },\n                '&.Mui-focused fieldset': { borderColor: '#00ffff' }\n              },\n              '& .MuiInputLabel-root': { color: 'rgba(255,255,255,0.8)' }\n            }}\n          />\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\n// === MAIN COMPONENT ===\nconst UnifiedOnboardingWizard: React.FC = () => {\n  const { user: currentUser } = useAuth();\n  const { toast } = useToast();\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  \n  // Get initial user type from URL params\n  const initialUserType = searchParams.get('type') as 'user' | 'client' | 'trainer' || 'user';\n  \n  // State management\n  const [currentStep, setCurrentStep] = useState(0);\n  const [userData, setUserData] = useState<UserData>({\n    firstName: '',\n    lastName: '',\n    email: '',\n    username: '',\n    phone: '',\n    userType: initialUserType\n  });\n  const [loading, setLoading] = useState(false);\n  const [validationErrors, setValidationErrors] = useState<string[]>([]);\n\n  // Update user data helper\n  const updateUserData = useCallback((newData: Partial<UserData>) => {\n    setUserData(prev => ({ ...prev, ...newData }));\n  }, []);\n\n  // Define wizard steps based on user type\n  const allSteps: WizardStep[] = [\n    {\n      id: 'user-type',\n      title: 'Account Type',\n      description: 'Select the type of account you want to create',\n      component: UserTypeSelection,\n      required: true,\n      userTypes: ['user', 'client', 'trainer']\n    },\n    {\n      id: 'basic-info',\n      title: 'Basic Information',\n      description: 'Tell us about yourself',\n      component: BasicInformation,\n      required: true,\n      userTypes: ['user', 'client', 'trainer']\n    }\n    // Additional steps would be added here for client and trainer specific data\n  ];\n\n  // Filter steps based on selected user type\n  const wizardSteps = allSteps.filter(step => \n    step.userTypes.includes(userData.userType)\n  );\n\n  // Calculate progress\n  const progress = wizardSteps.length > 0 ? ((currentStep + 1) / wizardSteps.length) * 100 : 0;\n\n  // Validate current step\n  const validateCurrentStep = (): boolean => {\n    const errors: string[] = [];\n    const step = wizardSteps[currentStep];\n    \n    if (!step) return false;\n    \n    switch (step.id) {\n      case 'user-type':\n        if (!userData.userType) {\n          errors.push('Please select an account type');\n        }\n        break;\n      case 'basic-info':\n        if (!userData.firstName.trim()) errors.push('First name is required');\n        if (!userData.lastName.trim()) errors.push('Last name is required');\n        if (!userData.email.trim()) errors.push('Email is required');\n        if (!userData.username.trim()) errors.push('Username is required');\n        if (!userData.phone.trim()) errors.push('Phone number is required');\n        break;\n    }\n    \n    setValidationErrors(errors);\n    return errors.length === 0;\n  };\n\n  // Handle next step\n  const handleNext = () => {\n    if (validateCurrentStep()) {\n      if (currentStep < wizardSteps.length - 1) {\n        setCurrentStep(prev => prev + 1);\n      } else {\n        handleSubmit();\n      }\n    }\n  };\n\n  // Handle previous step\n  const handlePrevious = () => {\n    if (currentStep > 0) {\n      setCurrentStep(prev => prev - 1);\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async () => {\n    try {\n      setLoading(true);\n      \n      const response = await fetch('/api/admin/users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`\n        },\n        body: JSON.stringify({\n          ...userData,\n          role: userData.userType,\n          password: 'temp123!' // This should be generated or collected\n        })\n      });\n      \n      if (response.ok) {\n        toast({\n          title: \"Success!\",\n          description: `${userData.userType} account created successfully`,\n          variant: \"default\"\n        });\n        \n        // Navigate back to appropriate management page\n        navigate(`/dashboard/admin/${userData.userType}-management`);\n      } else {\n        throw new Error('Failed to create account');\n      }\n    } catch (error) {\n      console.error('Error creating user:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create user account\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const currentStepData = wizardSteps[currentStep];\n  const CurrentStepComponent = currentStepData?.component;\n\n  return (\n    <OnboardingContainer>\n      {/* Header */}\n      <HeaderSection\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6 }}\n      >\n        <h1>🚀 Complete Data Collection</h1>\n        <p>\n          Comprehensive onboarding system for users, clients, and trainers. \n          Collect all necessary data for your fitness platform.\n        </p>\n      </HeaderSection>\n\n      {/* Wizard Container */}\n      <WizardContainer\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6, delay: 0.2 }}\n      >\n        {/* Progress Section */}\n        <ProgressSection>\n          <div className=\"progress-header\">\n            <h2>\n              {currentStepData?.title || 'Account Setup'}\n            </h2>\n            <div className=\"progress-info\">\n              Step {currentStep + 1} of {wizardSteps.length}\n            </div>\n          </div>\n          <LinearProgress \n            variant=\"determinate\" \n            value={progress}\n            sx={{\n              height: 8,\n              borderRadius: 4,\n              backgroundColor: 'rgba(59, 130, 246, 0.2)',\n              '& .MuiLinearProgress-bar': {\n                background: 'linear-gradient(135deg, #3b82f6 0%, #00ffff 100%)',\n                borderRadius: 4\n              }\n            }}\n          />\n        </ProgressSection>\n\n        {/* Validation Errors */}\n        {validationErrors.length > 0 && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            <AlertTitle>Please fix the following errors:</AlertTitle>\n            <ul>\n              {validationErrors.map((error, index) => (\n                <li key={index}>{error}</li>\n              ))}\n            </ul>\n          </Alert>\n        )}\n\n        {/* Current Step Content */}\n        <AnimatePresence mode=\"wait\">\n          {CurrentStepComponent && (\n            <motion.div\n              key={currentStep}\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -20 }}\n              transition={{ duration: 0.3 }}\n            >\n              <FormSection>\n                <h3>\n                  {currentStepData.description}\n                </h3>\n                <CurrentStepComponent \n                  userData={userData}\n                  setUserData={updateUserData}\n                />\n              </FormSection>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* Navigation Buttons */}\n        <NavigationButtons>\n          <ActionButton\n            variant=\"secondary\"\n            onClick={handlePrevious}\n            disabled={currentStep === 0}\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n          >\n            <ArrowBack />\n            Previous\n          </ActionButton>\n          \n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <ActionButton\n              variant=\"secondary\"\n              onClick={() => navigate('/dashboard/admin/overview')}\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n            >\n              <Close />\n              Cancel\n            </ActionButton>\n            \n            <ActionButton\n              variant=\"primary\"\n              onClick={handleNext}\n              disabled={loading}\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n            >\n              {currentStep === wizardSteps.length - 1 ? (\n                loading ? 'Creating...' : 'Create Account'\n              ) : (\n                'Next'\n              )}\n              {currentStep === wizardSteps.length - 1 ? <Send /> : <ArrowForward />}\n            </ActionButton>\n          </Box>\n        </NavigationButtons>\n      </WizardContainer>\n    </OnboardingContainer>\n  );\n};\n\nexport default UnifiedOnboardingWizard;"