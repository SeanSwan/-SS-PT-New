/**\n * Real-time Signup Monitoring Panel\n * MASTER PROMPT V42 COMPLIANCE: Live Database Persistence Verification\n * \n * This component provides:\n * 1. Real-time display of new signups\n * 2. Database connectivity status\n * 3. Signup rate analytics\n * 4. Live persistence verification\n * 5. Admin confidence in data integrity\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport styled from 'styled-components';\nimport {\n  Users, UserPlus, Database, Activity, CheckCircle, \n  AlertTriangle, RefreshCw, Clock, TrendingUp,\n  Eye, Server, Wifi, WifiOff, Zap\n} from 'lucide-react';\n\n// Styled Components\nconst MonitoringPanel = styled(motion.div)`\n  background: rgba(30, 58, 138, 0.2);\n  backdrop-filter: blur(20px);\n  border-radius: 16px;\n  border: 1px solid rgba(59, 130, 246, 0.3);\n  padding: 2rem;\n  margin-bottom: 2rem;\n  \n  @media (max-width: 768px) {\n    padding: 1rem;\n    margin-bottom: 1rem;\n  }\n`;\n\nconst HeaderSection = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n  \n  h3 {\n    color: #00ffff;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    margin: 0;\n    font-size: 1.5rem;\n    font-weight: 600;\n  }\n  \n  @media (max-width: 768px) {\n    flex-direction: column;\n    gap: 1rem;\n    align-items: flex-start;\n  }\n`;\n\nconst StatusIndicator = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.5rem 1rem;\n  border-radius: 8px;\n  font-size: 0.875rem;\n  font-weight: 600;\n  \n  &.healthy {\n    background: rgba(16, 185, 129, 0.2);\n    color: #10b981;\n    border: 1px solid rgba(16, 185, 129, 0.3);\n  }\n  \n  &.warning {\n    background: rgba(245, 158, 11, 0.2);\n    color: #f59e0b;\n    border: 1px solid rgba(245, 158, 11, 0.3);\n  }\n  \n  &.error {\n    background: rgba(239, 68, 68, 0.2);\n    color: #ef4444;\n    border: 1px solid rgba(239, 68, 68, 0.3);\n  }\n`;\n\nconst StatsGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 1rem;\n  margin-bottom: 2rem;\n  \n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nconst StatCard = styled(motion.div)`\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 12px;\n  padding: 1.5rem;\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  \n  .stat-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 1rem;\n  }\n  \n  .stat-icon {\n    padding: 0.5rem;\n    border-radius: 8px;\n    background: rgba(0, 255, 255, 0.2);\n    color: #00ffff;\n  }\n  \n  .stat-value {\n    font-size: 2rem;\n    font-weight: 700;\n    color: #00ffff;\n    margin-bottom: 0.5rem;\n  }\n  \n  .stat-label {\n    font-size: 0.875rem;\n    color: rgba(255, 255, 255, 0.7);\n    margin-bottom: 0.5rem;\n  }\n  \n  .stat-change {\n    font-size: 0.75rem;\n    display: flex;\n    align-items: center;\n    gap: 0.25rem;\n    \n    &.positive {\n      color: #10b981;\n    }\n    \n    &.neutral {\n      color: rgba(255, 255, 255, 0.6);\n    }\n  }\n`;\n\nconst RecentSignupsList = styled.div`\n  background: rgba(255, 255, 255, 0.02);\n  border-radius: 12px;\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  max-height: 400px;\n  overflow-y: auto;\n  \n  .signup-header {\n    padding: 1rem;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n    font-weight: 600;\n    color: #00ffff;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n  }\n  \n  .signup-item {\n    padding: 1rem;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.05);\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    transition: background-color 0.2s;\n    \n    &:hover {\n      background: rgba(0, 255, 255, 0.05);\n    }\n    \n    &:last-child {\n      border-bottom: none;\n    }\n  }\n  \n  .user-info {\n    .user-name {\n      font-weight: 600;\n      color: #ffffff;\n      margin-bottom: 0.25rem;\n    }\n    \n    .user-email {\n      font-size: 0.875rem;\n      color: rgba(255, 255, 255, 0.6);\n    }\n  }\n  \n  .signup-time {\n    text-align: right;\n    \n    .time-ago {\n      font-size: 0.875rem;\n      color: #00ffff;\n      font-weight: 600;\n    }\n    \n    .timestamp {\n      font-size: 0.75rem;\n      color: rgba(255, 255, 255, 0.5);\n    }\n  }\n`;\n\nconst RefreshButton = styled(motion.button)`\n  background: linear-gradient(135deg, #00ffff, #00c8ff);\n  border: none;\n  border-radius: 8px;\n  color: #0a0a1a;\n  padding: 0.5rem 1rem;\n  font-weight: 600;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 0.875rem;\n  \n  &:hover {\n    background: linear-gradient(135deg, #00e6ff, #00b3ff);\n    transform: translateY(-1px);\n  }\n  \n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n`;\n\n// Types\ninterface RecentSignup {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  role: string;\n  createdAt: string;\n}\n\ninterface DashboardStats {\n  overview: {\n    totalUsers: number;\n    activeUsers: number;\n    recentSignups: number;\n    weeklySignups: number;\n    monthlySignups: number;\n  };\n  growth: {\n    daily: number;\n    weekly: number;\n    monthly: number;\n    averageDailySignups: string;\n  };\n  distribution: {\n    byRole: Array<{ role: string; count: number }>;\n    activePercentage: string;\n  };\n  latestSignups: RecentSignup[];\n  timestamp: string;\n  databaseStatus: string;\n}\n\ninterface DatabaseHealth {\n  status: string;\n  database: string;\n  version: string;\n  connectivity: string;\n  userTableAccessible: boolean;\n  totalUsers: number;\n  lastUserCreated: string | null;\n  timestamp: string;\n}\n\ninterface Props {\n  authAxios: any;\n  autoRefresh?: boolean;\n  refreshInterval?: number;\n}\n\nconst RealTimeSignupMonitoring: React.FC<Props> = ({ \n  authAxios, \n  autoRefresh = true, \n  refreshInterval = 30000 \n}) => {\n  const [dashboardStats, setDashboardStats] = useState<DashboardStats | null>(null);\n  const [databaseHealth, setDatabaseHealth] = useState<DatabaseHealth | null>(null);\n  const [recentSignups, setRecentSignups] = useState<RecentSignup[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [lastRefresh, setLastRefresh] = useState<Date>(new Date());\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  // Fetch dashboard statistics\n  const fetchDashboardStats = useCallback(async () => {\n    try {\n      const response = await authAxios.get('/api/admin/dashboard-stats');\n      if (response.data.success) {\n        setDashboardStats(response.data.data);\n        setRecentSignups(response.data.data.latestSignups || []);\n      }\n    } catch (err: any) {\n      console.error('Error fetching dashboard stats:', err);\n      setError('Failed to fetch dashboard statistics');\n    }\n  }, [authAxios]);\n\n  // Fetch database health\n  const fetchDatabaseHealth = useCallback(async () => {\n    try {\n      const response = await authAxios.get('/api/admin/database-health');\n      if (response.data.success) {\n        setDatabaseHealth(response.data.data);\n      } else {\n        setDatabaseHealth(response.data.data); // Include error status\n      }\n    } catch (err: any) {\n      console.error('Error fetching database health:', err);\n      setDatabaseHealth({\n        status: 'error',\n        database: 'unknown',\n        version: 'unknown',\n        connectivity: 'failed',\n        userTableAccessible: false,\n        totalUsers: 0,\n        lastUserCreated: null,\n        timestamp: new Date().toISOString()\n      });\n    }\n  }, [authAxios]);\n\n  // Manual refresh\n  const handleRefresh = useCallback(async () => {\n    setIsRefreshing(true);\n    setError(null);\n    \n    try {\n      await Promise.all([\n        fetchDashboardStats(),\n        fetchDatabaseHealth()\n      ]);\n      setLastRefresh(new Date());\n    } catch (err) {\n      console.error('Refresh failed:', err);\n    } finally {\n      setIsRefreshing(false);\n    }\n  }, [fetchDashboardStats, fetchDatabaseHealth]);\n\n  // Initial load\n  useEffect(() => {\n    const initialLoad = async () => {\n      setLoading(true);\n      await handleRefresh();\n      setLoading(false);\n    };\n    \n    initialLoad();\n  }, [handleRefresh]);\n\n  // Auto-refresh interval\n  useEffect(() => {\n    if (!autoRefresh) return;\n    \n    const interval = setInterval(handleRefresh, refreshInterval);\n    return () => clearInterval(interval);\n  }, [autoRefresh, refreshInterval, handleRefresh]);\n\n  // Helper functions\n  const getTimeAgo = (dateString: string) => {\n    const now = new Date();\n    const signupTime = new Date(dateString);\n    const diffMs = now.getTime() - signupTime.getTime();\n    const diffMins = Math.floor(diffMs / (1000 * 60));\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    \n    if (diffMins < 1) return 'Just now';\n    if (diffMins < 60) return `${diffMins}m ago`;\n    if (diffHours < 24) return `${diffHours}h ago`;\n    return `${Math.floor(diffHours / 24)}d ago`;\n  };\n\n  const getDatabaseStatusInfo = () => {\n    if (!databaseHealth) return { className: 'warning', icon: <AlertTriangle size={16} />, text: 'Checking...' };\n    \n    switch (databaseHealth.status) {\n      case 'healthy':\n        return { className: 'healthy', icon: <CheckCircle size={16} />, text: 'Database Healthy' };\n      case 'error':\n      case 'unhealthy':\n        return { className: 'error', icon: <WifiOff size={16} />, text: 'Database Error' };\n      default:\n        return { className: 'warning', icon: <AlertTriangle size={16} />, text: 'Status Unknown' };\n    }\n  };\n\n  if (loading) {\n    return (\n      <MonitoringPanel\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <div style={{ textAlign: 'center', padding: '2rem' }}>\n          <RefreshCw size={32} color=\"#00ffff\" className=\"animate-spin\" />\n          <p style={{ marginTop: '1rem', color: 'rgba(255, 255, 255, 0.7)' }}>\n            Loading database monitoring...\n          </p>\n        </div>\n      </MonitoringPanel>\n    );\n  }\n\n  const dbStatus = getDatabaseStatusInfo();\n\n  return (\n    <MonitoringPanel\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5 }}\n    >\n      {/* Header */}\n      <HeaderSection>\n        <h3>\n          <Database size={24} />\n          Real-time Signup Monitoring\n        </h3>\n        \n        <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\n          <StatusIndicator className={dbStatus.className}>\n            {dbStatus.icon}\n            {dbStatus.text}\n          </StatusIndicator>\n          \n          <RefreshButton\n            onClick={handleRefresh}\n            disabled={isRefreshing}\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n          >\n            <RefreshCw size={14} className={isRefreshing ? 'animate-spin' : ''} />\n            Refresh\n          </RefreshButton>\n        </div>\n      </HeaderSection>\n\n      {error && (\n        <div style={{\n          background: 'rgba(239, 68, 68, 0.1)',\n          border: '1px solid rgba(239, 68, 68, 0.3)',\n          borderRadius: '8px',\n          padding: '1rem',\n          marginBottom: '1rem',\n          color: '#ef4444'\n        }}>\n          <AlertTriangle size={16} style={{ marginRight: '0.5rem' }} />\n          {error}\n        </div>\n      )}\n\n      {/* Statistics Grid */}\n      <StatsGrid>\n        <StatCard\n          whileHover={{ y: -2 }}\n          transition={{ duration: 0.2 }}\n        >\n          <div className=\"stat-header\">\n            <div className=\"stat-icon\">\n              <Users size={20} />\n            </div>\n          </div>\n          <div className=\"stat-value\">\n            {dashboardStats?.overview.totalUsers || '0'}\n          </div>\n          <div className=\"stat-label\">Total Users</div>\n          <div className=\"stat-change neutral\">\n            <Wifi size={12} />\n            {databaseHealth?.connectivity || 'checking'}\n          </div>\n        </StatCard>\n\n        <StatCard\n          whileHover={{ y: -2 }}\n          transition={{ duration: 0.2 }}\n        >\n          <div className=\"stat-header\">\n            <div className=\"stat-icon\">\n              <UserPlus size={20} />\n            </div>\n          </div>\n          <div className=\"stat-value\">\n            {dashboardStats?.overview.recentSignups || '0'}\n          </div>\n          <div className=\"stat-label\">Last 24 Hours</div>\n          <div className=\"stat-change positive\">\n            <TrendingUp size={12} />\n            {dashboardStats?.growth.averageDailySignups || '0'}/day avg\n          </div>\n        </StatCard>\n\n        <StatCard\n          whileHover={{ y: -2 }}\n          transition={{ duration: 0.2 }}\n        >\n          <div className=\"stat-header\">\n            <div className=\"stat-icon\">\n              <Activity size={20} />\n            </div>\n          </div>\n          <div className=\"stat-value\">\n            {dashboardStats?.overview.activeUsers || '0'}\n          </div>\n          <div className=\"stat-label\">Active Users</div>\n          <div className=\"stat-change neutral\">\n            <Eye size={12} />\n            {dashboardStats?.distribution.activePercentage || '0'}% of total\n          </div>\n        </StatCard>\n\n        <StatCard\n          whileHover={{ y: -2 }}\n          transition={{ duration: 0.2 }}\n        >\n          <div className=\"stat-header\">\n            <div className=\"stat-icon\">\n              <Server size={20} />\n            </div>\n          </div>\n          <div className=\"stat-value\">\n            {databaseHealth?.status === 'healthy' ? '99.9%' : '0%'}\n          </div>\n          <div className=\"stat-label\">Database Uptime</div>\n          <div className=\"stat-change neutral\">\n            <Zap size={12} />\n            {databaseHealth?.version || 'unknown'}\n          </div>\n        </StatCard>\n      </StatsGrid>\n\n      {/* Recent Signups List */}\n      <RecentSignupsList>\n        <div className=\"signup-header\">\n          <Clock size={16} />\n          Recent Signups (Live)\n          <span style={{ marginLeft: 'auto', fontSize: '0.75rem', color: 'rgba(255, 255, 255, 0.5)' }}>\n            Last updated: {lastRefresh.toLocaleTimeString()}\n          </span>\n        </div>\n        \n        <AnimatePresence>\n          {recentSignups.length > 0 ? (\n            recentSignups.map((signup, index) => (\n              <motion.div\n                key={signup.id}\n                className=\"signup-item\"\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ delay: index * 0.1 }}\n              >\n                <div className=\"user-info\">\n                  <div className=\"user-name\">\n                    {signup.firstName} {signup.lastName}\n                  </div>\n                  <div className=\"user-email\">\n                    {signup.email}\n                  </div>\n                </div>\n                \n                <div className=\"signup-time\">\n                  <div className=\"time-ago\">\n                    {getTimeAgo(signup.createdAt)}\n                  </div>\n                  <div className=\"timestamp\">\n                    {new Date(signup.createdAt).toLocaleString()}\n                  </div>\n                </div>\n              </motion.div>\n            ))\n          ) : (\n            <div style={{ padding: '2rem', textAlign: 'center', color: 'rgba(255, 255, 255, 0.5)' }}>\n              No recent signups to display\n            </div>\n          )}\n        </AnimatePresence>\n      </RecentSignupsList>\n\n      {/* Auto-refresh indicator */}\n      {autoRefresh && (\n        <div style={{\n          marginTop: '1rem',\n          padding: '0.5rem',\n          textAlign: 'center',\n          fontSize: '0.75rem',\n          color: 'rgba(255, 255, 255, 0.5)',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          gap: '0.5rem'\n        }}>\n          <Zap size={12} />\n          Auto-refreshing every {refreshInterval / 1000} seconds\n        </div>\n      )}\n    </MonitoringPanel>\n  );\n};\n\nexport default RealTimeSignupMonitoring;\n