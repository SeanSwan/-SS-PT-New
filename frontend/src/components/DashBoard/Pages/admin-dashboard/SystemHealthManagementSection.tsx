/**
 * SystemHealthManagementSection.tsx
 * ================================
 * 
 * Comprehensive System Health Management Interface
 * Real-time monitoring of all SwanStudios platform services
 * Styled with Stellar Command Center theme
 * 
 * Features:
 * - Real-time service monitoring and health checks
 * - Performance metrics and alerts
 * - MCP server status and management
 * - Database and API gateway monitoring
 * - Interactive service restart capabilities
 * - WCAG AA accessibility compliance
 */

import React, { useState, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport styled from 'styled-components';\nimport {\n  Monitor, Server, Database, Activity, AlertTriangle,\n  CheckCircle, RefreshCw, Zap, Cpu, HardDrive,\n  Wifi, Clock, BarChart3, TrendingUp, TrendingDown,\n  Play, Pause, RotateCcw, Settings, Eye\n} from 'lucide-react';\n\n// === STYLED COMPONENTS ===\nconst HealthContainer = styled.div`\n  padding: 0;\n`;\n\nconst HealthGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 1.5rem;\n  margin-bottom: 2rem;\n`;\n\nconst ServiceCard = styled(motion.div)<{ status: 'healthy' | 'warning' | 'error' | 'offline' }>`\n  background: rgba(30, 58, 138, 0.2);\n  backdrop-filter: blur(20px);\n  border-radius: 16px;\n  border: 1px solid ${props => {\n    switch (props.status) {\n      case 'healthy': return 'rgba(16, 185, 129, 0.3)';\n      case 'warning': return 'rgba(245, 158, 11, 0.3)';\n      case 'error': return 'rgba(239, 68, 68, 0.3)';\n      default: return 'rgba(107, 114, 128, 0.3)';\n    }\n  }};\n  padding: 1.5rem;\n  transition: all 0.3s ease;\n  \n  &:hover {\n    background: rgba(30, 58, 138, 0.3);\n    transform: translateY(-4px);\n    box-shadow: 0 12px 40px rgba(59, 130, 246, 0.2);\n  }\n`;\n\nconst ServiceHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 1rem;\n`;\n\nconst ServiceInfo = styled.div`\n  flex: 1;\n`;\n\nconst ServiceName = styled.h3`\n  margin: 0 0 0.5rem 0;\n  font-size: 1.1rem;\n  font-weight: 600;\n  color: #ffffff;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n`;\n\nconst ServiceDescription = styled.p`\n  margin: 0;\n  font-size: 0.875rem;\n  color: rgba(255, 255, 255, 0.7);\n`;\n\nconst StatusIndicator = styled.div<{ status: 'healthy' | 'warning' | 'error' | 'offline' }>`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.5rem 0.75rem;\n  border-radius: 8px;\n  font-size: 0.75rem;\n  font-weight: 600;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  background: ${props => {\n    switch (props.status) {\n      case 'healthy': return 'rgba(16, 185, 129, 0.2)';\n      case 'warning': return 'rgba(245, 158, 11, 0.2)';\n      case 'error': return 'rgba(239, 68, 68, 0.2)';\n      default: return 'rgba(107, 114, 128, 0.2)';\n    }\n  }};\n  color: ${props => {\n    switch (props.status) {\n      case 'healthy': return '#10b981';\n      case 'warning': return '#f59e0b';\n      case 'error': return '#ef4444';\n      default: return '#6b7280';\n    }\n  }};\n`;\n\nconst StatusDot = styled.div<{ status: 'healthy' | 'warning' | 'error' | 'offline' }>`\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  background: currentColor;\n  animation: ${props => props.status === 'healthy' ? 'pulse 2s infinite' : 'none'};\n  \n  @keyframes pulse {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.5; }\n  }\n`;\n\nconst MetricsGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 1rem;\n  margin: 1rem 0;\n  \n  @media (max-width: 768px) {\n    grid-template-columns: repeat(2, 1fr);\n    gap: 0.75rem;\n  }\n`;\n\nconst MetricItem = styled.div`\n  text-align: center;\n`;\n\nconst MetricValue = styled.div<{ status?: 'good' | 'warning' | 'critical' }>`\n  font-size: 1.25rem;\n  font-weight: 700;\n  margin-bottom: 0.25rem;\n  color: ${props => {\n    switch (props.status) {\n      case 'good': return '#10b981';\n      case 'warning': return '#f59e0b';\n      case 'critical': return '#ef4444';\n      default: return '#00ffff';\n    }\n  }};\n`;\n\nconst MetricLabel = styled.div`\n  font-size: 0.75rem;\n  color: rgba(255, 255, 255, 0.6);\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n`;\n\nconst ActionButtons = styled.div`\n  display: flex;\n  gap: 0.5rem;\n  margin-top: 1rem;\n  padding-top: 1rem;\n  border-top: 1px solid rgba(255, 255, 255, 0.1);\n`;\n\nconst ActionButton = styled(motion.button)<{ variant?: 'primary' | 'secondary' | 'danger' }>`\n  flex: 1;\n  padding: 0.75rem;\n  border-radius: 8px;\n  border: 1px solid ${props => {\n    switch (props.variant) {\n      case 'primary': return 'rgba(59, 130, 246, 0.3)';\n      case 'danger': return 'rgba(239, 68, 68, 0.3)';\n      default: return 'rgba(107, 114, 128, 0.3)';\n    }\n  }};\n  background: ${props => {\n    switch (props.variant) {\n      case 'primary': return 'rgba(59, 130, 246, 0.1)';\n      case 'danger': return 'rgba(239, 68, 68, 0.1)';\n      default: return 'rgba(107, 114, 128, 0.1)';\n    }\n  }};\n  color: ${props => {\n    switch (props.variant) {\n      case 'primary': return '#3b82f6';\n      case 'danger': return '#ef4444';\n      default: return '#9ca3af';\n    }\n  }};\n  font-size: 0.875rem;\n  font-weight: 600;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n  transition: all 0.3s ease;\n  \n  &:hover {\n    background: ${props => {\n      switch (props.variant) {\n        case 'primary': return 'rgba(59, 130, 246, 0.2)';\n        case 'danger': return 'rgba(239, 68, 68, 0.2)';\n        default: return 'rgba(107, 114, 128, 0.2)';\n      }\n    }};\n    transform: translateY(-1px);\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    transform: none;\n  }\n`;\n\nconst OverviewStats = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 1.5rem;\n  margin-bottom: 2rem;\n`;\n\nconst StatCard = styled(motion.div)`\n  background: rgba(30, 58, 138, 0.2);\n  backdrop-filter: blur(20px);\n  border-radius: 12px;\n  border: 1px solid rgba(59, 130, 246, 0.3);\n  padding: 1.5rem;\n  text-align: center;\n`;\n\nconst StatNumber = styled.div`\n  font-size: 2rem;\n  font-weight: 700;\n  color: #00ffff;\n  margin-bottom: 0.5rem;\n`;\n\nconst StatTitle = styled.div`\n  font-size: 0.875rem;\n  color: rgba(255, 255, 255, 0.7);\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n`;\n\n// === INTERFACES ===\ninterface ServiceHealth {\n  id: string;\n  name: string;\n  description: string;\n  status: 'healthy' | 'warning' | 'error' | 'offline';\n  uptime: number;\n  responseTime: number;\n  errorRate: number;\n  throughput: number;\n  lastCheck: string;\n  details: string;\n  actions: {\n    canRestart: boolean;\n    canViewLogs: boolean;\n    canConfigure: boolean;\n  };\n}\n\ninterface SystemStats {\n  totalServices: number;\n  healthyServices: number;\n  warningServices: number;\n  errorServices: number;\n  avgResponseTime: number;\n  totalUptime: number;\n}\n\n// === MAIN COMPONENT ===\nconst SystemHealthManagementSection: React.FC = () => {\n  const [services, setServices] = useState<ServiceHealth[]>([]);\n  const [stats, setStats] = useState<SystemStats>({\n    totalServices: 0,\n    healthyServices: 0,\n    warningServices: 0,\n    errorServices: 0,\n    avgResponseTime: 0,\n    totalUptime: 0\n  });\n  const [loading, setLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(false);\n\n  // Mock data for system health\n  const mockServices: ServiceHealth[] = [\n    {\n      id: 'api-gateway',\n      name: 'API Gateway',\n      description: 'Main application programming interface',\n      status: 'healthy',\n      uptime: 99.97,\n      responseTime: 45,\n      errorRate: 0.03,\n      throughput: 1247,\n      lastCheck: new Date().toISOString(),\n      details: 'All endpoints responding normally',\n      actions: { canRestart: true, canViewLogs: true, canConfigure: true }\n    },\n    {\n      id: 'database',\n      name: 'PostgreSQL Database',\n      description: 'Primary data storage and retrieval',\n      status: 'healthy',\n      uptime: 99.99,\n      responseTime: 12,\n      errorRate: 0.01,\n      throughput: 3421,\n      lastCheck: new Date().toISOString(),\n      details: 'All connections stable',\n      actions: { canRestart: false, canViewLogs: true, canConfigure: true }\n    },\n    {\n      id: 'workout-mcp',\n      name: 'Workout MCP Server',\n      description: 'Workout generation and management',\n      status: 'healthy',\n      uptime: 98.5,\n      responseTime: 67,\n      errorRate: 0.15,\n      throughput: 892,\n      lastCheck: new Date().toISOString(),\n      details: 'Recently restarted, monitoring performance',\n      actions: { canRestart: true, canViewLogs: true, canConfigure: true }\n    },\n    {\n      id: 'yolo-ai',\n      name: 'YOLO AI Service',\n      description: 'Computer vision and form analysis',\n      status: 'warning',\n      uptime: 97.2,\n      responseTime: 156,\n      errorRate: 0.8,\n      throughput: 345,\n      lastCheck: new Date().toISOString(),\n      details: 'High latency detected, investigating',\n      actions: { canRestart: true, canViewLogs: true, canConfigure: true }\n    },\n    {\n      id: 'video-processing',\n      name: 'Video Processing',\n      description: 'Media upload and transcoding',\n      status: 'healthy',\n      uptime: 99.1,\n      responseTime: 230,\n      errorRate: 0.21,\n      throughput: 678,\n      lastCheck: new Date().toISOString(),\n      details: 'Processing queue normal',\n      actions: { canRestart: true, canViewLogs: true, canConfigure: true }\n    },\n    {\n      id: 'notification-service',\n      name: 'Notification Service',\n      description: 'Email and push notifications',\n      status: 'healthy',\n      uptime: 99.5,\n      responseTime: 89,\n      errorRate: 0.05,\n      throughput: 1834,\n      lastCheck: new Date().toISOString(),\n      details: 'All notification channels operational',\n      actions: { canRestart: true, canViewLogs: true, canConfigure: true }\n    }\n  ];\n\n  // Load system health data\n  const loadSystemHealth = useCallback(async () => {\n    try {\n      setLoading(true);\n      \n      // TODO: Replace with real API call\n      // const response = await fetch('/api/admin/system-health');\n      // const data = await response.json();\n      \n      // For now, use mock data\n      setServices(mockServices);\n      \n      // Calculate stats\n      const totalServices = mockServices.length;\n      const healthyServices = mockServices.filter(s => s.status === 'healthy').length;\n      const warningServices = mockServices.filter(s => s.status === 'warning').length;\n      const errorServices = mockServices.filter(s => s.status === 'error').length;\n      const avgResponseTime = Math.round(\n        mockServices.reduce((sum, s) => sum + s.responseTime, 0) / totalServices\n      );\n      const totalUptime = Math.round(\n        mockServices.reduce((sum, s) => sum + s.uptime, 0) / totalServices\n      );\n      \n      setStats({\n        totalServices,\n        healthyServices,\n        warningServices,\n        errorServices,\n        avgResponseTime,\n        totalUptime\n      });\n    } catch (error) {\n      console.error('Error loading system health:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Refresh system health\n  const refreshSystemHealth = useCallback(async () => {\n    setRefreshing(true);\n    await loadSystemHealth();\n    setTimeout(() => setRefreshing(false), 1000);\n  }, [loadSystemHealth]);\n\n  // Load data on mount\n  useEffect(() => {\n    loadSystemHealth();\n    \n    // Set up real-time updates\n    const interval = setInterval(loadSystemHealth, 30000); // Refresh every 30 seconds\n    return () => clearInterval(interval);\n  }, [loadSystemHealth]);\n\n  // Service actions\n  const handleRestartService = async (serviceId: string) => {\n    console.log('Restarting service:', serviceId);\n    // TODO: Implement service restart API call\n  };\n\n  const handleViewLogs = (serviceId: string) => {\n    console.log('Viewing logs for service:', serviceId);\n    // TODO: Open logs modal or navigate to logs page\n  };\n\n  const handleConfigureService = (serviceId: string) => {\n    console.log('Configuring service:', serviceId);\n    // TODO: Open configuration modal\n  };\n\n  const getServiceIcon = (serviceId: string) => {\n    switch (serviceId) {\n      case 'api-gateway': return <Server size={20} />;\n      case 'database': return <Database size={20} />;\n      case 'workout-mcp': return <Activity size={20} />;\n      case 'yolo-ai': return <Cpu size={20} />;\n      case 'video-processing': return <Monitor size={20} />;\n      case 'notification-service': return <Zap size={20} />;\n      default: return <Monitor size={20} />;\n    }\n  };\n\n  const getMetricStatus = (value: number, type: 'responseTime' | 'errorRate' | 'uptime') => {\n    switch (type) {\n      case 'responseTime':\n        if (value < 100) return 'good';\n        if (value < 300) return 'warning';\n        return 'critical';\n      case 'errorRate':\n        if (value < 0.1) return 'good';\n        if (value < 1) return 'warning';\n        return 'critical';\n      case 'uptime':\n        if (value > 99.5) return 'good';\n        if (value > 98) return 'warning';\n        return 'critical';\n      default:\n        return 'good';\n    }\n  };\n\n  const formatUptime = (uptime: number) => {\n    return `${uptime.toFixed(2)}%`;\n  };\n\n  const formatResponseTime = (time: number) => {\n    return `${time}ms`;\n  };\n\n  const formatThroughput = (throughput: number) => {\n    if (throughput > 1000) {\n      return `${(throughput / 1000).toFixed(1)}k/s`;\n    }\n    return `${throughput}/s`;\n  };\n\n  if (loading) {\n    return (\n      <HealthContainer>\n        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '400px' }}>\n          <motion.div\n            animate={{ rotate: 360 }}\n            transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n          >\n            <RefreshCw size={32} color=\"#00ffff\" />\n          </motion.div>\n        </div>\n      </HealthContainer>\n    );\n  }\n\n  return (\n    <HealthContainer>\n      {/* System Overview Stats */}\n      <OverviewStats>\n        <StatCard whileHover={{ scale: 1.02 }}>\n          <StatNumber>{stats.totalServices}</StatNumber>\n          <StatTitle>Total Services</StatTitle>\n        </StatCard>\n        <StatCard whileHover={{ scale: 1.02 }}>\n          <StatNumber>{stats.healthyServices}</StatNumber>\n          <StatTitle>Healthy</StatTitle>\n        </StatCard>\n        <StatCard whileHover={{ scale: 1.02 }}>\n          <StatNumber>{stats.warningServices}</StatNumber>\n          <StatTitle>Warnings</StatTitle>\n        </StatCard>\n        <StatCard whileHover={{ scale: 1.02 }}>\n          <StatNumber>{stats.avgResponseTime}ms</StatNumber>\n          <StatTitle>Avg Response</StatTitle>\n        </StatCard>\n        <StatCard whileHover={{ scale: 1.02 }}>\n          <StatNumber>{formatUptime(stats.totalUptime)}</StatNumber>\n          <StatTitle>Overall Uptime</StatTitle>\n        </StatCard>\n      </OverviewStats>\n\n      {/* Services Grid */}\n      <HealthGrid>\n        <AnimatePresence>\n          {services.map((service, index) => (\n            <ServiceCard\n              key={service.id}\n              status={service.status}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              transition={{ duration: 0.3, delay: index * 0.05 }}\n              whileHover={{ scale: 1.02 }}\n            >\n              <ServiceHeader>\n                <ServiceInfo>\n                  <ServiceName>\n                    {getServiceIcon(service.id)}\n                    {service.name}\n                  </ServiceName>\n                  <ServiceDescription>{service.description}</ServiceDescription>\n                </ServiceInfo>\n                <StatusIndicator status={service.status}>\n                  <StatusDot status={service.status} />\n                  {service.status}\n                </StatusIndicator>\n              </ServiceHeader>\n\n              <MetricsGrid>\n                <MetricItem>\n                  <MetricValue status={getMetricStatus(service.uptime, 'uptime')}>\n                    {formatUptime(service.uptime)}\n                  </MetricValue>\n                  <MetricLabel>Uptime</MetricLabel>\n                </MetricItem>\n                <MetricItem>\n                  <MetricValue status={getMetricStatus(service.responseTime, 'responseTime')}>\n                    {formatResponseTime(service.responseTime)}\n                  </MetricValue>\n                  <MetricLabel>Response</MetricLabel>\n                </MetricItem>\n                <MetricItem>\n                  <MetricValue status={getMetricStatus(service.errorRate, 'errorRate')}>\n                    {service.errorRate.toFixed(2)}%\n                  </MetricValue>\n                  <MetricLabel>Error Rate</MetricLabel>\n                </MetricItem>\n                <MetricItem>\n                  <MetricValue>\n                    {formatThroughput(service.throughput)}\n                  </MetricValue>\n                  <MetricLabel>Throughput</MetricLabel>\n                </MetricItem>\n              </MetricsGrid>\n\n              <div style={{ \n                fontSize: '0.875rem', \n                color: 'rgba(255, 255, 255, 0.7)', \n                margin: '1rem 0',\n                padding: '0.75rem',\n                background: 'rgba(0, 0, 0, 0.2)',\n                borderRadius: '8px'\n              }}>\n                {service.details}\n              </div>\n\n              <ActionButtons>\n                {service.actions.canRestart && (\n                  <ActionButton\n                    variant=\"primary\"\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                    onClick={() => handleRestartService(service.id)}\n                  >\n                    <RotateCcw size={16} />\n                    Restart\n                  </ActionButton>\n                )}\n                {service.actions.canViewLogs && (\n                  <ActionButton\n                    variant=\"secondary\"\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                    onClick={() => handleViewLogs(service.id)}\n                  >\n                    <Eye size={16} />\n                    Logs\n                  </ActionButton>\n                )}\n                {service.actions.canConfigure && (\n                  <ActionButton\n                    variant=\"secondary\"\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                    onClick={() => handleConfigureService(service.id)}\n                  >\n                    <Settings size={16} />\n                    Config\n                  </ActionButton>\n                )}\n              </ActionButtons>\n            </ServiceCard>\n          ))}\n        </AnimatePresence>\n      </HealthGrid>\n\n      {/* Refresh Button */}\n      <div style={{ display: 'flex', justifyContent: 'center', marginTop: '2rem' }}>\n        <ActionButton\n          variant=\"primary\"\n          style={{ minWidth: '150px' }}\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={refreshSystemHealth}\n          disabled={refreshing}\n        >\n          <motion.div\n            animate={refreshing ? { rotate: 360 } : { rotate: 0 }}\n            transition={{ duration: 1, repeat: refreshing ? Infinity : 0, ease: 'linear' }}\n          >\n            <RefreshCw size={16} />\n          </motion.div>\n          {refreshing ? 'Refreshing...' : 'Refresh All'}\n        </ActionButton>\n      </div>\n    </HealthContainer>\n  );\n};\n\nexport default SystemHealthManagementSection;"