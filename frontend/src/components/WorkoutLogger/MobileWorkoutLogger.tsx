/**\n * Mobile Workout Logger Component\n * ===============================\n * \n * Touch-optimized, mobile-first workout logging interface for trainers\n * Designed for tablet and smartphone use in gym environments\n * \n * Key Features:\n * - Large touch targets (min 44px) for finger-friendly interaction\n * - Gesture-based navigation (swipe between exercises, sets)\n * - Voice input for hands-free logging\n * - Haptic feedback for tactile responses\n * - Offline-capable with sync when connection restored\n * - One-handed operation support\n * - Auto-save with visual feedback\n * \n * Part of SwanStudios Mobile-First Optimization - Phase 1B\n */\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styled, { keyframes, css } from 'styled-components';\nimport { motion, AnimatePresence, PanInfo } from 'framer-motion';\nimport {\n  Plus, Minus, Mic, MicOff, Save, X, Check, ChevronLeft, ChevronRight,\n  Play, Pause, RotateCcw, Volume2, VolumeX, Wifi, WifiOff,\n  Timer, Weight, Target, Star, MessageSquare, Activity\n} from 'lucide-react';\n\nimport { useTouchGesture, useElementGesture } from '../PWA/TouchGestureProvider';\nimport { WorkoutClient, WorkoutExercise, ExerciseSet, WorkoutLoggerState } from './WorkoutLoggerTypes';\nimport { useAuth } from '../../context/AuthContext';\n\n// ==================== INTERFACES ====================\n\ninterface MobileWorkoutLoggerProps {\n  clientId: number;\n  onComplete: (workoutData: any) => void;\n  onCancel: () => void;\n  isOffline?: boolean;\n}\n\ninterface VoiceRecognition {\n  isSupported: boolean;\n  isListening: boolean;\n  transcript: string;\n  confidence: number;\n}\n\n// ==================== ANIMATIONS ====================\n\nconst slideInRight = keyframes`\n  from {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n`;\n\nconst slideInLeft = keyframes`\n  from {\n    transform: translateX(-100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n`;\n\nconst pulseGlow = keyframes`\n  0%, 100% {\n    box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);\n  }\n  50% {\n    box-shadow: 0 0 30px rgba(59, 130, 246, 0.6);\n  }\n`;\n\nconst breathe = keyframes`\n  0%, 100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.05);\n  }\n`;\n\n// ==================== STYLED COMPONENTS ====================\n\nconst MobileContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);\n  color: #f8fafc;\n  position: relative;\n  overflow: hidden;\n  user-select: none;\n  -webkit-user-select: none;\n  -webkit-touch-callout: none;\n  -webkit-tap-highlight-color: transparent;\n`;\n\nconst MobileHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px 20px;\n  background: rgba(30, 41, 59, 0.95);\n  backdrop-filter: blur(10px);\n  border-bottom: 1px solid rgba(71, 85, 105, 0.3);\n  position: sticky;\n  top: 0;\n  z-index: 100;\n  min-height: 60px;\n`;\n\nconst ClientInfo = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  flex: 1;\n`;\n\nconst ClientAvatar = styled.div`\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background: linear-gradient(135deg, #3b82f6, #1d4ed8);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 600;\n  font-size: 16px;\n  color: white;\n`;\n\nconst ClientDetails = styled.div`\n  flex: 1;\n`;\n\nconst ClientName = styled.h2`\n  margin: 0;\n  font-size: 18px;\n  font-weight: 600;\n  line-height: 1.2;\n`;\n\nconst SessionInfo = styled.p`\n  margin: 0;\n  font-size: 14px;\n  color: #94a3b8;\n  line-height: 1.2;\n`;\n\nconst HeaderActions = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n\nconst IconButton = styled.button<{ active?: boolean; variant?: 'primary' | 'secondary' | 'success' | 'warning' | 'danger' }>`\n  width: 44px;\n  height: 44px;\n  border-radius: 12px;\n  border: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  touch-action: manipulation;\n  \n  ${props => {\n    const colors = {\n      primary: { bg: '#3b82f6', activeBg: '#2563eb', text: '#ffffff' },\n      secondary: { bg: '#64748b', activeBg: '#475569', text: '#ffffff' },\n      success: { bg: '#10b981', activeBg: '#059669', text: '#ffffff' },\n      warning: { bg: '#f59e0b', activeBg: '#d97706', text: '#ffffff' },\n      danger: { bg: '#ef4444', activeBg: '#dc2626', text: '#ffffff' }\n    };\n    \n    const color = colors[props.variant || 'secondary'];\n    \n    return css`\n      background: ${props.active ? color.activeBg : color.bg};\n      color: ${color.text};\n      \n      &:hover {\n        background: ${color.activeBg};\n        transform: translateY(-1px);\n      }\n      \n      &:active {\n        transform: translateY(0) scale(0.95);\n      }\n      \n      ${props.active && css`\n        animation: ${pulseGlow} 2s infinite;\n      `}\n    `;\n  }}\n`;\n\nconst SwipeableContainer = styled(motion.div)`\n  flex: 1;\n  position: relative;\n  overflow: hidden;\n`;\n\nconst ExerciseCard = styled(motion.div)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(51, 65, 85, 0.9);\n  border-radius: 20px 20px 0 0;\n  padding: 24px 20px;\n  margin: 0 16px;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(71, 85, 105, 0.3);\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n`;\n\nconst ExerciseHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 20px;\n  padding-bottom: 16px;\n  border-bottom: 1px solid rgba(71, 85, 105, 0.3);\n`;\n\nconst ExerciseTitle = styled.h3`\n  margin: 0;\n  font-size: 20px;\n  font-weight: 600;\n  color: #3b82f6;\n  flex: 1;\n`;\n\nconst ExerciseNav = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n\nconst NavButton = styled(IconButton)`\n  width: 36px;\n  height: 36px;\n  font-size: 18px;\n`;\n\nconst SetsList = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  margin-bottom: 24px;\n`;\n\nconst SetCard = styled(motion.div)<{ completed?: boolean }>`\n  background: ${props => props.completed \n    ? 'linear-gradient(135deg, rgba(16, 185, 129, 0.2), rgba(5, 150, 105, 0.1))'\n    : 'rgba(71, 85, 105, 0.5)'\n  };\n  border: 1px solid ${props => props.completed ? '#10b981' : 'rgba(71, 85, 105, 0.5)'};\n  border-radius: 16px;\n  padding: 20px;\n  position: relative;\n  overflow: hidden;\n  \n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 3px;\n    background: ${props => props.completed \n      ? 'linear-gradient(90deg, #10b981, #059669)'\n      : 'linear-gradient(90deg, #3b82f6, #1d4ed8)'\n    };\n  }\n`;\n\nconst SetHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 16px;\n`;\n\nconst SetNumber = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 18px;\n  font-weight: 600;\n`;\n\nconst SetInputs = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 12px;\n  margin-bottom: 16px;\n  \n  @media (max-width: 480px) {\n    grid-template-columns: 1fr;\n    gap: 8px;\n  }\n`;\n\nconst InputGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nconst InputLabel = styled.label`\n  font-size: 14px;\n  font-weight: 500;\n  color: #cbd5e1;\n`;\n\nconst TouchInput = styled.input`\n  width: 100%;\n  height: 48px;\n  padding: 0 16px;\n  background: rgba(71, 85, 105, 0.8);\n  border: 2px solid rgba(71, 85, 105, 0.5);\n  border-radius: 12px;\n  color: #f8fafc;\n  font-size: 16px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n  \n  &:focus {\n    outline: none;\n    border-color: #3b82f6;\n    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n  }\n  \n  &::placeholder {\n    color: #94a3b8;\n  }\n  \n  /* Prevent zoom on iOS */\n  @media screen and (max-width: 480px) {\n    font-size: 16px;\n  }\n`;\n\nconst SliderContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  grid-column: 1 / -1;\n`;\n\nconst SliderTrack = styled.div`\n  position: relative;\n  height: 8px;\n  background: rgba(71, 85, 105, 0.5);\n  border-radius: 4px;\n  overflow: hidden;\n`;\n\nconst SliderFill = styled.div<{ percentage: number }>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: ${props => props.percentage}%;\n  background: linear-gradient(90deg, #3b82f6, #1d4ed8);\n  border-radius: 4px;\n  transition: width 0.2s ease;\n`;\n\nconst SliderThumb = styled.div<{ percentage: number }>`\n  position: absolute;\n  top: 50%;\n  left: ${props => props.percentage}%;\n  width: 24px;\n  height: 24px;\n  background: #3b82f6;\n  border: 3px solid #ffffff;\n  border-radius: 50%;\n  transform: translate(-50%, -50%);\n  cursor: pointer;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    transform: translate(-50%, -50%) scale(1.1);\n  }\n  \n  &:active {\n    transform: translate(-50%, -50%) scale(1.2);\n  }\n`;\n\nconst StarRating = styled.div`\n  display: flex;\n  gap: 4px;\n  align-items: center;\n`;\n\nconst StarButton = styled.button<{ filled: boolean }>`\n  width: 32px;\n  height: 32px;\n  border: none;\n  background: none;\n  cursor: pointer;\n  color: ${props => props.filled ? '#f59e0b' : '#64748b'};\n  transition: all 0.2s ease;\n  touch-action: manipulation;\n  \n  &:hover {\n    color: #f59e0b;\n    transform: scale(1.1);\n  }\n  \n  &:active {\n    transform: scale(1.2);\n  }\n`;\n\nconst SetActions = styled.div`\n  display: flex;\n  gap: 12px;\n  justify-content: flex-end;\n`;\n\nconst ActionButton = styled(IconButton)`\n  width: 40px;\n  height: 40px;\n  font-size: 16px;\n`;\n\nconst VoiceInput = styled(motion.div)<{ isListening: boolean }>`\n  position: fixed;\n  bottom: 24px;\n  left: 50%;\n  transform: translateX(-50%);\n  background: ${props => props.isListening \n    ? 'linear-gradient(135deg, #ef4444, #dc2626)'\n    : 'linear-gradient(135deg, #3b82f6, #1d4ed8)'\n  };\n  color: white;\n  padding: 16px 24px;\n  border-radius: 24px;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  z-index: 1000;\n  \n  ${props => props.isListening && css`\n    animation: ${breathe} 2s infinite;\n  `}\n`;\n\nconst VoiceText = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n  max-width: 200px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst BottomActions = styled.div`\n  padding: 20px;\n  background: rgba(30, 41, 59, 0.95);\n  backdrop-filter: blur(10px);\n  border-top: 1px solid rgba(71, 85, 105, 0.3);\n  display: flex;\n  gap: 12px;\n`;\n\nconst ActionButtonLarge = styled.button<{ variant?: 'primary' | 'secondary' | 'success' | 'danger' }>`\n  flex: 1;\n  height: 56px;\n  border-radius: 16px;\n  border: none;\n  font-size: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  touch-action: manipulation;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  \n  ${props => {\n    const colors = {\n      primary: { bg: '#3b82f6', hover: '#2563eb', text: '#ffffff' },\n      secondary: { bg: '#64748b', hover: '#475569', text: '#ffffff' },\n      success: { bg: '#10b981', hover: '#059669', text: '#ffffff' },\n      danger: { bg: '#ef4444', hover: '#dc2626', text: '#ffffff' }\n    };\n    \n    const color = colors[props.variant || 'primary'];\n    \n    return css`\n      background: ${color.bg};\n      color: ${color.text};\n      \n      &:hover {\n        background: ${color.hover};\n        transform: translateY(-2px);\n      }\n      \n      &:active {\n        transform: translateY(0) scale(0.98);\n      }\n      \n      &:disabled {\n        opacity: 0.5;\n        cursor: not-allowed;\n        transform: none;\n      }\n    `;\n  }}\n`;\n\nconst OfflineIndicator = styled(motion.div)`\n  position: absolute;\n  top: 16px;\n  right: 16px;\n  background: rgba(239, 68, 68, 0.9);\n  color: white;\n  padding: 8px 12px;\n  border-radius: 20px;\n  font-size: 12px;\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  z-index: 200;\n`;\n\nconst AutoSaveIndicator = styled(motion.div)<{ visible: boolean }>`\n  position: fixed;\n  top: 80px;\n  right: 20px;\n  background: rgba(16, 185, 129, 0.9);\n  color: white;\n  padding: 8px 12px;\n  border-radius: 20px;\n  font-size: 12px;\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  z-index: 200;\n  opacity: ${props => props.visible ? 1 : 0};\n  pointer-events: none;\n`;\n\n// ==================== MAIN COMPONENT ====================\n\nconst MobileWorkoutLogger: React.FC<MobileWorkoutLoggerProps> = ({\n  clientId,\n  onComplete,\n  onCancel,\n  isOffline = false\n}) => {\n  // State\n  const [currentExerciseIndex, setCurrentExerciseIndex] = useState(0);\n  const [exercises, setExercises] = useState<WorkoutExercise[]>([]);\n  const [isTimerRunning, setIsTimerRunning] = useState(true);\n  const [sessionDuration, setSessionDuration] = useState(0);\n  const [voiceRecognition, setVoiceRecognition] = useState<VoiceRecognition>({\n    isSupported: false,\n    isListening: false,\n    transcript: '',\n    confidence: 0\n  });\n  const [autoSaveVisible, setAutoSaveVisible] = useState(false);\n  const [hapticEnabled, setHapticEnabled] = useState(true);\n  \n  // Refs\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n  const autoSaveRef = useRef<NodeJS.Timeout | null>(null);\n  const recognitionRef = useRef<any>(null);\n  \n  // Context\n  const { user } = useAuth();\n  const { hapticFeedback, isTouch } = useTouchGesture();\n  \n  // Mock client data (replace with real API call)\n  const client: WorkoutClient = {\n    id: clientId.toString(),\n    firstName: 'John',\n    lastName: 'Doe',\n    email: 'john.doe@email.com',\n    availableSessions: 8,\n    fitnessLevel: 'Intermediate',\n    goals: ['Weight Loss', 'Strength'],\n    totalWorkouts: 15,\n    averageIntensity: 7\n  };\n\n  // ==================== EFFECTS ====================\n  \n  useEffect(() => {\n    // Initialize voice recognition\n    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\n      const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\n      recognitionRef.current = new SpeechRecognition();\n      \n      recognitionRef.current.continuous = true;\n      recognitionRef.current.interimResults = true;\n      recognitionRef.current.lang = 'en-US';\n      \n      recognitionRef.current.onresult = (event: any) => {\n        let transcript = '';\n        let confidence = 0;\n        \n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          transcript += event.results[i][0].transcript;\n          confidence = event.results[i][0].confidence;\n        }\n        \n        setVoiceRecognition(prev => ({\n          ...prev,\n          transcript,\n          confidence\n        }));\n        \n        // Process voice commands\n        processVoiceCommand(transcript.toLowerCase());\n      };\n      \n      recognitionRef.current.onerror = () => {\n        setVoiceRecognition(prev => ({ ...prev, isListening: false }));\n      };\n      \n      setVoiceRecognition(prev => ({ ...prev, isSupported: true }));\n    }\n    \n    // Start session timer\n    startTimer();\n    \n    // Initialize exercises (mock data)\n    initializeExercises();\n    \n    return () => {\n      if (timerRef.current) clearInterval(timerRef.current);\n      if (autoSaveRef.current) clearTimeout(autoSaveRef.current);\n      if (recognitionRef.current) recognitionRef.current.stop();\n    };\n  }, []);\n  \n  // Auto-save effect\n  useEffect(() => {\n    if (autoSaveRef.current) clearTimeout(autoSaveRef.current);\n    \n    autoSaveRef.current = setTimeout(() => {\n      saveWorkoutData();\n      showAutoSaveIndicator();\n    }, 10000); // Auto-save every 10 seconds\n    \n    return () => {\n      if (autoSaveRef.current) clearTimeout(autoSaveRef.current);\n    };\n  }, [exercises]);\n\n  // ==================== TIMER FUNCTIONS ====================\n  \n  const startTimer = () => {\n    if (timerRef.current) clearInterval(timerRef.current);\n    \n    timerRef.current = setInterval(() => {\n      setSessionDuration(prev => prev + 1);\n    }, 1000);\n    \n    setIsTimerRunning(true);\n  };\n  \n  const pauseTimer = () => {\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n    setIsTimerRunning(false);\n  };\n  \n  const toggleTimer = () => {\n    if (isTimerRunning) {\n      pauseTimer();\n    } else {\n      startTimer();\n    }\n    \n    if (hapticEnabled) {\n      hapticFeedback('light');\n    }\n  };\n\n  // ==================== HELPER FUNCTIONS ====================\n  \n  const formatTime = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  \n  const initializeExercises = () => {\n    // Mock exercise data (replace with real API call)\n    const mockExercises: WorkoutExercise[] = [\n      {\n        id: '1',\n        exerciseId: 'squat',\n        exercise: {\n          id: 'squat',\n          name: 'Barbell Back Squat',\n          category: 'Resistance',\n          targetMuscles: ['Quadriceps', 'Glutes'],\n          equipment: ['Barbell'],\n          difficulty: 'Intermediate',\n          instructions: [],\n          nasmPhase: 'Phase 2: Strength/Control',\n          biomechanicalMovement: 'Squat',\n          createdAt: '',\n          updatedAt: ''\n        },\n        sets: [\n          {\n            id: '1-1',\n            setNumber: 1,\n            weight: 135,\n            reps: 8,\n            rpe: 6,\n            formQuality: 4,\n            completed: false,\n            timestamp: new Date().toISOString()\n          }\n        ],\n        order: 1,\n        targetSets: 3,\n        targetReps: 8,\n        targetWeight: 135\n      }\n    ];\n    \n    setExercises(mockExercises);\n  };\n  \n  const processVoiceCommand = (command: string) => {\n    // Extract weight and reps from voice input\n    const weightMatch = command.match(/(\\d+)\\s*(pounds?|lbs?|kilos?|kg)/i);\n    const repsMatch = command.match(/(\\d+)\\s*(reps?|repetitions?)/i);\n    \n    if (weightMatch || repsMatch) {\n      const currentExercise = exercises[currentExerciseIndex];\n      if (currentExercise && currentExercise.sets.length > 0) {\n        const currentSet = currentExercise.sets[currentExercise.sets.length - 1];\n        \n        const updatedSet = {\n          ...currentSet,\n          weight: weightMatch ? parseInt(weightMatch[1]) : currentSet.weight,\n          reps: repsMatch ? parseInt(repsMatch[1]) : currentSet.reps\n        };\n        \n        updateSet(currentExercise.id, currentSet.id, updatedSet);\n        \n        if (hapticEnabled) {\n          hapticFeedback('medium');\n        }\n      }\n    }\n  };\n  \n  const updateSet = (exerciseId: string, setId: string, updatedData: Partial<ExerciseSet>) => {\n    setExercises(prev => prev.map(exercise => {\n      if (exercise.id === exerciseId) {\n        return {\n          ...exercise,\n          sets: exercise.sets.map(set => \n            set.id === setId ? { ...set, ...updatedData } : set\n          )\n        };\n      }\n      return exercise;\n    }));\n  };\n  \n  const saveWorkoutData = async () => {\n    try {\n      // Save to localStorage for offline support\n      const workoutData = {\n        clientId,\n        exercises,\n        sessionDuration,\n        timestamp: new Date().toISOString()\n      };\n      \n      localStorage.setItem(`workout_${clientId}_${Date.now()}`, JSON.stringify(workoutData));\n      \n      // If online, also save to server\n      if (!isOffline) {\n        // Add API call here\n      }\n    } catch (error) {\n      console.error('Error saving workout data:', error);\n    }\n  };\n  \n  const showAutoSaveIndicator = () => {\n    setAutoSaveVisible(true);\n    setTimeout(() => setAutoSaveVisible(false), 2000);\n  };\n\n  // ==================== GESTURE HANDLERS ====================\n  \n  const handleSwipeLeft = useCallback(() => {\n    if (currentExerciseIndex < exercises.length - 1) {\n      setCurrentExerciseIndex(prev => prev + 1);\n      if (hapticEnabled) hapticFeedback('light');\n    }\n  }, [currentExerciseIndex, exercises.length, hapticEnabled, hapticFeedback]);\n  \n  const handleSwipeRight = useCallback(() => {\n    if (currentExerciseIndex > 0) {\n      setCurrentExerciseIndex(prev => prev - 1);\n      if (hapticEnabled) hapticFeedback('light');\n    }\n  }, [currentExerciseIndex, hapticEnabled, hapticFeedback]);\n  \n  const gestureRef = useElementGesture({\n    onSwipeLeft: handleSwipeLeft,\n    onSwipeRight: handleSwipeRight\n  }, {\n    swipeThreshold: 50,\n    velocityThreshold: 0.3\n  });\n\n  // ==================== EVENT HANDLERS ====================\n  \n  const toggleVoiceRecognition = () => {\n    if (!voiceRecognition.isSupported) return;\n    \n    if (voiceRecognition.isListening) {\n      recognitionRef.current.stop();\n      setVoiceRecognition(prev => ({ ...prev, isListening: false }));\n    } else {\n      recognitionRef.current.start();\n      setVoiceRecognition(prev => ({ ...prev, isListening: true }));\n    }\n    \n    if (hapticEnabled) {\n      hapticFeedback('medium');\n    }\n  };\n  \n  const completeSet = (exerciseId: string, setId: string) => {\n    updateSet(exerciseId, setId, { completed: true });\n    if (hapticEnabled) {\n      hapticFeedback('heavy');\n    }\n  };\n  \n  const addNewSet = (exerciseId: string) => {\n    const exercise = exercises.find(ex => ex.id === exerciseId);\n    if (!exercise) return;\n    \n    const newSet: ExerciseSet = {\n      id: `${exerciseId}-${exercise.sets.length + 1}`,\n      setNumber: exercise.sets.length + 1,\n      weight: exercise.sets[exercise.sets.length - 1]?.weight || 0,\n      reps: exercise.targetReps || 0,\n      rpe: 5,\n      formQuality: 3,\n      completed: false,\n      timestamp: new Date().toISOString()\n    };\n    \n    setExercises(prev => prev.map(ex => \n      ex.id === exerciseId \n        ? { ...ex, sets: [...ex.sets, newSet] }\n        : ex\n    ));\n    \n    if (hapticEnabled) {\n      hapticFeedback('light');\n    }\n  };\n\n  // ==================== RENDER ====================\n  \n  const currentExercise = exercises[currentExerciseIndex];\n  \n  return (\n    <MobileContainer>\n      {/* Offline Indicator */}\n      {isOffline && (\n        <OfflineIndicator\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: -20 }}\n        >\n          <WifiOff size={16} />\n          Offline Mode\n        </OfflineIndicator>\n      )}\n      \n      {/* Auto-save Indicator */}\n      <AutoSaveIndicator visible={autoSaveVisible}>\n        <Check size={16} />\n        Auto-saved\n      </AutoSaveIndicator>\n      \n      {/* Header */}\n      <MobileHeader>\n        <ClientInfo>\n          <ClientAvatar>\n            {client.firstName[0]}{client.lastName[0]}\n          </ClientAvatar>\n          <ClientDetails>\n            <ClientName>{client.firstName} {client.lastName}</ClientName>\n            <SessionInfo>\n              {formatTime(sessionDuration)} • {client.availableSessions} sessions left\n            </SessionInfo>\n          </ClientDetails>\n        </ClientInfo>\n        \n        <HeaderActions>\n          <IconButton \n            onClick={toggleTimer}\n            active={isTimerRunning}\n            variant={isTimerRunning ? 'success' : 'warning'}\n          >\n            {isTimerRunning ? <Pause size={20} /> : <Play size={20} />}\n          </IconButton>\n          \n          {voiceRecognition.isSupported && (\n            <IconButton \n              onClick={toggleVoiceRecognition}\n              active={voiceRecognition.isListening}\n              variant={voiceRecognition.isListening ? 'danger' : 'secondary'}\n            >\n              {voiceRecognition.isListening ? <MicOff size={20} /> : <Mic size={20} />}\n            </IconButton>\n          )}\n          \n          <IconButton onClick={onCancel} variant=\"secondary\">\n            <X size={20} />\n          </IconButton>\n        </HeaderActions>\n      </MobileHeader>\n      \n      {/* Exercise Cards */}\n      <SwipeableContainer ref={gestureRef}>\n        <AnimatePresence mode=\"wait\">\n          {currentExercise && (\n            <ExerciseCard\n              key={currentExercise.id}\n              initial={{ x: 300, opacity: 0 }}\n              animate={{ x: 0, opacity: 1 }}\n              exit={{ x: -300, opacity: 0 }}\n              transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n            >\n              <ExerciseHeader>\n                <ExerciseTitle>{currentExercise.exercise.name}</ExerciseTitle>\n                <ExerciseNav>\n                  <NavButton \n                    onClick={() => setCurrentExerciseIndex(prev => Math.max(0, prev - 1))}\n                    disabled={currentExerciseIndex === 0}\n                    variant=\"secondary\"\n                  >\n                    <ChevronLeft size={18} />\n                  </NavButton>\n                  <span style={{ fontSize: '14px', color: '#94a3b8', minWidth: '40px', textAlign: 'center' }}>\n                    {currentExerciseIndex + 1} / {exercises.length}\n                  </span>\n                  <NavButton \n                    onClick={() => setCurrentExerciseIndex(prev => Math.min(exercises.length - 1, prev + 1))}\n                    disabled={currentExerciseIndex === exercises.length - 1}\n                    variant=\"secondary\"\n                  >\n                    <ChevronRight size={18} />\n                  </NavButton>\n                </ExerciseNav>\n              </ExerciseHeader>\n              \n              <SetsList>\n                {currentExercise.sets.map((set, index) => (\n                  <SetCard key={set.id} completed={set.completed}>\n                    <SetHeader>\n                      <SetNumber>\n                        <Target size={18} />\n                        Set {set.setNumber}\n                      </SetNumber>\n                      <SetActions>\n                        {!set.completed && (\n                          <ActionButton \n                            onClick={() => completeSet(currentExercise.id, set.id)}\n                            variant=\"success\"\n                          >\n                            <Check size={16} />\n                          </ActionButton>\n                        )}\n                      </SetActions>\n                    </SetHeader>\n                    \n                    <SetInputs>\n                      <InputGroup>\n                        <InputLabel>Weight (lbs)</InputLabel>\n                        <TouchInput\n                          type=\"number\"\n                          value={set.weight}\n                          onChange={(e) => updateSet(currentExercise.id, set.id, { weight: Number(e.target.value) })}\n                          placeholder=\"0\"\n                          disabled={set.completed}\n                        />\n                      </InputGroup>\n                      \n                      <InputGroup>\n                        <InputLabel>Reps</InputLabel>\n                        <TouchInput\n                          type=\"number\"\n                          value={set.reps}\n                          onChange={(e) => updateSet(currentExercise.id, set.id, { reps: Number(e.target.value) })}\n                          placeholder=\"0\"\n                          disabled={set.completed}\n                        />\n                      </InputGroup>\n                      \n                      <SliderContainer>\n                        <InputLabel>RPE: {set.rpe}/10</InputLabel>\n                        <SliderTrack>\n                          <SliderFill percentage={(set.rpe / 10) * 100} />\n                          <SliderThumb percentage={(set.rpe / 10) * 100} />\n                        </SliderTrack>\n                      </SliderContainer>\n                      \n                      <InputGroup>\n                        <InputLabel>Form Quality</InputLabel>\n                        <StarRating>\n                          {[1, 2, 3, 4, 5].map(star => (\n                            <StarButton\n                              key={star}\n                              filled={star <= set.formQuality}\n                              onClick={() => updateSet(currentExercise.id, set.id, { formQuality: star })}\n                              disabled={set.completed}\n                            >\n                              <Star size={20} fill={star <= set.formQuality ? 'currentColor' : 'none'} />\n                            </StarButton>\n                          ))}\n                        </StarRating>\n                      </InputGroup>\n                    </SetInputs>\n                  </SetCard>\n                ))}\n                \n                <ActionButtonLarge\n                  variant=\"secondary\"\n                  onClick={() => addNewSet(currentExercise.id)}\n                >\n                  <Plus size={20} />\n                  Add Set\n                </ActionButtonLarge>\n              </SetsList>\n            </ExerciseCard>\n          )}\n        </AnimatePresence>\n      </SwipeableContainer>\n      \n      {/* Voice Input Feedback */}\n      <AnimatePresence>\n        {voiceRecognition.isListening && (\n          <VoiceInput\n            isListening={voiceRecognition.isListening}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: 20 }}\n          >\n            <Mic size={20} />\n            <VoiceText>\n              {voiceRecognition.transcript || 'Listening...'}\n            </VoiceText>\n          </VoiceInput>\n        )}\n      </AnimatePresence>\n      \n      {/* Bottom Actions */}\n      <BottomActions>\n        <ActionButtonLarge variant=\"secondary\" onClick={onCancel}>\n          <X size={20} />\n          Cancel\n        </ActionButtonLarge>\n        \n        <ActionButtonLarge variant=\"success\" onClick={() => onComplete({})}>  \n          <Save size={20} />\n          Complete Workout\n        </ActionButtonLarge>\n      </BottomActions>\n    </MobileContainer>\n  );\n};\n\nexport default MobileWorkoutLogger;