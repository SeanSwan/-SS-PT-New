/**\n * Universal Master Schedule - Main Export\n * ======================================\n * Main entry point for the Universal Master Schedule system\n * \n * This file exports all the components, services, and utilities\n * needed to integrate the Universal Master Schedule into the\n * SwanStudios admin dashboard.\n */\n\n// Main Component\nexport { default as UniversalMasterSchedule } from './UniversalMasterSchedule';\n\n// Types and Interfaces\nexport * from './types';\n\n// Theme Configuration\nexport {\n  stellarTheme,\n  CommandCenterTheme,\n  calendarTheme,\n  stellarColors,\n  stellarGradients,\n  stellarSpacing,\n  stellarBreakpoints,\n  stellarTypography,\n  stellarShadows,\n  stellarBorderRadius,\n  stellarAnimations\n} from './UniversalMasterScheduleTheme';\n\n// Services\nexport { default as sessionService } from '../services/sessionService';\nexport { default as clientTrainerAssignmentService } from '../services/clientTrainerAssignmentService';\n\n// Utility Functions\nexport const formatSessionDate = (date: string | Date): string => {\n  const sessionDate = typeof date === 'string' ? new Date(date) : date;\n  return sessionDate.toLocaleString('en-US', {\n    weekday: 'short',\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\n\nexport const formatSessionTime = (date: string | Date): string => {\n  const sessionDate = typeof date === 'string' ? new Date(date) : date;\n  return sessionDate.toLocaleTimeString('en-US', {\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\n\nexport const getSessionStatusColor = (status: string): string => {\n  switch (status) {\n    case 'available':\n      return '#22c55e';\n    case 'scheduled':\n      return '#3b82f6';\n    case 'confirmed':\n      return '#0ea5e9';\n    case 'completed':\n      return '#6c757d';\n    case 'cancelled':\n      return '#ef4444';\n    case 'requested':\n      return '#f59e0b';\n    default:\n      return '#3b82f6';\n  }\n};\n\nexport const calculateUtilizationRate = (sessions: any[]): number => {\n  if (sessions.length === 0) return 0;\n  \n  const bookedSessions = sessions.filter(s => \n    ['scheduled', 'confirmed', 'completed'].includes(s.status)\n  ).length;\n  \n  return Math.round((bookedSessions / sessions.length) * 100);\n};\n\nexport const getSessionDuration = (start: Date, end: Date): number => {\n  return Math.round((end.getTime() - start.getTime()) / 60000);\n};\n\nexport const isSessionConflict = (session1: any, session2: any): boolean => {\n  const start1 = new Date(session1.sessionDate);\n  const end1 = new Date(start1.getTime() + (session1.duration || 60) * 60000);\n  const start2 = new Date(session2.sessionDate);\n  const end2 = new Date(start2.getTime() + (session2.duration || 60) * 60000);\n  \n  return start1 < end2 && start2 < end1;\n};\n\nexport const validateSessionData = (sessionData: any): {\n  isValid: boolean;\n  errors: string[];\n} => {\n  const errors: string[] = [];\n  \n  if (!sessionData.sessionDate) {\n    errors.push('Session date is required');\n  }\n  \n  if (!sessionData.duration || sessionData.duration < 15) {\n    errors.push('Session duration must be at least 15 minutes');\n  }\n  \n  if (sessionData.duration > 480) {\n    errors.push('Session duration cannot exceed 8 hours');\n  }\n  \n  if (sessionData.sessionDate) {\n    const sessionDate = new Date(sessionData.sessionDate);\n    if (sessionDate < new Date()) {\n      errors.push('Session date cannot be in the past');\n    }\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n// Constants\nexport const SESSION_STATUSES = [\n  { value: 'available', label: 'Available', color: '#22c55e' },\n  { value: 'requested', label: 'Requested', color: '#f59e0b' },\n  { value: 'scheduled', label: 'Scheduled', color: '#3b82f6' },\n  { value: 'confirmed', label: 'Confirmed', color: '#0ea5e9' },\n  { value: 'completed', label: 'Completed', color: '#6c757d' },\n  { value: 'cancelled', label: 'Cancelled', color: '#ef4444' },\n];\n\nexport const CALENDAR_VIEWS = [\n  { value: 'month', label: 'Month' },\n  { value: 'week', label: 'Week' },\n  { value: 'day', label: 'Day' },\n  { value: 'agenda', label: 'Agenda' },\n];\n\nexport const BULK_ACTIONS = [\n  { value: 'confirm', label: 'Confirm Sessions', color: '#22c55e' },\n  { value: 'cancel', label: 'Cancel Sessions', color: '#ef4444' },\n  { value: 'delete', label: 'Delete Sessions', color: '#dc2626' },\n  { value: 'reassign', label: 'Reassign Trainer', color: '#3b82f6' },\n  { value: 'reschedule', label: 'Reschedule Sessions', color: '#f59e0b' },\n  { value: 'duplicate', label: 'Duplicate Sessions', color: '#8b5cf6' },\n  { value: 'export', label: 'Export Sessions', color: '#6c757d' },\n];\n\nexport const DATE_RANGES = [\n  { value: 'all', label: 'All Time' },\n  { value: 'today', label: 'Today' },\n  { value: 'week', label: 'This Week' },\n  { value: 'month', label: 'This Month' },\n  { value: 'custom', label: 'Custom Range' },\n];\n\n// Error Messages\nexport const ERROR_MESSAGES = {\n  FETCH_SESSIONS_ERROR: 'Failed to load sessions. Please try again.',\n  CREATE_SESSION_ERROR: 'Failed to create session. Please check your input.',\n  UPDATE_SESSION_ERROR: 'Failed to update session. Please try again.',\n  DELETE_SESSION_ERROR: 'Failed to delete session. Please try again.',\n  ASSIGN_TRAINER_ERROR: 'Failed to assign trainer. Please try again.',\n  BULK_ACTION_ERROR: 'Failed to perform bulk action. Please try again.',\n  PERMISSION_ERROR: 'You do not have permission to perform this action.',\n  VALIDATION_ERROR: 'Please check your input and try again.',\n  NETWORK_ERROR: 'Network error. Please check your connection.',\n  UNKNOWN_ERROR: 'An unexpected error occurred. Please try again.',\n};\n\n// Success Messages\nexport const SUCCESS_MESSAGES = {\n  SESSION_CREATED: 'Session created successfully',\n  SESSION_UPDATED: 'Session updated successfully',\n  SESSION_DELETED: 'Session deleted successfully',\n  SESSION_CONFIRMED: 'Session confirmed successfully',\n  SESSION_CANCELLED: 'Session cancelled successfully',\n  TRAINER_ASSIGNED: 'Trainer assigned successfully',\n  CLIENT_ASSIGNED: 'Client assigned successfully',\n  BULK_ACTION_COMPLETED: 'Bulk action completed successfully',\n  DATA_EXPORTED: 'Data exported successfully',\n  SESSIONS_IMPORTED: 'Sessions imported successfully',\n};\n\n// Default Configuration\nexport const DEFAULT_CONFIG = {\n  defaultSessionDuration: 60,\n  defaultLocation: 'Main Studio',\n  autoRefreshInterval: 30000, // 30 seconds\n  maxBulkOperations: 50,\n  calendarTimeSlots: 2,\n  calendarStep: 30,\n  dateFormat: 'YYYY-MM-DD',\n  timeFormat: 'HH:mm',\n  datetimeFormat: 'YYYY-MM-DD HH:mm',\n};\n\n// Permissions\nexport const PERMISSIONS = {\n  VIEW_ALL_SESSIONS: 'view_all_sessions',\n  CREATE_SESSIONS: 'create_sessions',\n  EDIT_SESSIONS: 'edit_sessions',\n  DELETE_SESSIONS: 'delete_sessions',\n  ASSIGN_TRAINERS: 'assign_trainers',\n  BULK_OPERATIONS: 'bulk_operations',\n  VIEW_STATISTICS: 'view_statistics',\n  EXPORT_DATA: 'export_data',\n  IMPORT_DATA: 'import_data',\n};\n\n// Component Props Interfaces\nexport interface UniversalMasterScheduleProps {\n  initialView?: 'month' | 'week' | 'day' | 'agenda';\n  initialDate?: Date;\n  autoRefresh?: boolean;\n  refreshInterval?: number;\n  permissions?: string[];\n  onSessionSelect?: (session: any) => void;\n  onSessionCreate?: (session: any) => void;\n  onSessionUpdate?: (session: any) => void;\n  onSessionDelete?: (sessionId: string) => void;\n  onError?: (error: string) => void;\n  theme?: 'light' | 'dark';\n  compactMode?: boolean;\n  showStatistics?: boolean;\n  showFilters?: boolean;\n  showBulkActions?: boolean;\n  customActions?: Array<{\n    label: string;\n    action: (selectedSessions: string[]) => void;\n    icon?: React.ReactNode;\n    color?: string;\n  }>;\n}\n\n// Hook for Universal Master Schedule\nexport const useUniversalMasterSchedule = () => {\n  // This would contain common logic for the schedule component\n  // For now, it's a placeholder\n  return {\n    // Add common hooks and utilities here\n  };\n};\n\n// Export default component\nexport default UniversalMasterSchedule;\n"