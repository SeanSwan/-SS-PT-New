/**\n * Universal Master Schedule - Type Definitions\n * ==========================================\n * TypeScript interfaces and types for the Universal Master Schedule system\n * \n * These types align with the Grand Unifying Blueprint v43.2 and provide\n * type safety for the enhanced scheduling system with drag-and-drop,\n * client-trainer assignments, and real-time collaboration features.\n */\n\n// ==================== CORE ENTITY TYPES ====================\n\n/**\n * Session entity - represents a training session slot\n */\nexport interface Session {\n  id: string;\n  sessionDate: string;\n  duration: number;\n  userId: string | null;\n  trainerId: string | null;\n  location?: string;\n  notes?: string;\n  status: 'available' | 'requested' | 'scheduled' | 'confirmed' | 'completed' | 'cancelled';\n  client?: Client | null;\n  trainer?: Trainer | null;\n  createdAt: string;\n  updatedAt: string;\n}\n\n/**\n * Client entity - represents a client user\n */\nexport interface Client {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone?: string;\n  photo?: string;\n  availableSessions: number;\n  role: 'client';\n  createdAt: string;\n  updatedAt: string;\n}\n\n/**\n * Trainer entity - represents a trainer user\n */\nexport interface Trainer {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone?: string;\n  photo?: string;\n  specialties?: string;\n  role: 'trainer';\n  createdAt: string;\n  updatedAt: string;\n}\n\n/**\n * ClientTrainerAssignment entity - represents the assignment relationship\n */\nexport interface ClientTrainerAssignment {\n  id: string;\n  clientId: string;\n  trainerId: string;\n  assignedBy: string;\n  assignedAt: string;\n  isActive: boolean;\n  notes?: string;\n  client?: Client;\n  trainer?: Trainer;\n  assignedByUser?: {\n    id: string;\n    firstName: string;\n    lastName: string;\n  };\n  createdAt: string;\n  updatedAt: string;\n}\n\n// ==================== CALENDAR EVENT TYPES ====================\n\n/**\n * Calendar event - represents a session in the calendar view\n */\nexport interface SessionEvent {\n  id: string;\n  title: string;\n  start: Date;\n  end: Date;\n  allDay?: boolean;\n  status: Session['status'];\n  userId?: string | null;\n  trainerId?: string | null;\n  client?: Client | null;\n  trainer?: Trainer | null;\n  location?: string;\n  notes?: string;\n  duration?: number;\n  resource?: Session; // Full session data\n}\n\n/**\n * Drag and drop event data\n */\nexport interface DragDropEventData {\n  event: SessionEvent;\n  start: Date;\n  end: Date;\n  isAllDay?: boolean;\n}\n\n/**\n * Calendar slot selection data\n */\nexport interface SlotSelectionData {\n  start: Date;\n  end: Date;\n  slots: Date[];\n  action: 'select' | 'click' | 'doubleClick';\n  bounds: {\n    x: number;\n    y: number;\n    top: number;\n    right: number;\n    bottom: number;\n    left: number;\n  };\n  box: {\n    clientX: number;\n    clientY: number;\n    x: number;\n    y: number;\n  };\n}\n\n// ==================== FILTER AND SEARCH TYPES ====================\n\n/**\n * Filter options for the schedule view\n */\nexport interface FilterOptions {\n  trainerId: string;\n  clientId: string;\n  status: 'all' | Session['status'];\n  dateRange: 'all' | 'today' | 'week' | 'month' | 'custom';\n  location: string;\n  searchTerm: string;\n  customDateStart?: string;\n  customDateEnd?: string;\n}\n\n/**\n * Advanced filter options\n */\nexport interface AdvancedFilterOptions extends FilterOptions {\n  showOnlyAssigned: boolean;\n  showOnlyUnassigned: boolean;\n  minDuration: number;\n  maxDuration: number;\n  hasNotes: boolean;\n  createdBy: string;\n  lastModified: 'today' | 'week' | 'month' | 'all';\n}\n\n// ==================== STATISTICS TYPES ====================\n\n/**\n * Schedule statistics for dashboard display\n */\nexport interface ScheduleStats {\n  totalSessions: number;\n  availableSessions: number;\n  bookedSessions: number;\n  completedSessions: number;\n  cancelledSessions: number;\n  revenue: number;\n  utilizationRate: number;\n  averageSessionDuration: number;\n  topTrainer: {\n    id: string;\n    name: string;\n    sessionsCount: number;\n  } | null;\n  topClient: {\n    id: string;\n    name: string;\n    sessionsCount: number;\n  } | null;\n}\n\n/**\n * Trainer performance statistics\n */\nexport interface TrainerStats {\n  trainerId: string;\n  totalSessions: number;\n  completedSessions: number;\n  cancelledSessions: number;\n  averageRating: number;\n  clientCount: number;\n  revenue: number;\n  utilizationRate: number;\n  upcomingSessions: number;\n}\n\n/**\n * Client progress statistics\n */\nexport interface ClientStats {\n  clientId: string;\n  totalSessions: number;\n  completedSessions: number;\n  remainingSessions: number;\n  averageSessionDuration: number;\n  totalSpent: number;\n  lastSessionDate: string | null;\n  nextSessionDate: string | null;\n  assignedTrainerId: string | null;\n}\n\n// ==================== ACTION TYPES ====================\n\n/**\n * Bulk action types for multi-session operations\n */\nexport type BulkActionType = \n  | 'confirm'\n  | 'cancel'\n  | 'delete'\n  | 'reassign'\n  | 'reschedule'\n  | 'duplicate'\n  | 'export';\n\n/**\n * Session action types for individual operations\n */\nexport type SessionActionType = \n  | 'view'\n  | 'edit'\n  | 'delete'\n  | 'confirm'\n  | 'cancel'\n  | 'reassign'\n  | 'reschedule'\n  | 'duplicate'\n  | 'addNotes'\n  | 'viewHistory';\n\n/**\n * Assignment action types\n */\nexport type AssignmentActionType = \n  | 'assign'\n  | 'unassign'\n  | 'reassign'\n  | 'viewHistory'\n  | 'updatePermissions';\n\n// ==================== API RESPONSE TYPES ====================\n\n/**\n * Standard API response wrapper\n */\nexport interface ApiResponse<T> {\n  success: boolean;\n  data: T;\n  message?: string;\n  error?: string;\n}\n\n/**\n * Paginated API response\n */\nexport interface PaginatedResponse<T> {\n  success: boolean;\n  data: T[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n    hasNext: boolean;\n    hasPrev: boolean;\n  };\n  message?: string;\n}\n\n/**\n * Session creation/update request\n */\nexport interface SessionRequest {\n  sessionDate: string;\n  duration: number;\n  userId?: string | null;\n  trainerId?: string | null;\n  location?: string;\n  notes?: string;\n  status?: Session['status'];\n}\n\n/**\n * Client-trainer assignment request\n */\nexport interface AssignmentRequest {\n  clientId: string;\n  trainerId: string;\n  notes?: string;\n}\n\n/**\n * Bulk operation request\n */\nexport interface BulkOperationRequest {\n  sessionIds: string[];\n  action: BulkActionType;\n  data?: any;\n}\n\n// ==================== UI STATE TYPES ====================\n\n/**\n * Calendar view types\n */\nexport type CalendarView = 'month' | 'week' | 'day' | 'agenda';\n\n/**\n * Dialog state types\n */\nexport interface DialogState {\n  eventDialog: boolean;\n  assignmentDialog: boolean;\n  statsDialog: boolean;\n  filterDialog: boolean;\n  bulkActionDialog: boolean;\n  sessionFormDialog: boolean;\n}\n\n/**\n * Multi-select state\n */\nexport interface MultiSelectState {\n  enabled: boolean;\n  selectedEvents: string[];\n  bulkActionMode: boolean;\n  selectedAction: BulkActionType | null;\n}\n\n/**\n * Loading state for different operations\n */\nexport interface LoadingState {\n  sessions: boolean;\n  clients: boolean;\n  trainers: boolean;\n  assignments: boolean;\n  statistics: boolean;\n  bulkOperation: boolean;\n}\n\n/**\n * Error state for different operations\n */\nexport interface ErrorState {\n  sessions: string | null;\n  clients: string | null;\n  trainers: string | null;\n  assignments: string | null;\n  statistics: string | null;\n  bulkOperation: string | null;\n}\n\n// ==================== THEME AND STYLING TYPES ====================\n\n/**\n * Theme configuration for the schedule\n */\nexport interface ScheduleTheme {\n  colors: {\n    primary: string;\n    secondary: string;\n    success: string;\n    warning: string;\n    error: string;\n    info: string;\n    background: string;\n    surface: string;\n    text: string;\n    textSecondary: string;\n    border: string;\n  };\n  spacing: {\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n  breakpoints: {\n    mobile: string;\n    tablet: string;\n    desktop: string;\n  };\n}\n\n/**\n * Event styling configuration\n */\nexport interface EventStyling {\n  backgroundColor: string;\n  borderColor: string;\n  textColor: string;\n  borderRadius: string;\n  padding: string;\n  fontSize: string;\n  fontWeight: string;\n}\n\n// ==================== PERMISSION TYPES ====================\n\n/**\n * User permissions for schedule operations\n */\nexport interface SchedulePermissions {\n  canViewAll: boolean;\n  canCreateSessions: boolean;\n  canEditSessions: boolean;\n  canDeleteSessions: boolean;\n  canAssignClients: boolean;\n  canViewStatistics: boolean;\n  canPerformBulkActions: boolean;\n  canManageTrainers: boolean;\n  canViewFinancials: boolean;\n}\n\n/**\n * Role-based access control\n */\nexport type UserRole = 'admin' | 'trainer' | 'client' | 'user';\n\n// ==================== NOTIFICATION TYPES ====================\n\n/**\n * Real-time notification types\n */\nexport interface ScheduleNotification {\n  id: string;\n  type: 'session_created' | 'session_updated' | 'session_cancelled' | 'assignment_created' | 'assignment_updated';\n  title: string;\n  message: string;\n  userId: string;\n  data: any;\n  read: boolean;\n  createdAt: string;\n}\n\n/**\n * WebSocket event types\n */\nexport interface WebSocketEvent {\n  type: 'session_update' | 'assignment_update' | 'notification' | 'bulk_operation';\n  data: any;\n  timestamp: string;\n  userId?: string;\n}\n\n// ==================== EXPORT TYPES ====================\n\n/**\n * Export configuration\n */\nexport interface ExportConfig {\n  format: 'csv' | 'excel' | 'pdf' | 'json';\n  dateRange: {\n    start: string;\n    end: string;\n  };\n  filters: FilterOptions;\n  includeFields: string[];\n  groupBy?: 'trainer' | 'client' | 'date' | 'status';\n}\n\n/**\n * Import configuration\n */\nexport interface ImportConfig {\n  format: 'csv' | 'excel' | 'json';\n  mapping: Record<string, string>;\n  options: {\n    skipHeader: boolean;\n    dateFormat: string;\n    createMissingUsers: boolean;\n  };\n}\n\n// ==================== UTILITY TYPES ====================\n\n/**\n * Generic ID type\n */\nexport type ID = string | number;\n\n/**\n * Timestamp type\n */\nexport type Timestamp = string;\n\n/**\n * Optional fields utility type\n */\nexport type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\n/**\n * Required fields utility type\n */\nexport type Required<T, K extends keyof T> = T & { [P in K]-?: T[P] };\n\n/**\n * Update payload type\n */\nexport type UpdatePayload<T> = Partial<Omit<T, 'id' | 'createdAt' | 'updatedAt'>>;\n\n/**\n * Create payload type\n */\nexport type CreatePayload<T> = Omit<T, 'id' | 'createdAt' | 'updatedAt'>;\n\n// ==================== CONSTANTS ====================\n\n/**\n * Session status options\n */\nexport const SESSION_STATUSES = [\n  'available',\n  'requested',\n  'scheduled',\n  'confirmed',\n  'completed',\n  'cancelled'\n] as const;\n\n/**\n * Calendar view options\n */\nexport const CALENDAR_VIEWS = ['month', 'week', 'day', 'agenda'] as const;\n\n/**\n * Bulk action options\n */\nexport const BULK_ACTIONS = [\n  'confirm',\n  'cancel',\n  'delete',\n  'reassign',\n  'reschedule',\n  'duplicate',\n  'export'\n] as const;\n\n/**\n * User roles\n */\nexport const USER_ROLES = ['admin', 'trainer', 'client', 'user'] as const;\n\n/**\n * Export formats\n */\nexport const EXPORT_FORMATS = ['csv', 'excel', 'pdf', 'json'] as const;\n\n/**\n * Date range options\n */\nexport const DATE_RANGES = ['all', 'today', 'week', 'month', 'custom'] as const;\n"