/**\n * GalaxyScrollToTopDemo.tsx - Interactive Demo Component\n * =====================================================\n * Seraphina's Interactive Showcase for the GalaxyScrollToTop Component\n * \n * Use this component to test and preview different configurations\n * Perfect for development and testing different variants\n * \n * Usage: Import and add to any page for testing\n * <GalaxyScrollToTopDemo />\n */\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport GalaxyScrollToTop, { \n  ScrollToTopVariant, \n  ScrollToTopPosition, \n  ScrollToTopIcon \n} from './GalaxyScrollToTop';\nimport { ThemedGlowButton } from '../../styles/swan-theme-utils';\n\n// Demo Container\nconst DemoContainer = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 20px;\n  transform: translateY(-50%);\n  background: rgba(10, 10, 26, 0.95);\n  border: 1px solid rgba(0, 255, 255, 0.3);\n  border-radius: 15px;\n  padding: 1.5rem;\n  backdrop-filter: blur(15px);\n  z-index: 2000;\n  max-height: 80vh;\n  overflow-y: auto;\n  width: 300px;\n  \n  @media (max-width: 768px) {\n    left: 10px;\n    right: 10px;\n    width: auto;\n    top: 10px;\n    bottom: 10px;\n    max-height: none;\n    transform: none;\n  }\n`;\n\nconst DemoTitle = styled.h3`\n  color: #00ffff;\n  margin: 0 0 1rem 0;\n  font-size: 1.1rem;\n  text-align: center;\n`;\n\nconst ControlGroup = styled.div`\n  margin-bottom: 1rem;\n`;\n\nconst Label = styled.label`\n  display: block;\n  color: #ffffff;\n  font-size: 0.875rem;\n  margin-bottom: 0.5rem;\n  font-weight: 500;\n`;\n\nconst Select = styled.select`\n  width: 100%;\n  padding: 0.5rem;\n  background: rgba(255, 255, 255, 0.1);\n  border: 1px solid rgba(0, 255, 255, 0.3);\n  border-radius: 8px;\n  color: #ffffff;\n  font-size: 0.875rem;\n  \n  &:focus {\n    outline: none;\n    border-color: #00ffff;\n  }\n  \n  option {\n    background: #1a1a2e;\n    color: #ffffff;\n  }\n`;\n\nconst Checkbox = styled.input.attrs({ type: 'checkbox' })`\n  margin-right: 0.5rem;\n  accent-color: #00ffff;\n`;\n\nconst CheckboxLabel = styled.label`\n  display: flex;\n  align-items: center;\n  color: #ffffff;\n  font-size: 0.875rem;\n  margin-bottom: 0.5rem;\n  cursor: pointer;\n`;\n\nconst ButtonRow = styled.div`\n  display: flex;\n  gap: 0.5rem;\n  margin-top: 1rem;\n`;\n\nconst StatusText = styled.div`\n  color: #00ffff;\n  font-size: 0.75rem;\n  text-align: center;\n  margin-top: 1rem;\n  padding: 0.5rem;\n  background: rgba(0, 255, 255, 0.1);\n  border-radius: 8px;\n`;\n\n// Demo Component\nconst GalaxyScrollToTopDemo: React.FC = () => {\n  const [isVisible, setIsVisible] = useState(false);\n  const [config, setConfig] = useState({\n    variant: 'cosmic' as ScrollToTopVariant,\n    position: 'bottom-right' as ScrollToTopPosition,\n    icon: 'chevron' as ScrollToTopIcon,\n    showProgressRing: true,\n    showTooltip: true,\n    tooltipText: 'Return to the cosmic summit',\n    tooltipPosition: 'left' as 'top' | 'bottom' | 'left' | 'right',\n    enableFloatAnimation: true,\n    buttonVariant: 'primary' as 'primary' | 'secondary' | 'accent',\n    buttonSize: 'medium' as 'small' | 'medium' | 'large',\n    hapticFeedback: true,\n    hideAfterScroll: true,\n    enableAnalytics: true,\n    scrollThreshold: 300\n  });\n\n  const updateConfig = (key: string, value: any) => {\n    setConfig(prev => ({ ...prev, [key]: value }));\n  };\n\n  const presets = {\n    cosmic: {\n      variant: 'cosmic' as ScrollToTopVariant,\n      showProgressRing: true,\n      enableFloatAnimation: true,\n      buttonVariant: 'primary' as 'primary',\n      icon: 'chevron' as ScrollToTopIcon\n    },\n    elegant: {\n      variant: 'elegant' as ScrollToTopVariant,\n      showProgressRing: false,\n      enableFloatAnimation: false,\n      buttonVariant: 'secondary' as 'secondary',\n      icon: 'arrow' as ScrollToTopIcon\n    },\n    minimal: {\n      variant: 'minimal' as ScrollToTopVariant,\n      showProgressRing: false,\n      enableFloatAnimation: false,\n      buttonVariant: 'accent' as 'accent',\n      icon: 'chevron' as ScrollToTopIcon\n    },\n    dynamic: {\n      variant: 'dynamic' as ScrollToTopVariant,\n      showProgressRing: true,\n      enableFloatAnimation: true,\n      buttonVariant: 'primary' as 'primary',\n      icon: 'rocket' as ScrollToTopIcon\n    }\n  };\n\n  const applyPreset = (presetName: keyof typeof presets) => {\n    setConfig(prev => ({ ...prev, ...presets[presetName] }));\n  };\n\n  return (\n    <>\n      <DemoContainer>\n        <DemoTitle>üåü Galaxy Scroll Demo</DemoTitle>\n        \n        {/* Preset Buttons */}\n        <ButtonRow>\n          <ThemedGlowButton \n            text=\"Cosmic\" \n            size=\"small\" \n            variant=\"primary\"\n            onClick={() => applyPreset('cosmic')}\n          />\n          <ThemedGlowButton \n            text=\"Elegant\" \n            size=\"small\" \n            variant=\"secondary\"\n            onClick={() => applyPreset('elegant')}\n          />\n        </ButtonRow>\n        \n        <ButtonRow>\n          <ThemedGlowButton \n            text=\"Minimal\" \n            size=\"small\" \n            variant=\"accent\"\n            onClick={() => applyPreset('minimal')}\n          />\n          <ThemedGlowButton \n            text=\"Dynamic\" \n            size=\"small\" \n            variant=\"primary\"\n            onClick={() => applyPreset('dynamic')}\n          />\n        </ButtonRow>\n\n        {/* Controls */}\n        <ControlGroup>\n          <Label>Variant</Label>\n          <Select \n            value={config.variant} \n            onChange={(e) => updateConfig('variant', e.target.value)}\n          >\n            <option value=\"cosmic\">Cosmic</option>\n            <option value=\"elegant\">Elegant</option>\n            <option value=\"minimal\">Minimal</option>\n            <option value=\"dynamic\">Dynamic</option>\n          </Select>\n        </ControlGroup>\n\n        <ControlGroup>\n          <Label>Position</Label>\n          <Select \n            value={config.position} \n            onChange={(e) => updateConfig('position', e.target.value)}\n          >\n            <option value=\"bottom-right\">Bottom Right</option>\n            <option value=\"bottom-left\">Bottom Left</option>\n            <option value=\"top-right\">Top Right</option>\n            <option value=\"top-left\">Top Left</option>\n          </Select>\n        </ControlGroup>\n\n        <ControlGroup>\n          <Label>Icon</Label>\n          <Select \n            value={config.icon} \n            onChange={(e) => updateConfig('icon', e.target.value)}\n          >\n            <option value=\"chevron\">Chevron</option>\n            <option value=\"arrow\">Arrow</option>\n            <option value=\"rocket\">Rocket</option>\n            <option value=\"zap\">Zap</option>\n          </Select>\n        </ControlGroup>\n\n        <ControlGroup>\n          <Label>Button Size</Label>\n          <Select \n            value={config.buttonSize} \n            onChange={(e) => updateConfig('buttonSize', e.target.value)}\n          >\n            <option value=\"small\">Small</option>\n            <option value=\"medium\">Medium</option>\n            <option value=\"large\">Large</option>\n          </Select>\n        </ControlGroup>\n\n        <ControlGroup>\n          <Label>Button Variant</Label>\n          <Select \n            value={config.buttonVariant} \n            onChange={(e) => updateConfig('buttonVariant', e.target.value)}\n          >\n            <option value=\"primary\">Primary</option>\n            <option value=\"secondary\">Secondary</option>\n            <option value=\"accent\">Accent</option>\n          </Select>\n        </ControlGroup>\n\n        {/* Feature Toggles */}\n        <ControlGroup>\n          <CheckboxLabel>\n            <Checkbox \n              checked={config.showProgressRing}\n              onChange={(e) => updateConfig('showProgressRing', e.target.checked)}\n            />\n            Progress Ring\n          </CheckboxLabel>\n          \n          <CheckboxLabel>\n            <Checkbox \n              checked={config.showTooltip}\n              onChange={(e) => updateConfig('showTooltip', e.target.checked)}\n            />\n            Show Tooltip\n          </CheckboxLabel>\n          \n          <CheckboxLabel>\n            <Checkbox \n              checked={config.enableFloatAnimation}\n              onChange={(e) => updateConfig('enableFloatAnimation', e.target.checked)}\n            />\n            Float Animation\n          </CheckboxLabel>\n          \n          <CheckboxLabel>\n            <Checkbox \n              checked={config.hapticFeedback}\n              onChange={(e) => updateConfig('hapticFeedback', e.target.checked)}\n            />\n            Haptic Feedback\n          </CheckboxLabel>\n          \n          <CheckboxLabel>\n            <Checkbox \n              checked={config.hideAfterScroll}\n              onChange={(e) => updateConfig('hideAfterScroll', e.target.checked)}\n            />\n            Hide After Scroll\n          </CheckboxLabel>\n        </ControlGroup>\n\n        {/* Control Buttons */}\n        <ButtonRow>\n          <ThemedGlowButton \n            text={isVisible ? \"Hide\" : \"Show\"} \n            size=\"small\" \n            variant=\"primary\"\n            onClick={() => setIsVisible(!isVisible)}\n          />\n          <ThemedGlowButton \n            text=\"Test Scroll\" \n            size=\"small\" \n            variant=\"secondary\"\n            onClick={() => {\n              // Create some scroll content\n              window.scrollTo({ top: 1000, behavior: 'smooth' });\n              setIsVisible(true);\n            }}\n          />\n        </ButtonRow>\n\n        <StatusText>\n          {isVisible ? '‚úÖ Button Active' : '‚ùå Button Hidden'}\n          <br />\n          Scroll down to see the button in action!\n        </StatusText>\n      </DemoContainer>\n\n      {/* Demo Button - Force visible for testing */}\n      {isVisible && (\n        <GalaxyScrollToTop \n          {...config}\n          onShow={() => console.log('üåü Demo: Button appeared')}\n          onHide={() => console.log('üåô Demo: Button hidden')}\n          onClick={() => console.log('üöÄ Demo: Scrolled to top')}\n          onScroll={(progress) => console.log('üìä Demo: Scroll progress:', progress)}\n        />\n      )}\n    </>\n  );\n};\n\nexport default GalaxyScrollToTopDemo;