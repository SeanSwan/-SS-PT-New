/**
 * Vite Cache Cleaner Script
 * This script creates/updates a cache marker file to signal Vite to invalidate its module cache
 * Run this script when you encounter stale module/compilation issues
 *
 * Enhanced version: also clears specific component caches
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get the current timestamp as a cache busting marker
const timestamp = new Date().toISOString();

// Get the directory name using ES module approach
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Create a marker file with updated timestamp
const markerContent = `// Cache invalidation marker: ${timestamp}
// This file is automatically updated to force Vite to invalidate its module cache
// Do not edit this file manually

export const CACHE_VERSION = '${timestamp}';
`;

// Define the marker file path
const markerFilePath = path.join(__dirname, 'src', 'cache-marker.ts');

// Write the marker file
fs.writeFileSync(markerFilePath, markerContent);

// Check for component-specific cache clearing
const specificComponents = process.argv.slice(2);

if (specificComponents.length > 0) {
  // Find the .vite-cache directory
  const viteCachePath = path.join(__dirname, '.vite-cache');
  
  if (fs.existsSync(viteCachePath)) {
    console.log(`\x1b[34m🔍\x1b[0m Searching for cached components: ${specificComponents.join(', ')}`);
    
    // Function to recursively search for files that match component names
    const findAndClearComponentCache = (directory, components) => {
      const files = fs.readdirSync(directory, { withFileTypes: true });
      
      for (const file of files) {
        const fullPath = path.join(directory, file.name);
        
        if (file.isDirectory()) {
          // Recursively check subdirectories
          findAndClearComponentCache(fullPath, components);
        } else {
          // Check if file matches any of the component names
          for (const component of components) {
            if (file.name.includes(component)) {
              // Delete the cached file
              fs.unlinkSync(fullPath);
              console.log(`\x1b[32m✓\x1b[0m Cleared cache for component: ${file.name}`);
              break;
            }
          }
        }
      }
    };
    
    // Search and clear component caches
    findAndClearComponentCache(viteCachePath, specificComponents);
  } else {
    console.log('\x1b[33m⚠\x1b[0m .vite-cache directory not found');
  }
}

console.log(`\x1b[32m✓\x1b[0m Cache marker updated: ${timestamp}`);
console.log('\x1b[33m⚠\x1b[0m Restart your Vite dev server to ensure cache refresh');
