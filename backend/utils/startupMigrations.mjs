/**\n * Automatic Migration Runner for Production\n * ========================================\n * This module ensures critical migrations are run on startup\n * to prevent database schema issues on Render deployment.\n */\n\nimport logger from '../utils/logger.mjs';\nimport sequelize from '../database.mjs';\n\n/**\n * Check if isActive column exists in storefront_items table\n */\nasync function checkStorefrontItemsSchema() {\n  try {\n    const [results] = await sequelize.query(`\n      SELECT column_name \n      FROM information_schema.columns \n      WHERE table_name = 'storefront_items' \n      AND table_schema = current_schema()\n      AND column_name IN ('isActive', 'displayOrder')\n    `);\n    \n    const existingColumns = results.map(row => row.column_name);\n    const hasIsActive = existingColumns.includes('isActive');\n    const hasDisplayOrder = existingColumns.includes('displayOrder');\n    \n    logger.info(`Storefront schema check - isActive: ${hasIsActive}, displayOrder: ${hasDisplayOrder}`);\n    \n    return { hasIsActive, hasDisplayOrder, existingColumns };\n  } catch (error) {\n    logger.warn('Could not check storefront schema:', error.message);\n    return { hasIsActive: false, hasDisplayOrder: false, existingColumns: [] };\n  }\n}\n\n/**\n * Add missing columns to storefront_items table\n */\nasync function addMissingStorefrontColumns() {\n  const transaction = await sequelize.transaction();\n  \n  try {\n    logger.info('üîß Checking for missing storefront_items columns...');\n    \n    const schemaCheck = await checkStorefrontItemsSchema();\n    \n    if (!schemaCheck.hasIsActive) {\n      logger.info('‚ûï Adding missing isActive column...');\n      await sequelize.queryInterface.addColumn('storefront_items', 'isActive', {\n        type: sequelize.Sequelize.BOOLEAN,\n        defaultValue: true,\n        allowNull: false,\n      }, { transaction });\n      logger.info('‚úÖ Successfully added isActive column');\n    }\n    \n    if (!schemaCheck.hasDisplayOrder) {\n      logger.info('‚ûï Adding missing displayOrder column...');\n      await sequelize.queryInterface.addColumn('storefront_items', 'displayOrder', {\n        type: sequelize.Sequelize.INTEGER,\n        allowNull: true,\n        defaultValue: 0,\n      }, { transaction });\n      logger.info('‚úÖ Successfully added displayOrder column');\n    }\n    \n    if (schemaCheck.hasIsActive && schemaCheck.hasDisplayOrder) {\n      logger.info('‚ÑπÔ∏è All required columns already exist');\n    }\n    \n    await transaction.commit();\n    return true;\n  } catch (error) {\n    await transaction.rollback();\n    logger.error('üí• Failed to add missing columns:', error.message);\n    return false;\n  }\n}\n\n/**\n * Run essential migrations on startup\n */\nexport async function runStartupMigrations() {\n  try {\n    logger.info('üöÄ Running startup migrations...');\n    \n    // Check if storefront_items table exists\n    const tables = await sequelize.queryInterface.showAllTables();\n    \n    if (!tables.includes('storefront_items')) {\n      logger.warn('‚ö†Ô∏è storefront_items table does not exist - skipping column migrations');\n      return false;\n    }\n    \n    // Add missing columns\n    const success = await addMissingStorefrontColumns();\n    \n    if (success) {\n      logger.info('‚úÖ Startup migrations completed successfully');\n    } else {\n      logger.warn('‚ö†Ô∏è Some startup migrations failed (non-critical)');\n    }\n    \n    return success;\n  } catch (error) {\n    logger.error('üí• Startup migrations failed:', error.message);\n    // Don't throw - allow server to continue starting\n    return false;\n  }\n}\n\nexport default {\n  runStartupMigrations,\n  checkStorefrontItemsSchema,\n  addMissingStorefrontColumns\n};\n