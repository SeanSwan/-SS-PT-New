/** @type {import('sequelize-cli').Migration} */
export default {
  async up(queryInterface, Sequelize) {
    // First create the enum type for status
    await queryInterface.sequelize.query(
      `CREATE TYPE "enum_sessions_status" AS ENUM ('available', 'requested', 'scheduled', 'confirmed', 'completed', 'cancelled');`
    ).catch(error => {
      // If the type already exists, continue
      if (error.message.includes('already exists')) {
        console.log('Enum type already exists, continuing...');
      } else {
        throw error;
      }
    });

    // Then create the table
    await queryInterface.createTable('sessions', {
      id: {
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        type: Sequelize.INTEGER
      },
      sessionDate: {
        type: Sequelize.DATE,
        allowNull: false
      },
      duration: {
        type: Sequelize.INTEGER,
        allowNull: false,
        defaultValue: 60
      },
      userId: {
        type: Sequelize.INTEGER,
        allowNull: true,
        references: {
          model: 'users',
          key: 'id'
        }
      },
      trainerId: {
        type: Sequelize.INTEGER,
        allowNull: true,
        references: {
          model: 'users',
          key: 'id'
        }
      },
      location: {
        type: Sequelize.STRING,
        allowNull: true
      },
      notes: {
        type: Sequelize.TEXT,
        allowNull: true
      },
      status: {
        type: 'enum_sessions_status',
        allowNull: false,
        defaultValue: 'available'
      },
      cancellationReason: {
        type: Sequelize.TEXT,
        allowNull: true
      },
      cancelledBy: {
        type: Sequelize.INTEGER,
        allowNull: true,
        references: {
          model: 'users',
          key: 'id'
        }
      },
      sessionDeducted: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false
      },
      deductionDate: {
        type: Sequelize.DATE,
        allowNull: true
      },
      confirmed: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false
      },
      reminderSent: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false
      },
      reminderSentDate: {
        type: Sequelize.DATE,
        allowNull: true
      },
      feedbackProvided: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false
      },
      rating: {
        type: Sequelize.INTEGER,
        allowNull: true
      },
      feedback: {
        type: Sequelize.TEXT,
        allowNull: true
      },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE
      }
    });

    // Add comments to columns
    await queryInterface.sequelize.query(
      `COMMENT ON COLUMN "sessions"."sessionDate" IS 'Start date and time of the session';`
    );
    await queryInterface.sequelize.query(
      `COMMENT ON COLUMN "sessions"."duration" IS 'Duration in minutes';`
    );
    await queryInterface.sequelize.query(
      `COMMENT ON COLUMN "sessions"."userId" IS 'Client who booked the session';`
    );
    await queryInterface.sequelize.query(
      `COMMENT ON COLUMN "sessions"."trainerId" IS 'Trainer assigned to the session';`
    );
    await queryInterface.sequelize.query(
      `COMMENT ON COLUMN "sessions"."status" IS 'Current status of the session';`
    );

    // Add indexes for common queries
    await queryInterface.addIndex('sessions', ['sessionDate']);
    await queryInterface.addIndex('sessions', ['status']);
    await queryInterface.addIndex('sessions', ['userId']);
    await queryInterface.addIndex('sessions', ['trainerId']);
  },

  async down(queryInterface, Sequelize) {
    await queryInterface.dropTable('sessions');
    // Optional: Drop the enum type if needed
    // await queryInterface.sequelize.query('DROP TYPE IF EXISTS "enum_sessions_status";');
  }
};