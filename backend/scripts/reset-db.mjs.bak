// backend/scripts/reset-db.mjs
/**
 * Database Reset Script
 * This script provides a clean way to reset the database and run migrations
 * Usage: node scripts/reset-db.mjs
 */
import { exec } from 'child_process';
import { promisify } from 'util';
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import logger from '../utils/logger.mjs';

// Initialize environment
dotenv.config();
const execAsync = promisify(exec);
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.join(__dirname, '..');

/**
 * Execute a shell command and log the output
 */
async function executeCommand(command, description) {
  logger.info(`${description}...`);
  try {
    const { stdout, stderr } = await execAsync(command, { cwd: rootDir });
    if (stdout) logger.info(stdout);
    if (stderr) logger.warn(stderr);
    return true;
  } catch (error) {
    logger.error(`Error ${description.toLowerCase()}: ${error.message}`);
    if (error.stdout) logger.info(error.stdout);
    if (error.stderr) logger.error(error.stderr);
    return false;
  }
}

/**
 * Main function to reset database and run migrations
 */
async function resetDatabase() {
  logger.info('=== Database Reset Script ===');
  
  // 1. Check sequelize-cli is installed
  try {
    await execAsync('npx sequelize-cli --version', { cwd: rootDir });
  } catch (error) {
    logger.error('sequelize-cli not found. Please install it with: npm install -g sequelize-cli');
    process.exit(1);
  }

  // 2. Determine database name
  const dbName = process.env.PG_DB || 'swanstudios';
  const dbUser = process.env.PG_USER || 'swanadmin';
  const dbPassword = process.env.PG_PASSWORD || '';
  const dbHost = process.env.PG_HOST || 'localhost';
  const dbPort = process.env.PG_PORT || '5432';

  logger.info(`Using database: ${dbName} on ${dbHost}:${dbPort}`);

  // 3. Drop all tables (safer than dropping the database)
  try {
    // Connect to PostgreSQL and get all tables in the database
    const dropTablesQuery = `
    DROP SCHEMA public CASCADE;
    CREATE SCHEMA public;
    GRANT ALL ON SCHEMA public TO postgres;
    GRANT ALL ON SCHEMA public TO public;
    COMMENT ON SCHEMA public IS 'standard public schema';
    `;

    const psqlCommand = `PGPASSWORD=${dbPassword} psql -U ${dbUser} -h ${dbHost} -p ${dbPort} -d ${dbName} -c "${dropTablesQuery}"`;
    await executeCommand(psqlCommand, 'Dropping all tables');
  } catch (error) {
    logger.error(`Error dropping tables: ${error.message}`);
    // Continue anyway, migrations should recreate tables
  }

  // 4. Run migrations
  const migrateSuccess = await executeCommand('npx sequelize-cli db:migrate', 'Running migrations');
  if (!migrateSuccess) {
    logger.error('Migration failed. Exiting.');
    process.exit(1);
  }

  // 5. Run seeders
  const seedSuccess = await executeCommand('npx sequelize-cli db:seed:all', 'Running seeders');
  if (!seedSuccess) {
    logger.warn('Seeding failed. Database structure should be okay, but no initial data was loaded.');
  }

  logger.info('=== Database reset completed ===');
  logger.info('You can now start the application with the fresh database.');
}

// Run the reset function
resetDatabase().catch(error => {
  logger.error(`Unhandled error: ${error.message}`);
  process.exit(1);
});
