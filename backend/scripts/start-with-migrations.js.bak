// backend/scripts/start-with-migrations.js
/**
 * Start with Migrations Script
 * Runs database migrations before starting the server
 * CommonJS format for better compatibility with sequelize-cli
 */
const { spawn, exec } = require('child_process');
const path = require('path');
const fs = require('fs');

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

/**
 * Log a message with color
 */
function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

/**
 * Execute a shell command and return a promise
 */
function runCommand(command, args) {
  return new Promise((resolve, reject) => {
    log(`Running: ${command} ${args.join(' ')}`, colors.cyan);
    
    const child = spawn(command, args, { 
      stdio: 'inherit',
      shell: process.platform === 'win32' // Use shell on Windows
    });
    
    child.on('close', (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`Command failed with code ${code}`));
      }
    });
    
    child.on('error', (err) => {
      reject(err);
    });
  });
}

/**
 * Check database status
 */
function checkDatabase() {
  return new Promise((resolve, reject) => {
    // Use npx sequelize-cli db:migrate:status to check if migrations exist
    exec('npx sequelize-cli db:migrate:status', 
      { cwd: path.resolve(__dirname, '..') }, 
      (error, stdout, stderr) => {
        if (error) {
          if (stderr.includes('database') && stderr.includes('does not exist')) {
            log('Database does not exist, will attempt to create it.', colors.yellow);
            resolve(false);
          } else {
            log(`Error checking database: ${stderr}`, colors.red);
            reject(error);
          }
        } else {
          log('Database exists, checking for migrations...', colors.green);
          resolve(true);
        }
      }
    );
  });
}

/**
 * Main function to run migrations and start server
 */
async function startWithMigrations() {
  log('==== Starting Server with Database Setup ====', colors.magenta);
  
  try {
    // Check if .env file exists, remind user if it doesn't
    const envPath = path.resolve(__dirname, '..', '.env');
    if (!fs.existsSync(envPath)) {
      log('WARNING: No .env file found. Database connection may fail.', colors.yellow);
      log('Please copy .env.example to .env and update with your settings.', colors.yellow);
    }
    
    // Check database status
    const dbExists = await checkDatabase();
    
    if (!dbExists) {
      // Create database if it doesn't exist
      log('Creating database...', colors.yellow);
      try {
        await runCommand('npx', ['sequelize-cli', 'db:create']);
        log('Database created successfully!', colors.green);
      } catch (createError) {
        log(`Failed to create database. You may need to create it manually: ${createError.message}`, colors.red);
        // Continue anyway, migrations might still work if the issue was that the DB already exists
      }
    }
    
    // Run migrations
    log('Running database migrations...', colors.blue);
    await runCommand('npm', ['run', 'migrate']);
    log('Migrations completed successfully!', colors.green);
    
    // Run seeders
    log('Running database seeders...', colors.blue);
    try {
      await runCommand('npm', ['run', 'seed']);
      log('Seeders completed successfully!', colors.green);
    } catch (seedError) {
      log(`Seeders failed: ${seedError.message}`, colors.yellow);
      log('Continuing with server startup anyway...', colors.yellow);
    }
    
    // Start server
    log('Starting server...', colors.magenta);
    await runCommand('node', ['server.mjs']);
    
  } catch (error) {
    log(`Error: ${error.message}`, colors.red);
    process.exit(1);
  }
}

// Run the script
startWithMigrations();
