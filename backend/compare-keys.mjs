#!/usr/bin/env node\n\n/**\n * Frontend/Backend Key Comparison Tool\n * ===================================\n * Safely compares Stripe keys between frontend and backend\n * WITHOUT exposing any secret information\n */\n\nimport dotenv from 'dotenv';\nimport { existsSync } from 'fs';\nimport { fileURLToPath } from 'url';\nimport path from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Load environment variables from both locations\nconst projectRootDir = path.resolve(__dirname, '..');\nconst backendEnvPath = path.resolve(projectRootDir, 'backend', '.env');\nconst frontendEnvPath = path.resolve(projectRootDir, 'frontend', '.env');\nconst projectRootEnvPath = path.resolve(projectRootDir, '.env');\n\nconsole.log('üîç FRONTEND/BACKEND KEY COMPARISON');\nconsole.log('==================================');\nconsole.log(`Project root: ${projectRootDir}`);\nconsole.log(`Backend .env: ${backendEnvPath} (exists: ${existsSync(backendEnvPath)})`);\nconsole.log(`Frontend .env: ${frontendEnvPath} (exists: ${existsSync(frontendEnvPath)})`);\nconsole.log(`Project root .env: ${projectRootEnvPath} (exists: ${existsSync(projectRootEnvPath)})`);\n\n// Function to safely extract key info without exposing secrets\nfunction extractKeyInfo(key, keyName) {\n  if (!key) {\n    return { \n      name: keyName,\n      exists: false, \n      error: 'Key not found' \n    };\n  }\n  \n  const match = key.match(/(sk|pk)_(live|test)_([^_]+)/);\n  if (!match) {\n    return { \n      name: keyName,\n      exists: true,\n      error: 'Invalid key format',\n      length: key.length\n    };\n  }\n  \n  const [, type, env, accountId] = match;\n  \n  return {\n    name: keyName,\n    exists: true,\n    type,\n    environment: env,\n    accountId,\n    length: key.length,\n    prefix: key.substring(0, 15) + '...',\n    suffix: '...' + key.substring(key.length - 8),\n    isValid: true\n  };\n}\n\n// Load backend environment\nlet backendKeys = {};\nif (existsSync(projectRootEnvPath)) {\n  console.log('\\nüìÅ Loading backend environment from PROJECT ROOT...');\n  dotenv.config({ path: projectRootEnvPath });\n  backendKeys = {\n    secret: process.env.STRIPE_SECRET_KEY,\n    webhook: process.env.STRIPE_WEBHOOK_SECRET,\n    publishable: process.env.VITE_STRIPE_PUBLISHABLE_KEY\n  };\n} else if (existsSync(backendEnvPath)) {\n  console.log('\\nüìÅ Loading backend environment from BACKEND folder...');\n  dotenv.config({ path: backendEnvPath });\n  backendKeys = {\n    secret: process.env.STRIPE_SECRET_KEY,\n    webhook: process.env.STRIPE_WEBHOOK_SECRET,\n    publishable: process.env.VITE_STRIPE_PUBLISHABLE_KEY\n  };\n} else {\n  console.log('‚ùå No backend .env file found!');\n}\n\n// Load frontend environment (clear process.env first to avoid contamination)\nlet frontendKeys = {};\nif (existsSync(frontendEnvPath)) {\n  console.log('üìÅ Loading frontend environment...');\n  // Create a fresh environment for frontend\n  const originalEnv = { ...process.env };\n  \n  // Clear Stripe keys from process.env\n  delete process.env.VITE_STRIPE_PUBLISHABLE_KEY;\n  \n  // Load frontend .env\n  dotenv.config({ path: frontendEnvPath });\n  frontendKeys = {\n    publishable: process.env.VITE_STRIPE_PUBLISHABLE_KEY\n  };\n  \n  // Restore original environment\n  process.env = originalEnv;\n} else {\n  console.log('‚ùå No frontend .env file found!');\n}\n\n// Analyze keys\nconsole.log('\\nüîë BACKEND KEYS ANALYSIS:');\nconsole.log('========================');\n\nconst backendSecretInfo = extractKeyInfo(backendKeys.secret, 'STRIPE_SECRET_KEY');\nconst backendWebhookInfo = extractKeyInfo(backendKeys.webhook, 'STRIPE_WEBHOOK_SECRET');\nconst backendPublishableInfo = extractKeyInfo(backendKeys.publishable, 'VITE_STRIPE_PUBLISHABLE_KEY');\n\n[backendSecretInfo, backendWebhookInfo, backendPublishableInfo].forEach(info => {\n  if (info.exists && info.isValid) {\n    console.log(`‚úÖ ${info.name}:`);\n    console.log(`   Environment: ${info.environment}`);\n    console.log(`   Account: ${info.accountId}`);\n    console.log(`   Length: ${info.length}`);\n    console.log(`   Format: ${info.prefix}${info.suffix}`);\n  } else {\n    console.log(`‚ùå ${info.name}: ${info.error || 'Missing'}`);\n  }\n});\n\nconsole.log('\\nüåê FRONTEND KEYS ANALYSIS:');\nconsole.log('=========================');\n\n// Read frontend .env file directly to avoid env contamination\nlet frontendPublishableKey = null;\nif (existsSync(frontendEnvPath)) {\n  try {\n    const fs = await import('fs');\n    const frontendEnvContent = fs.readFileSync(frontendEnvPath, 'utf8');\n    const publishableMatch = frontendEnvContent.match(/VITE_STRIPE_PUBLISHABLE_KEY=(.+)/);\n    if (publishableMatch) {\n      frontendPublishableKey = publishableMatch[1].trim();\n    }\n  } catch (error) {\n    console.log('‚ùå Error reading frontend .env file:', error.message);\n  }\n}\n\nconst frontendPublishableInfo = extractKeyInfo(frontendPublishableKey, 'VITE_STRIPE_PUBLISHABLE_KEY (Frontend)');\n\nif (frontendPublishableInfo.exists && frontendPublishableInfo.isValid) {\n  console.log(`‚úÖ ${frontendPublishableInfo.name}:`);\n  console.log(`   Environment: ${frontendPublishableInfo.environment}`);\n  console.log(`   Account: ${frontendPublishableInfo.accountId}`);\n  console.log(`   Length: ${frontendPublishableInfo.length}`);\n  console.log(`   Format: ${frontendPublishableInfo.prefix}${frontendPublishableInfo.suffix}`);\n} else {\n  console.log(`‚ùå ${frontendPublishableInfo.name}: ${frontendPublishableInfo.error || 'Missing'}`);\n}\n\n// Compare keys\nconsole.log('\\nüîó KEY COMPARISON RESULTS:');\nconsole.log('=========================');\n\n// Check if backend and frontend publishable keys match\nif (backendPublishableInfo.isValid && frontendPublishableInfo.isValid) {\n  const publishableKeysMatch = backendKeys.publishable === frontendPublishableKey;\n  \n  console.log(`\\nüìã Publishable Key Comparison:`);\n  console.log(`   Backend source: ${backendPublishableInfo.accountId} (${backendPublishableInfo.environment})`);\n  console.log(`   Frontend source: ${frontendPublishableInfo.accountId} (${frontendPublishableInfo.environment})`);\n  console.log(`   Keys identical: ${publishableKeysMatch ? '‚úÖ YES' : '‚ùå NO'}`);\n  \n  if (!publishableKeysMatch) {\n    console.log('\\nüö® MISMATCH DETECTED!');\n    console.log('   Backend and frontend are using DIFFERENT publishable keys!');\n    console.log('   This will cause payment authentication failures.');\n    \n    console.log('\\nüìù TO FIX:');\n    console.log('   1. Decide which key is correct (usually the one in backend/.env)');\n    console.log('   2. Copy the correct key to both files');\n    console.log('   3. Ensure both frontend and backend use the same publishable key');\n  }\n} else {\n  console.log('‚ùå Cannot compare - one or both publishable keys are missing/invalid');\n}\n\n// Check backend key consistency\nif (backendSecretInfo.isValid && backendPublishableInfo.isValid) {\n  const backendKeysMatch = backendSecretInfo.accountId === backendPublishableInfo.accountId;\n  const backendEnvsMatch = backendSecretInfo.environment === backendPublishableInfo.environment;\n  \n  console.log(`\\nüìã Backend Key Consistency:`);\n  console.log(`   Secret/Publishable accounts match: ${backendKeysMatch ? '‚úÖ YES' : '‚ùå NO'}`);\n  console.log(`   Secret/Publishable environments match: ${backendEnvsMatch ? '‚úÖ YES' : '‚ùå NO'}`);\n  \n  if (!backendKeysMatch || !backendEnvsMatch) {\n    console.log('\\nüö® BACKEND KEY MISMATCH!');\n    console.log('   Your backend secret key and publishable key are from different accounts/environments!');\n    \n    if (!backendKeysMatch) {\n      console.log(`   Secret account: ${backendSecretInfo.accountId}`);\n      console.log(`   Publishable account: ${backendPublishableInfo.accountId}`);\n    }\n    \n    if (!backendEnvsMatch) {\n      console.log(`   Secret environment: ${backendSecretInfo.environment}`);\n      console.log(`   Publishable environment: ${backendPublishableInfo.environment}`);\n    }\n  }\n}\n\n// Final recommendation\nconsole.log('\\nüéØ RECOMMENDATION:');\nconsole.log('==================');\n\nif (backendSecretInfo.isValid && backendPublishableInfo.isValid && frontendPublishableInfo.isValid) {\n  const allAccountsMatch = backendSecretInfo.accountId === backendPublishableInfo.accountId && \n                          backendPublishableInfo.accountId === frontendPublishableInfo.accountId;\n  const allEnvsMatch = backendSecretInfo.environment === backendPublishableInfo.environment && \n                      backendPublishableInfo.environment === frontendPublishableInfo.environment;\n  const keysIdentical = backendKeys.publishable === frontendPublishableKey;\n  \n  if (allAccountsMatch && allEnvsMatch && keysIdentical) {\n    console.log('üéâ ‚úÖ PERFECT! All keys are consistent and from the same Stripe account.');\n    console.log(`   Account: ${backendSecretInfo.accountId}`);\n    console.log(`   Environment: ${backendSecretInfo.environment.toUpperCase()}`);\n    console.log('   Your payment system should work correctly!');\n  } else {\n    console.log('‚ùå Issues found that need to be resolved:');\n    \n    if (!allAccountsMatch) {\n      console.log('   ‚Ä¢ Keys are from different Stripe accounts');\n    }\n    if (!allEnvsMatch) {\n      console.log('   ‚Ä¢ Keys are from different environments (live vs test)');\n    }\n    if (!keysIdentical) {\n      console.log('   ‚Ä¢ Frontend and backend are using different publishable keys');\n    }\n    \n    console.log('\\n   Fix by ensuring ALL keys come from the same Stripe account and environment.');\n  }\n} else {\n  console.log('‚ùå Cannot fully analyze - some keys are missing or invalid.');\n}\n\nconsole.log('\\n‚úÖ Analysis complete!');