/**\n * Ethical AI Routes\n * API endpoints for ethical AI review and bias detection\n */\n\nimport express from 'express';\nimport { ethicalAIReview } from '../../services/ai/EthicalAIReview.mjs';\nimport { ethicalAIPipeline } from '../../services/ai/pipeline/EthicalAIPipeline.mjs';\nimport { requirePermissionWithAccessibility } from '../../middleware/p0Monitoring.mjs';\nimport { piiSafeLogger } from '../../utils/monitoring/piiSafeLogging.mjs';\n\nconst router = express.Router();\n\n/**\n * @route   POST /api/master-prompt/ethical-ai/review-workout\n * @desc    Review workout generation for ethical compliance\n * @access  Private\n */\nrouter.post('/review-workout', async (req, res) => {\n  try {\n    const { workoutPlan, clientProfile } = req.body;\n    \n    if (!workoutPlan || !clientProfile) {\n      return res.status(400).json({\n        success: false,\n        message: 'Workout plan and client profile are required'\n      });\n    }\n    \n    const ethicalReview = await ethicalAIReview.reviewWorkoutGeneration(\n      workoutPlan,\n      clientProfile\n    );\n    \n    // Track ethical review\n    piiSafeLogger.trackAIGeneration('workout_generation', clientProfile.userId, {\n      ethicalReview: ethicalReview,\n      passed: ethicalReview.passed,\n      score: ethicalReview.overallScore\n    });\n    \n    res.json({\n      success: true,\n      data: ethicalReview,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    piiSafeLogger.error('Ethical AI workout review failed', {\n      error: error.message\n    });\n    \n    res.status(500).json({\n      success: false,\n      message: 'Ethical review failed',\n      error: error.message\n    });\n  }\n});\n\n/**\n * @route   POST /api/master-prompt/ethical-ai/review-nutrition\n * @desc    Review nutrition plan for ethical compliance\n * @access  Private\n */\nrouter.post('/review-nutrition', async (req, res) => {\n  try {\n    const { nutritionPlan, clientProfile } = req.body;\n    \n    if (!nutritionPlan || !clientProfile) {\n      return res.status(400).json({\n        success: false,\n        message: 'Nutrition plan and client profile are required'\n      });\n    }\n    \n    const ethicalReview = await ethicalAIReview.reviewNutritionGeneration(\n      nutritionPlan,\n      clientProfile\n    );\n    \n    res.json({\n      success: true,\n      data: ethicalReview,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    piiSafeLogger.error('Ethical AI nutrition review failed', {\n      error: error.message\n    });\n    \n    res.status(500).json({\n      success: false,\n      message: 'Ethical review failed',\n      error: error.message\n    });\n  }\n});\n\n/**\n * @route   POST /api/master-prompt/ethical-ai/run-pipeline\n * @desc    Run comprehensive ethical AI pipeline\n * @access  Private (Admin)\n */\nrouter.post('/run-pipeline',\n  requirePermissionWithAccessibility('system_monitoring'),\n  async (req, res) => {\n    try {\n      const { config = {} } = req.body;\n      \n      const pipelineResults = await ethicalAIPipeline.runEthicalPipeline(config);\n      \n      // Track pipeline execution\n      piiSafeLogger.trackMCPOperation('ethical_pipeline', 'executed', {\n        passed: pipelineResults.passed,\n        score: pipelineResults.overallScore,\n        requiresHumanReview: pipelineResults.requiresHumanReview,\n        userId: req.user.id\n      });\n      \n      res.json({\n        success: true,\n        data: pipelineResults,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      piiSafeLogger.error('Ethical AI pipeline failed', {\n        error: error.message,\n        userId: req.user?.id\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Ethical AI pipeline failed',\n        error: error.message\n      });\n    }\n  }\n);\n\n/**\n * @route   GET /api/master-prompt/ethical-ai/pipeline-config\n * @desc    Get ethical AI pipeline configuration options\n * @access  Private (Admin)\n */\nrouter.get('/pipeline-config',\n  requirePermissionWithAccessibility('system_monitoring'),\n  async (req, res) => {\n    try {\n      const config = {\n        stages: ethicalAIPipeline.pipelineConfig.stages,\n        thresholds: ethicalAIPipeline.pipelineConfig.thresholds,\n        deployment: ethicalAIPipeline.pipelineConfig.deployment,\n        cicdTemplates: Object.keys(ethicalAIPipeline.cicdTemplates),\n        packageJsonScripts: ethicalAIPipeline.generatePackageJsonScripts()\n      };\n      \n      res.json({\n        success: true,\n        data: config,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      piiSafeLogger.error('Failed to get pipeline config', {\n        error: error.message\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve pipeline configuration',\n        error: error.message\n      });\n    }\n  }\n);\n\n/**\n * @route   POST /api/master-prompt/ethical-ai/generate-pipeline\n * @desc    Generate CI/CD pipeline configuration for platform\n * @access  Private (Admin)\n */\nrouter.post('/generate-pipeline',\n  requirePermissionWithAccessibility('system_monitoring'),\n  async (req, res) => {\n    try {\n      const { platform, outputPath = './generated-pipelines' } = req.body;\n      \n      if (!platform) {\n        return res.status(400).json({\n          success: false,\n          message: 'Platform parameter is required'\n        });\n      }\n      \n      const result = await ethicalAIPipeline.savePipelineConfig(platform, outputPath);\n      \n      piiSafeLogger.trackUserAction('pipeline_generated', req.user.id, {\n        platform,\n        path: result.path\n      });\n      \n      res.json({\n        success: true,\n        data: result,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      piiSafeLogger.error('Pipeline generation failed', {\n        error: error.message,\n        userId: req.user?.id\n      });\n      \n      res.status(500).json({\n        success: false,\n        message: 'Pipeline generation failed',\n        error: error.message\n      });\n    }\n  }\n);\n\nexport default router;